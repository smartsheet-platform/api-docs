---
title: Smartsheet API 2.0 Documentation

language_tabs:
  - shell: cURL
  - csharp: C#
  - java: Java
  - javascript: Node.js
  - python: Python
  
toc_footers:

includes:

search: false
---

<% OBJECTS = "Objects" %>
<% RELATED = "Related Items" %>
<% METHOD = "**HTTP Request**" %>
<% SCOPE = "**Access Scope**" %>
<% HEADERS = "**Headers**" %>
<% PARAMETERS = "**Parameters**" %>
<% REQUEST = "**Request Body**" %>
<% RETURNS = "**Returns**" %>
<% ERRORS = "**Errors**" %>
<% HEADER_AUTH = "**Authorization**: Bearer ACCESS_TOKEN" %>
<% HEADER_CT_JSON = "**Content-Type**: application/json" %>
<% PARAMETER_ALLOW_PARTIAL_SUCCESS = "**allowPartialSuccess** (optional): when specified with a value of `true`, enables partial success for this bulk operation.  See [Partial Success](#partial-success) for more information." %>
<% PARAMETER_MODIFIEDSINCE = "**modifiedSince** (optional): when specified with a <a href='#dates-and-times'>date and time</a> value, response will only include the objects that are modified on or after the date and time specified." %>
<% PAGING_PARAMETERS = "This operation supports query string parameters for pagination of results. For more information, see [Paging Query String Parameters](#paging-query-string-parameters)." %>
<% SUPPORTS_PAGING = "This operation supports pagination of results. For more information, see <a href='#paging'>Paging</a>." %>
<% SUPPORTS_BULK_INSERT = "This operation supports both single-object and bulk semantics." %>
<% SUPPORTS_OPTIONAL_BULK = "This operation supports both single-object and bulk semantics.  For more information, see <a href='#optional-bulk-operations'>Optional Bulk Operations</a>." %>
<% SUPPORTS_NUMERICDATES = "You may use the query string parameter <b>numericDates</b> with a value of <code>true</code> to enable strict parsing of dates in numeric format.  See <a href='#dates-and-times'>Dates and Times</a> for more information." %>
<% REQUEST_ONLY_ATTRIBUTE = "This attribute can be specified in a request, but will never be present in a response." %>
<% PARTIAL_SUCCESS = "When partial success is enabled, and one or more of the objects in the request fail to be added/updated/deleted, a standard [Result object](#result-object) is returned, but with a **message** of 'PARTIAL_SUCCESS' (instead of 'SUCCESS'), and a **resultCode** of 3. Additionally, the object will contain a **failedItems** attribute -- an array of [BulkItemFailure objects](#bulkitemfailure-object) that contains an item for each object in the request that failed to be added/updated/deleted." %>
<% SHARING_ERRORS = "If called with a single [Share object](#share-object), and that user or group share already exists, [error code](#errors) **1025** will be returned.  If called with an array of Share objects, and one or more user or group shares in the array already exist, they will be ignored and omitted from the response." %>
<% LIST_SHARES_RESPONSE_DESC = "By default, this operation returns only <i>item-level</i> shares (<b><a href='#share-object'>scope</b></a>='ITEM'). Use the <b>include</b> parameter to request that <i>workspace-level</i> shares (<b><a href='#share-object'>scope</b></a>=='WORKSPACE') also be returned." %>
<% WEBHOOKS_INTRO = "Webhooks provide a way for Smartsheet to automatically notify your external application or service when certain events occur in Smartsheet. Webhooks offer a more efficient alternative to using the API to periodically <i>poll</i> for changes." %>

# <span class="customTOCSectionHeading">Smartsheet API 2.0</span>

> Sample Code (more information [here](#sdks-and-sample-code))

```shell
# The cURL code samples included in this API documentation demonstrate how to execute operations using the command line data transfer tool cURL: http://en.wikipedia.org/wiki/CURL. 
```

```javascript
// The Node.js code samples included in this API documentation demonstrate how to execute operations using the Smartsheet JavaScript SDK: https://github.com/smartsheet-platform/smartsheet-javascript-sdk.
```

```csharp
// The C# code samples included in this API documentation demonstrate how to execute operations using the Smartsheet C# SDK: https://github.com/smartsheet-platform/smartsheet-csharp-sdk.
```

```java
// The Java code samples included in this API documentation demonstrate how to execute operations using the Smartsheet Java SDK: https://github.com/smartsheet-platform/smartsheet-java-sdk.
```

```python
# The Python code samples included in this API documentation demonstrate how to execute operations using the Smartsheet Python SDK:
https://github.com/smartsheet-platform/smartsheet-python-sdk.
```

<aside class="notice">
	<b>Smartsheet API 1.1 Deprecation</b><br/><br/>
	<p>
		Version 1.1 of the Smartsheet API has been officially deprecated as of July 11, 2015 (coinciding with the release of Smartsheet API 2.0). 
		Any new development from that date forward should use Smartsheet API 2.0.
	</p>
	<p>
		Smartsheet API 1.1 will continue to be supported until <b>July 31, 2016</b>, at which time it will be permanently disabled. 
		Documentation for API 1.1 can be found <a href="http://smartsheet-platform.github.io/api-docs-v1" target="_blank">here</a>.
		For information about migrating from version 1.1 to version 2.0 of the Smartsheet API, see the <a href="https://www.smartsheet.com/blog/july-2015-api-v2-launch" target="_blank">Smartsheet API 2.0 Release Notes</a>.
	</p>
</aside>

# Overview

## Introduction

> **Base URL**:  https://api.smartsheet.com/2.0

The Smartsheet API provides programmatic access to Smartsheet features and data. 
In designing the API, our goal was to make it simple, intuitive, and predictable. 
We do our best to adhere to common open and widely accepted standards, including REST for access, JSON format for the data, and OAuth for Authentication and Authorization. 
This API assumes a good working knowledge of the Smartsheet application UI, concepts and terminology.

## RESTful Architecture

```apires
Resources:

/contacts
/favorites
/folders
/groups
/home
/reports
/search
/serverinfo
/sheets
/sheets/{id}/rows
/sheets/{id}/columns
/sheets/{id}/attachments
/sheets/{id}/discussions
/sheets/{id}/updaterequests
/templates
/token
/users
/users/{id}/alternateemails
/workspaces
```

Everything in Smartsheet is represented as an object with a defined structure. 
For example, the "Home" object contains a list of your Sheets, Folders, Reports, Templates, and Workspaces, and a Sheet object contains Columns, Rows, Attachments, and Discussions. 
All aspects of Smartsheet are modeled as structured objects.

URL structure follows typical resource-oriented conventions. For example, to get a list of sheets, use `GET https://api.smartsheet.com/2.0/sheets`. 
This will return a list of Sheet objects, where each Sheet will have an "id" attribute. 
To get details on a particular sheet, use `GET https://api.smartsheet.com/2.0/sheets/123456`, where 123456 is the "id" of the Sheet you want. 
Similarly, to share a sheet, `POST` a Share object to `https://api.smartsheet.com/2.0/sheets/123456/shares`.

## HTTP Standards

All actions taken through the API are done via HTTP using [standard HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html): GET (to retrieve an object), POST (to create), PUT (to modify), and DELETE. 
[Standard HTTP Response codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) are used to indicate success and error conditions.

## Input / Output Format

Unless otherwise specified, all API endpoints expect request body data to be in [JSON](http://en.wikipedia.org/wiki/JSON), and the response body data is returned as JSON.
The following HTTP request headers may be required, depending on the operation and endpoint being invoked:

     |     |
-----|-----|
*Content-Type* | For POST and PUT requests, must be set to the appropriate value (typically `application/json`).  Ignored for GET and DELETE requests.
*Accept*       | Optional; if not specified, `*/*` is assumed (i.e. any response type is accepted), else it must match the output of the invoked endpoint (typically `application/json`).
 
<aside class="notice">Some of the data returned by the Smartsheet API is user-generated content. Caution should be taken to ensure that the user-generated content is consumed safely in any external system to avoid introducing vulnerabilities.</aside>

## Example Requests & Responses

For every API operation in this documentation, we show example requests in multiple languages and an example (JSON) response. 
You'll see the examples displayed in the dark blue panel next to each operation. 
To view the sample code in a specific language, select the corresponding language tab along the top of the dark blue panel. 
For more information about using the sample code in this API documentation, see [SDKs and Sample Code](#sdks-and-sample-code). 

As with any REST API, you can also test API requests / responses using a Chrome extension like [Advanced REST Client](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo/) or [POSTMAN](https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm). 

## Versioning and Changes

**Non-breaking changes**: We will be adding new functionality and bug fixes to the API over time. 
You should expect to see new endpoints or new attributes for existing objects. 
Such changes will not result in a new API version.  Please make sure that your code can handle new attributes gracefully. 
Also, please make sure your code does not depend on the order in which records are returned, unless it is explicitly stated in this documentation. 
Finally, please be aware that a request which results in an Error response today (because the requested action is prohibited in Smartsheet) may succeed in the future, if Smartsheet functionality changes such that the previously prohibited action becomes allowed. 

**Breaking changes**: We intend to maintain the current API version for the foreseeable future. 
If and when we decide to add functionality that breaks the contract of the current API, we will publish it with a new version number, so as to keep the existing API functionality backwards compatible.

**Deprecations**: Smartsheet occasionally deprecates APIs to indicate that those APIs should no longer be used in active development. 
Deprecated APIs typically remain present and usable for a reasonable period of time following the release in which they were deprecated, but may be removed entirely from a future version of the API. 
You should never use deprecated APIs in new development, and if you have existing code that uses deprecated APIs, we recommend that you update that code as soon as possible. 
For a list of Smartsheet API 2.0 deprecations, see [Deprecations](#deprecations).

<aside class="success">To stay informed about changes to the API, subscribe to our Developer Newsletter (using the <i>Get Developer Updates</i> form on the <a href="http://www.smartsheet.com/developers" target="_blank">Smartsheet Developer Portal</a>) or follow us via <a href="https://twitter.com/smartsheetapi" target="_blank">Twitter</a>.</aside>

# API Fundamentals

## API Best Practices

We strongly recommend that you design your integration with the following guidelines in mind:

* **Be efficient**: Use "bulk"-enabled operations
* **Be practical**: Adhere to rate limiting guidelines
* **Be smart**: Handle errors appropriately
* **Be diligent**: Implement logging

<br/>
<span class="inSectionSubheading">Be efficient: Use "bulk"-enabled operations</span>

For maximum efficiency, we recommend that you use bulk-enabled API operations whenever possible. 
A bulk-enabled API operation allows you to add, update, or delete multiple items using a single API request. 
For example, if you need to update 10 rows within a sheet, do so using a single [Update Row(s)](#update-row(s)) request, rather than executing 10 separate requests - one for each row.

Bulk-enabled operations improve efficiency by:

* Dramatically reducing the number of outbound calls you have to make
* Reducing your chances of hitting the [rate limit](#rate-limiting) (since each bulk operation counts as only one request toward the limit)
* Lightening the load on our systems, making your requests more likely to complete in a timely manner

See the section on [Bulk Operations](#bulk-operations) for more details, including a list of bulk-enabled operations.

<br/>
<span class="inSectionSubheading">Be practical: Adhere to rate limiting guidelines</span>

<%= partial "snippets/rateLimiting.md.erb" %>

<br/>
<span class="inSectionSubheading">Be smart: Handle errors appropriately</span>

<%= partial "snippets/errorHandling.md.erb" %>

<br/>
<span class="inSectionSubheading">Be diligent: Implement logging</span>

We strongly recommend that you design your integration such that it is capable of logging API requests and responses. 
Having access to the raw requests and responses (including detailed error codes and error messages) when API issues emerge will streamline troubleshooting and accelerate time to resolution.

The following examples show the type of information that your application should log for API requests and responses.

**Request:  verb, URI, header(s), request body**

`POST https://api.smartsheet.com/2.0/sheets/4098273196697476/columns`<br/> 
`Authorization: Bearer MY_TOKEN`<br/>
`Content-Type: application/json`<br/>
`[`<br/>
&#160;&#160;`{`<br/>
&#160;&#160;&#160;&#160;`"title": "FIRST COLUMN - My New Column",`<br/>
&#160;&#160;&#160;&#160;`"index": 0,`<br/>
&#160;&#160;&#160;&#160;`"type": "TEXT_NUMBER"`<br/>
&#160;&#160;`},`<br/>
&#160;&#160;`{`<br/>
&#160;&#160;&#160;&#160;`"title": "FIRST COLUMN - My New Column",`<br/>
&#160;&#160;&#160;&#160;`"index": 1,`<br/>
&#160;&#160;&#160;&#160;`"type": "TEXT_NUMBER"`<br/>
&#160;&#160;`}`<br/>
`]`

**Response:  HTTP status code, response body**

`HTTP status: 400 Bad Request`<br/>
`{`<br/>
&#160;&#160;`"errorCode": 1133,`<br/>
&#160;&#160;`"message": "Column titles are not unique among input columns.",`<br/>
&#160;&#160;`"detail": { "columnTitle": "FIRST COLUMN - My New Column" }`<br/>
`}`

## API Troubleshooting

Should you encounter issues with the Smartsheet API while building an integration using a particular programming language (ex: Java, C#, PHP, Python, etc.), keep the following troubleshooting techniques in mind.

<ol>
	<li>
		<b>Try executing the same API Request using a tool like <a href="#testing-with-curl">cURL</a> or <a href="#testing-with-postman">Postman</a>.</b> By taking your code out of the equation, you can isolate troubleshooting to the raw Request / Response.<br/><br/>
		<ul>
			<li>If you receive a similar error when you execute the Request using cURL or Postman, this suggests an issue with the Request format or contents. Consult the <a href="http://smartsheet-platform.github.io/api-docs" target="_blank">API Documentation</a> to ensure that the Request being sent matches what the documentation specifies. Once you have the Request working in cURL or Postman, update your code accordingly.<br/><br/></li>
			<li>If you're able to execute the Request successfully using cURL or Postman, but not via your code, this suggests that the Request your code is sending is somehow different than what you intend. You'll need to compare the (successful) Request from cURL or Postman with the (unsuccessful) Request that your code is generating. (See step #2 below.)</li>
		</ul><br/><br/>
	</li>
	<li>
		<b>Examine the Request that your code is sending (including the HTTP verb, URI, headers, and Request body) and the Response that it's receiving back from Smartsheet (including the HTTP status code, headers, and response body).</b><br/><br/>
		<ul>
			<li>If you've implemented Request / Response logging in your application (as suggested in <a href="#api-best-practices">API Best Practices</a>), inspect the full trace of Request and Response in the log file. Compare the Request that your application is logging with the (successful) Request from cURL or Postman, and update your code to correct any discrepancies.<br/><br/></li>
			<li>Alternatively, you may choose to use a tool like <a href="http://www.telerik.com/fiddler" target="_blank">Fiddler</a> or <a href="http://www.charlesproxy.com/" target="_blank">Charles HTTP Proxy</a> to inspect the full trace of Request and Response as it goes across the wire. Compare the Request trace that your application generates with the (successful) Request from cURL or Postman, and update your code to correct any discrepancies.<br/><br/></li>
		</ul>
	</li>
</ol>

### Testing with cURL

cURL is a command-line utility that you can use to execute HTTP requests. 
It works on a variety of platforms (PC, Mac, etc.) and provides a quick and easy way to test REST API calls. 
To get started with cURL, go [here](http://curl.haxx.se/docs/manpage.html). 
Once you've installed cURL, you can use the cURL code samples in this API documentation (found within the **cURL** tab of the code samples panel) to test any Smartsheet API operation. 

### Testing with Postman

Postman is a browser-based REST API client that you can use with Google Chrome to execute HTTP requests. 
It provides a much friendlier UI than cURL and also allows you to save configuration settings and REST API requests, making it quick and easy to resume testing at any time (without having to create everything from scratch each time). 
To get started with Postman, go [here](https://www.getpostman.com). 
Test any Smartsheet API request by using this API documentation to determine the HTTP verb, URI, Headers, and Request Body that the operation requires, and plugging that information into Postman to test the request.
<aside class="notice">Postman is one of many browser-based REST API clients. Other popular options include:<ul><li><a href="https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo" target="_blank">Advanced REST Client</a> (for Google Chrome)</li><li><a href="https://chrome.google.com/webstore/detail/rest-web-service-client/ecjfcmddigpdlehfhdnnnhfgihkmejin" target="_blank">Rest Web Service Client</a> (for Google Chrome)</li><li><a href="http://restclient.net/" target="_blank">REST Client</a> (for Mozilla Firefox)</li><li><a href="https://addons.mozilla.org/en-US/firefox/addon/rest-easy/" target="_blank">REST Easy</a> (for Mozilla Firefox)</li></ul></aside>

## Authentication

The Smartsheet API utilizes OAuth 2.0 for Authentication and Authorization. 
An **Authorization** HTTP header containing an Access Token is required to authenticate requests. 
Access Tokens can be acquired in one of two ways:
<ul>
<li>via the Smartsheet UI ([User-generated Access Tokens](#user-generated-access-tokens)) </li>
<li>via OAuth 2.0 (see [Third-party Access Tokens](#third-party-access-tokens))</li>
</ul> 

### User-generated Access Tokens

Smartsheet users can easily generate Access Tokens by logging in to their Smartsheet account. 
Once a token is generated, it can be used in a script or custom application, or with an API integration service like Zapier, to access any Smartsheet data which the token owner already can access in the application. 
See [Direct API Access](#direct-api-access) for more information on user-generated tokens.

### Third-party Access Tokens

Third-party developers are able to build applications that can acquire Access Tokens using OAuth 2.0. 
See [Third Party App Development](#third-party-app-development) for more information.

## Access Levels

Throughout the API we have "Share" objects that represent the shared user's access level. 
Also, on Sheets, Workspaces and Templates, there is an **accessLevel** attribute that describes the current user's access level to that object. 
This corresponds directly to the sharing and access controls of Smartsheet that are available through the Smartsheet UI. 
The **accessLevel** attribute has one of the following values:

     |     |
-----|-----|
VIEWER | The user has read-only access to the resource.
EDITOR | The user can edit the resource, but cannot alter the structure of, delete or share the resource.
EDITOR_SHARE | The same as EDITOR, but with the ability to share the resource to other users.
ADMIN | The user can edit and share the resource, and can alter the structure of the resource as well.
OWNER | The user has complete control over the resource.

## Rate Limiting

<%= partial "snippets/rateLimiting.md.erb" %>

## Errors

<%= partial "snippets/errorHandling.md.erb" %>

### Error Handling
 
The following table specifies the recommended action for each Smartsheet-specific error code. 
Use this information to implement error handling logic according to the following guidelines:

* If the error code indicates a permanent error condition, do not retry the request.
* If the error code indicates a problem that can be fixed, do not retry the request until the problem has been fixed.
* If the error code indicates a problem that could be overcome by retrying the request after a period of time, retry the request using exponential backoff.


HTTP status code | Smartsheet errorCode | Smartsheet message | Recommended Action |
-----|-----|-----|-----|
401 | 1001 | An Access Token is required. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that <b>Authorization</b> header is present and set properly.
401 | 1002 | Your Access Token is invalid. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the access token specified in the <b>Authorization</b> header is valid.
401 | 1003 | Your Access Token has expired. | Do not retry without fixing the problem.<br/><br/>Hint: Generate a new <a href="#authentication">access token</a> or <a href="#oauth-flow">refresh</a> the token.
403 | 1004 | You are not authorized to perform this action. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that <b>Authorization</b> header is present and set properly, and that the requester has the required permission level in Smartsheet to perform the requested action.
401 | 1005 | Single Sign-On is required for this account. | <span class="doNotRetry">Do not retry.</span>
404 | 1006 | Not Found. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that specified URI is correct. If the URI contains an object ID, verify that the object ID is correct and that the requester has access to the corresponding object in Smartsheet.
404 | 1007 | Version not supported. | Do not retry without fixing the problem.
400 | 1008 | Unable to parse request. The following error occurred: {0} | Do not retry without fixing the problem.
400 | 1009 | A required parameter is missing from your request: {0}. | Do not retry without fixing the problem.
405 | 1010 | HTTP Method not supported. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the proper verb is specified for the request (GET, PUT, POST, or DELETE).
400 | 1011 | A required header was missing or invalid: {0} | Do not retry without fixing the problem.
400 | 1012 | A required object attribute is missing from your request: {0}. | Do not retry without fixing the problem.
403 | 1013 | The operation you are attempting to perform is not supported by your plan. | Do not retry without fixing the problem.
403 | 1014 | There are no licenses available on your account. | Do not retry without fixing the problem.
403 | 1015 | The user exists in another account. The user must be removed from that account before they can be added to yours. | Do not retry without fixing the problem.
403 | 1016 | The user is already a member of your account. | <span class="doNotRetry">Do not retry.</span>
403 | 1017 | The user already has a paid account. The user must cancel that account before they can be added to yours. | Do not retry without fixing the problem.
400 | 1018 | The value {0} was not valid for the parameter {1}. | Do not retry without fixing the problem.
400 | 1019 | Cannot transfer to the user specified. User not found. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the <b>transferTo</b> User ID specified is correct.
404 | 1020 | User not found. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the User ID specified is correct.
403 | 1021 | Cannot transfer to the user specified. They are not a member of your account. | <span class="doNotRetry">Do not retry.</span>
403 | 1022 | Cannot delete the user specified. They are not a member of your account. | <span class="doNotRetry">Do not retry.</span>
400 | 1023 | The sheet specified is shared at the Workspace level. | <span class="doNotRetry">Do not retry.</span>
400 | 1024 | The HTTP request body is required for this Method. | Do not retry without fixing the problem.
400 | 1025 | The share already exists. | <span class="doNotRetry">Do not retry.</span>
403 | 1026 | Transferring ownership is not currently supported. | <span class="doNotRetry">Do not retry.</span>
404 | 1027 | Share not found. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the Share ID specified is correct.
400 | 1028 | You cannot edit the share of the owner. | <span class="doNotRetry">Do not retry.</span>
400 | 1029 | The parameter in the URI does not match the object in the request body. | Do not retry without fixing the problem.
401 | 1030 | You are unable to assume the user specified. | <span class="doNotRetry">Do not retry.</span>
400 | 1031 | The value {0} was not valid for the attribute {1}. | Do not retry without fixing the problem.
400 | 1032 | The attribute(s) {0} are not allowed for this operation. | Do not retry without fixing the problem.
404 | 1033 | The template was not found. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the Template ID specified is correct.
400 | 1034 | Invalid Row ID. | Do not retry without fixing the problem.
400 | 1035 | Attachments and discussions cannot be POSTed with a row. | Do not retry without fixing the problem.
400 | 1036 | The columnId {0} is invalid. | Do not retry without fixing the problem.
400 | 1037 | The columnId {0} is included more than once in a single row. | Do not retry without fixing the problem.
400 | 1038 | Invalid Cell value. Must be numeric or a string. | Do not retry without fixing the problem.
403 | 1039 | Cannot edit a locked column {0} | <span class="doNotRetry">Do not retry.</span>
400 | 1040 | Cannot edit your own share. | <span class="doNotRetry">Do not retry.</span>
400 | 1041 | The value for {0} must be {1} characters in length or less, but was {2}. | Do not retry without fixing the problem.
400 | 1042 | The value for cell in column {0}, {1}, did not conform to the strict requirements for type {2}. | Do not retry without fixing the problem.
404 | 1043 | The row number you requested is blank and cannot be retrieved. | Do not retry without fixing the problem.
400 | 1044 | Assume-User header is required for your Access Token. | Do not retry without fixing the problem.
403 | 1045 | The resource specified is read-only. | <span class="doNotRetry">Do not retry.</span>
400 | 1046 | Cells containing formulas, links to other cells, system values, or Gantt values cannot be inserted or updated through the API. | <span class="doNotRetry">Do not retry.</span>
403 | 1047 | You cannot remove yourself from the account through the API. | <span class="doNotRetry">Do not retry.</span>
403 | 1048 | The user specified has declined the invitation to join your organization. You cannot modify declined invitations. | <span class="doNotRetry">Do not retry.</span>
403 | 1049 | You cannot remove admin permissions from yourself through the API. | <span class="doNotRetry">Do not retry.</span>
403 | 1050 | You cannot edit a locked row. | <span class="doNotRetry">Do not retry.</span>
400 | 1051 | Attachments of type FILE cannot be created using JSON. | Do not retry without fixing the problem.
406 | 1052 | Invalid Accept header. Media type not supported. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that <b>Accept</b> header is set to the <a href="#input-/-output-format">proper value</a> (to match the output of the invoked endpoint -- typically "application/json").
400 | 1053 | Unknown Paper size: {0}. | Do not retry without fixing the problem.
400 | 1054 | The new sheet requires either a fromId or columns. | Do not retry without fixing the problem.
400 | 1055 | One and only one column must be primary. | Do not retry without fixing the problem.
400 | 1056 | Column titles must be unique. | Do not retry without fixing the problem.
400 | 1057 | Primary columns must be of type TEXT_NUMBER. | Do not retry without fixing the problem.
400 | 1058 | Column type of {1} does not support symbol of type {0}. | Do not retry without fixing the problem.
400 | 1059 | Column options are not allowed when a symbol is specified. | Do not retry without fixing the problem.
400 | 1060 | Column options are not allowed for column type {0}. | Do not retry without fixing the problem.
400 | 1061 | Max count exceeded for field {0}. | Do not retry without fixing the problem.
400 | 1062 | Invalid row location. | Do not retry without fixing the problem.
400 | 1063 | Invalid parentId: {0}. | Do not retry without fixing the problem.
400 | 1064 | Invalid siblingId: {0}. | Do not retry without fixing the problem.
400 | 1065 | The column specified cannot be deleted. | <span class="doNotRetry">Do not retry.</span>
400 | 1066 | You can only share to {0} users at a time. | Do not retry without fixing the problem.<br/><br/>Hint: Reduce the number of users specified in the Share request.
401 | 1067 | Invalid client_id | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the value of the <b>client_id</b> querystring parameter matches the value of the App <b>client Id</b> shown in the Smartsheet web UI (Developer Tools >> App Profile).
400 | 1068 | Unsupported grant type. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the value of the <b>grant_type</b> querystring parameter is "authorization_code".
400 | 1069 | Invalid Request. The authorization_code has expired. | Do not retry without fixing the problem.<br/><br/>Hint: Repeat step 1 of the <a href="#oauth-flow">OAuth flow</a> (to retrieve a new authorization code).
400 | 1070 | Invalid Request. Required parameter is missing: {0}. | Do not retry without fixing the problem.
400 | 1071 | Invalid Grant. The authorization code or refresh token provided was invalid. | Do not retry without fixing the problem.
400 | 1072 | Invalid hash value. The hash provided did not match the expected value. | Do not retry without fixing the problem.
400 | 1073 | The redirect_uri did not match the expected value. | Do not retry without fixing the problem.<br/><br/>Hint: Omit the <b>redirect_uri</b> querystring parameter -- if <b>redirect_uri</b> is not specified in the querystring, the value specified in the Smartsheet web UI (Developer Tools >> App Profile) will be used by default.
400 | 1074 | You are trying to upload a file of {0}, but the API currently only supports {1} | Do not retry without fixing the problem.
400 | 1075 | The Content-Size provided did not match the file uploaded. This may be due to network issues or because the wrong Content-Size was specified. | Do not retry without fixing the problem.
403 | 1076 | The user has created sheets and must be added as a licensed user. | Do not retry without fixing the problem.
400 | 1077 | Duplicate system column type: {0}. | Do not retry without fixing the problem.
400 | 1078 | System column type {0} not supported for {1} {2}. | Do not retry without fixing the problem.
400 | 1079 | Column type {0} is not supported for system column type {1} | Do not retry without fixing the problem.
400 | 1080 | End Dates on dependency-enabled sheets cannot be created/updated. Please update either the Duration or Start Date column. | <span class="doNotRetry">Do not retry.</span>
403 | 1081 | You cannot delete another user's discussions, comments, or comment attachments. | <span class="doNotRetry">Do not retry.</span>
400 | 1082 | You cannot add options to the given column {0} because it is not a PICKLIST. | Do not retry without fixing the problem.
400 | 1083 | Auto number formatting cannot be added to a column {0} | Do not retry without fixing the problem.
400 | 1084 | The auto number format is invalid. | Do not retry without fixing the problem.
400 | 1085 | To change this column's type you must first disable Dependencies for this sheet. | Do not retry without fixing the problem.
400 | 1086 | Google was not able to verify your access. | Do not retry without fixing the problem.
400 | 1087 | The column specified is used in a conditional formatting rule, so the column cannot be deleted and its type cannot be changed. | Do not retry without fixing the problem.
400 | 1088 | Invalid length for concatenated auto number format. Concatenated format is {0}, with a length of {1}. Must be less than or equal to 40. | Do not retry without fixing the problem.
400 | 1089 | The type specified is only used with System Columns. | Do not retry without fixing the problem.
400 | 1090 | Column.type is required when changing symbol, systemColumnType or options. | Do not retry without fixing the problem.
400 | 1091 | Invalid Content-Type: {0} | Do not retry without fixing the problem.
403 | 1092 | You cannot delete this row. Either it or one or more of its children are locked. | <span class="doNotRetry">Do not retry.</span>
400 | 1095 | The Excel file is invalid/corrupt. This may be due to an invalid file extension, an outdated Excel format, or an invalid Content-Length. | Do not retry without fixing the problem.
403 | 1096 | This Apple payment receipt has already been applied to a user's payment profile. | <span class="doNotRetry">Do not retry.</span>
403 | 1097 | A user must be a licensed sheet creator to be a resource viewer. | Do not retry without fixing the problem.
400 | 1098 | To delete this column you must first disable Dependencies for this sheet. | Do not retry without fixing the problem.
400 | 1099 | To delete this column you must first disable Resource Management for this sheet. | Do not retry without fixing the problem.
400 | 1100 | Uploading new versions of a discussion comment attachment is not supported. | <span class="doNotRetry">Do not retry.</span>
400 | 1101 | Uploading new versions of non-FILE type attachments is not supported. | <span class="doNotRetry">Do not retry.</span>
403 | 1102 | A user must be a licensed sheet creator to be a group administrator. | Do not retry without fixing the problem.
400 | 1103 | A group with the same name already exists. | Do not retry without fixing the problem.
403 | 1104 | You must be a group administrator to create a group. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the requester has "Group Admin" permissions in Smartsheet.
400 | 1105 | The operation failed because one or more group members were not members of your account: {0} | Do not retry without fixing the problem.
404 | 1106 | Group not found | Do not retry without fixing the problem.<br/><br/>Hint: Verify that specified Group ID is correct.
400 | 1107 | User specified in transferGroupsTo must be a group admin. | Do not retry without fixing the problem.
400 | 1108 | transferGroupsTo must be provided because user being deleted owns one or more groups. | Do not retry without fixing the problem.
400 | 1109 | Only one of cell.hyperlink or cell.linkInFromCell may be non-null. | Do not retry without fixing the problem.
400 | 1110 | cell.value must be null if cell.linkInFromCell is non-null. | Do not retry without fixing the problem.
400 | 1111 | Only one of cell.hyperlink.sheetId and cell.hyperlink.reportId may be non-null. | Do not retry without fixing the problem.
400 | 1112 | cell.hyperlink.url must be null for sheet or report hyperlinks. | Do not retry without fixing the problem.
400 | 1113 | cell.value must be a string when the cell is a hyperlink. | Do not retry without fixing the problem.
404 | 1114 | Invalid sheetId or reportId: {0} | Do not retry without fixing the problem.
400 | 1115 | Row must contain either cell link updates or row/cell value updates; mixing of both update types in one API call is not supported. | Do not retry without fixing the problem.
400 | 1116 | You cannot link a cell to its own sheet. | <span class="doNotRetry">Do not retry.</span>
400 | 1117 | One of the following cell.hyperlink fields must be non-null: url, sheetId, or reportId. | Do not retry without fixing the problem.
400 | 1118 | You cannot set the value of a Gantt allocation column (id {0}) in a row that has child rows. | <span class="doNotRetry">Do not retry.</span>
500 | 1119 | Failed to complete copy.<br/>**NOTE**: may include a "detail" object containing "topContainerType" and "topContainerId" which represent the top-level folder or workspace that were partially copied. | <span class="doNotRetry">Do not retry.</span>
400 | 1120 | Too many sheets to copy.<br/>**NOTE**: includes a "detail" object containing "maxSheetCount" which represents the server-side limit on the number of sheets allowed in a single folder/workspace copy operation. | Do not retry without fixing the problem.<br/><br/>Hint: Reduce number of sheets being copied  to <b>maxSheetCount</b> or fewer before reattempting the request.
400 | 1121 | transferTo must be provided because user being deleted owns one or more groups. | Do not retry without fixing the problem.
405 | 1122 | Requested URL does not support this method: {0} | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the verb specified for the request (GET, POST, PUT, DELETE) is valid for the specified URI.
400 | 1123 | Specifying multiple row locations is not yet supported. Each row must use the same row location attribute and value (toBottom, toTop, parentId, siblingId, above) | Do not retry without fixing the problem.
415 | 1124 | Invalid Content-Type header. Media type not supported. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that <b/>Content-Type</b> header is specified and set to the <a href="#input-/-output-format">proper value</a>.
400 | 1125 | Each part in a multipart payload must have a name | Do not retry without fixing the problem.
400 | 1126 | Multipart payload contained duplicate part names: {0} | Do not retry without fixing the problem.
400 | 1127 | Required multipart part was missing: '{0}' | Do not retry without fixing the problem.
400 | 1128 | Multipart upload size limit exceeded. | Do not retry without fixing the problem.
400 | 1129 | The resource you tried to create already exists. | <span class="doNotRetry">Do not retry.</span>
400 | 1130 | One of cell.value or objectValue may be set, but not both. | Do not retry without fixing the problem.
400 | 1131 | cell.{0} for column {1} was of the wrong object type. Allowed types: {2} | Do not retry without fixing the problem.
400 | 1132 | The token provided has previously been revoked. | <span class="doNotRetry">Do not retry.<br/><br/>Hint: This error occurs during the <a href="#oauth-flow">OAuth flow</a> when trying to refresh a token that’s previously been revoked.  Must instead obtain a new token.</span>
400 | 1133 | Column titles are not unique among input columns. | Do not retry without fixing the problem.
400 | 1134 | Duplicate system column type among input columns. | Do not retry without fixing the problem.
400 | 1135 | Input column index {0} is different from the first input column index {1}. | Do not retry without fixing the problem.
400 | 1136 | Cannot copy or move row(s) within the same sheet. | <span class="doNotRetry">Do not retry.</span>
400 | 1137 | Input collection contains multiple instances of the same element. | Do not retry without fixing the problem.
403 | 1138 | The user is not eligible for a trial organization. | <span class="doNotRetry">Do not retry.</span>
403 | 1139 | The user is an admin in another organization. Add 'allowInviteAccountAdmin=true' to the query string to invite their entire organization. | Do not retry without fixing the problem.
403 | 1140 | The user must be added as a licensed user. | Do not retry without fixing the problem.
403 | 1141 | Inviting users from an enterprise organization is not supported. | <span class="doNotRetry">Do not retry.</span>
400 | 1142 | Column type {0} is reserved for project sheets and may not be manually set on a column. | Do not retry without fixing the problem.
400 | 1143 | To set {0}, you must first enable dependencies on the sheet. | Do not retry without fixing the problem.
400 | 1144 | The user owns one or more groups and must be added as a Group Admin. | Do not retry without fixing the problem.
400 | 1145 | Multipart upload request was invalid. Please check your request headers and payload. | Do not retry without fixing the problem.
400 | 1146 | Unsupported operation: {0}. | <span class="doNotRetry">Do not retry.</span>
400 | 1147 | Multipart request contained an invalid part name: '{0}' | Do not retry without fixing the problem.
400 | 1148 | Numeric cell values must be between {0} and {1}. | Do not retry without fixing the problem.
400 | 1155 | You cannot set the '{0}' attribute for a cell in a 'Project Settings' column of a dependency-enabled sheet. | <span class="doNotRetry">Do not retry.</span>
400 | 1156 | Invalid email | Do not retry without fixing the problem.<br/><br/>Hint: Verify that the email address is properly formatted.
400 | 1157 | This address is already associated with another Smartsheet account, so it cannot be added as an alternate address for this account. | <span class="doNotRetry">Do not retry.</span>
400 | 1158 | This address has not been confirmed yet, so it can't be set as the primary email address. | Do not retry without fixing the problem.
400 | 1159 | The specified email address ({0}) is an alternate email address for a user with a primary email address of {1}. | Do not retry without fixing the problem.
400 | 1160 | Invalid bulk request. See detail for more information. | Do not retry without fixing the problem.<br/><br/>Hint: Examine the **detail** attribute within the error response for details about the issue(s).
400 | 1161 | Cannot set altText for a cell that does not contain an image: row {0}, column {1}. | <span class="doNotRetry">Do not retry.</span>
400 | 1163 | If cell.image is non-null then value, objectValue, hyperlink, and linkInFromCell must all be null. | Do not retry without fixing the problem.
400 | 1164 | Cannot add image to cell because this feature has been disabled by the org administrator. | <span class="doNotRetry">Do not retry.</span>
400 | 1165 | Cannot add image to cell with alt text larger than 100 characters. | Do not retry without fixing the problem.
400 | 1166 | You cannot share Sights as an Editor. | <span class="doNotRetry">Do not retry.</span>
400 | 1167 | The resource you are attempting to access has expired. | <span class="doNotRetry">Do not retry.</span>
500 | 1170 | The sheet referenced by this widget is unavailable or deleted. | <span class="doNotRetry">Do not retry.</span>
500 | 1171 | The report referenced by this widget is unavailable or deleted. | <span class="doNotRetry">Do not retry.</span>
500 | 1172 | The referenced cell is unavailable or deleted. | <span class="doNotRetry">Do not retry.</span>
403 | 1173 | You must be in a Team/Enterprise account to specify a {0} value of '{1}'. | <span class="doNotRetry">Do not retry.</span>
403 | 1174 | The value for {0} is invalid because this publish option is configured to be restricted to users in this account. | <span class="doNotRetry">Do not retry.</span>
403 | 1175 | One or more publish options which you attempted to enable are disabled for this account. | <span class="doNotRetry">Do not retry.</span>
400 | 1176 | Array attribute(s) may not contain null elements: {0}. | Do not retry without fixing the problem.
400 | 1177 | Arrays may not contain null elements. | Do not retry without fixing the problem.
400 | 1178 | The following combination of attributes is not allowed for this operation: {0}. | Do not retry without fixing the problem.<br/><br/>Hint: Examine the detail attribute(s) within the error response for detail about the issue(s).
400 | 1179 | The schedule specified is invalid because endAt is earlier than the next send date. | Do not retry without fixing the problem.<br/><br/>Hint: Verify that startAt, endAt, repeatEvery and other attributes will result in one or more future delivery.
500 | 4000 | An unexpected error has occurred. Please contact api@smartsheet.com for assistance. | <span class="doNotRetry">Do not retry.</span>
503 | 4001 | Smartsheet.com is currently offline for system maintenance. Please check back again shortly. | <span class="retryAgainLater">Retry using <a href="https://en.wikipedia.org/wiki/Exponential_backoff" target="_blank">exponential backoff</a>.<br/><br/>Hint: Wait time between retries should measure in minutes (not seconds).</span>
500 | 4002 | Server timeout exceeded. Request has failed. | <span class="retryAgainLater">Retry using <a href="https://en.wikipedia.org/wiki/Exponential_backoff" target="_blank">exponential backoff</a>.</span>
429 | 4003 | Rate limit exceeded. | <span class="retryAgainLater">Retry using <a href="https://en.wikipedia.org/wiki/Exponential_backoff" target="_blank">exponential backoff</a>.<br/><br/>Hint: Reduce the rate at which you are sending requests.</span>
500 | 4004 | An unexpected error has occurred. Please retry your request. If you encounter this error repeatedly, please contact api@smartsheet.com for assistance.<br/><br/>**Or**<br/><br/>Request failed because sheetId {0} is currently being updated by another request that uses the same access token. Please retry your request once the previous request has completed. | <span class="retryAgainLater">Retry using <a href="https://en.wikipedia.org/wiki/Exponential_backoff" target="_blank">exponential backoff</a>.</span>
400 | 5xxx | Errors in the 5xxx range represent conditions that a developer cannot reasonably prevent or handle, most typically related to account status. These error messages are localized and can be displayed to the end-user to inform them of the condition that caused the error to occur. | <span class="doNotRetry">Do not retry.<br/></span>

## Column Types

Smartsheet supports the following standard column types, which are represented in a [Column object](#column-object) with a **type** attribute set to one of the following:

Column Type | Column.type Value | Notes |
------------|--------------------------|-------|
Text/Number		| TEXT_NUMBER	|
Contact List	| CONTACT_LIST	|
Date			| DATE			|
Dropdown List	| PICKLIST		| Custom, RYG, Harvey Ball, Priority types, etc.
Checkbox 		| CHECKBOX		| Checkbox, star, and flag types
Duration		| DURATION		| **Only for dependency-enabled project sheets**<br/>The API does not support setting a Column to this type. (This can only be done through the Smartsheet web application when configuring a project sheet.)
Predecessor		| PREDECESSOR	| **Only for dependency-enabled project sheets**<br/>The API does not support setting a Column to this type, or updating data in a column of this type. (This can only be done through the Smartsheet web application when configuring a project sheet.) 
Date/Time 		| ABSTRACT_DATETIME | Represents a project sheet's Start and End dates.<br/>**Only for dependency-enabled project sheets**<br/>The API does not support setting a Column to this type. (This can only be done through the Smartsheet web application when configuring a project sheet.) Additionally, the API does not support updating data in the End Date column under any circumstance, and does not support updating data in the Start Date column if Predecessor is set for that row.
Date/Time		| DATETIME		| Used only by the following System-generated columns: <ul><li>Created (Date) (**Column.systemColumnType** = "CREATED_DATE")</li><li>Modified (Date) (**Column.systemColumnType** = "MODIFIED_DATE")</li></ul>

<aside class="notice">See the <a href="#cell-values">Cell Values</a> section for information on getting and setting cell values for the different column types.</aside>

### Symbol Columns

In addition to the basic column types above, the Smartsheet app also supports columns that display symbols. These are simply specialized columns of type PICKLIST or CHECKBOX,
whose **[symbol](#column-object)** attribute is set to one of the values below:

**Symbols for CHECKBOX columns:**

<% CHECKBOX_SYMBOL_LIST = "<ul><li>STAR</li><li>FLAG</li></ul>" %>

<%= CHECKBOX_SYMBOL_LIST %>

**Symbols for PICKLIST columns:**

<% PICKLIST_SYMBOL_LIST = "<ul><li>HARVEY_BALLS</li><li>PRIORITY</li><li>RYG</li><li>PRIORITY_HML</li><li>DECISION_SYMBOLS</li><li>DECISION_SHAPES</li><li>VCR</li><li>RYGB</li><li>RYGG</li><li>WEATHER</li><li>PROGRESS</li><li>ARROWS_3_WAY</li><li>ARROWS_4_WAY</li><li>ARROWS_5_WAY</li><li>DIRECTIONS_3_WAY</li><li>DIRECTIONS_4_WAY</li><li>SKI</li><li>SIGNAL</li><li>STAR_RATING</li><li>HEARTS</li><li>MONEY</li><li>EFFORT</li><li>PAIN</li></ul>" %>

<%= PICKLIST_SYMBOL_LIST %>
 
<aside class="notice">The Smartsheet grid user interface presents several row attributes and features (e.g., row number, attachments, discussions, row action indicator, etc.) visually as columns.  The API does not consider these to be columns, and does not return or otherwise expose them as columns.  The only columns returned by the API are user data columns.</aside>

### System Columns

In addition to the standard column types and symbols, Smartsheet has a number of *system columns*, which represent data that is
filled in by Smartsheet and whose values cannot be changed by the user. These columns are represented with standard
[column types](#column-types), with the **[Column.systemColumnType](#column-object)** attribute set to one of the following:

Column.systemColumnType Value | Column Type | Notes
-----|-----|-----|
MODIFIED_DATE | DATETIME
MODIFIED_BY | CONTACT_LIST
CREATED_DATE | DATETIME
CREATED_BY  | CONTACT_LIST
AUTO_NUMBER | TEXT_NUMBER | Columns of this system column type will include an [AutoNumberFormat object](#autonumberformat-object) that describes the mask used to generate the value.

## Cell Values

Within the Smartsheet web application, all editable column types are flexible and cells in those columns can contain either
a value specific to the column type (e.g. dates, checkboxes, symbols, etc.) or a free-form text value.  This allows for a very
flexible UI and is one of the key benefits to using Smartsheet.

<aside class="notice">See the <a href="#column-types">Column Types</a> section for information on the different column types.</aside>

### Cell Value Representation

[Cell objects](#cell-object) retrieved through the Smartsheet API's have two main attributes representing cell values: **Cell.value**, and
**Cell.displayValue**.  A third attribute, **Cell.objectValue** is currently used only for adding and updating predecessors.
An empty cell is always represented by **null** for all of these attributes.

**Cell.displayValue** is always a **string** and is only returned for certain column types (see below).  It represents the formatted value as it should
be displayed to an end-user.  For example, if a TEXT_NUMBER column is formatted as a US Dollar currency, its **value** may be a number
like 1234.5678, but its **displayValue** would be "$1,234.57".

**Cell.value** represents a cell's raw value and can be one of the following primitive JSON types: **string**, **number**, or **boolean**,
depending on the column type.  Complex types are represented as strings, formatted as described below:

<% PROJECT_COLUMN_HELP_URL = "http://help.smartsheet.com/customer/portal/articles/765737-project-sheet-columns-start-date-end-date-duration-complete-and-predecessors" %>

| Column Type | Possible Types for Cell.value | Returns Cell.displayValue?
|-------------|-------------------------------|---------------------------
| TEXT_NUMBER	| **string**: free-form text values<br/>**number**: numeric values											| Yes: same as **value** for strings; for number values, the number with formatting applied.
| CONTACT_LIST	| **string**: an email address representing a contact, or a free-form text value.							| Yes: same as **value** for free-form strings; for contacts, the contact's name if any, else their email address.
| DATE			| **string**: a date in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) format, or a free-form text value.<br/>**number**: see [Dates and Times](#dates-and-times) for how to request dates to be returned as numbers. | No.
| PICKLIST		| **string**: one of the picklist's column options, or a free-form text value.<br/>**number**: numeric values| Yes: same as **value** for strings; for number values, the number with formatting applied.
| CHECKBOX		| **boolean**: `true` if the checkbox is checked, `false` otherwise.<br/>**string**: a free-form text value.| No.
| DURATION		| **string**: a duration value such as "4d 6h 30m" in the user's locale, or a free-form text value.<br/>See the [Help Center](<%= PROJECT_COLUMN_HELP_URL %>) for more information on durations.| Yes: same as **value**
| PREDECESSOR	| **string**: a comma-delimited predecessor list such as "12FS +3d 4h, 14SS", or a free-form text value.<br/>See the [Help Center](<%= PROJECT_COLUMN_HELP_URL %>) for more information on predecessors.| Yes: same as **value**
| ABSTRACT_DATETIME | **string**: a project date and time in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) format, or a free-form text value.<br/>**number**: see [Dates and Times](#dates-and-times) for how to request dates to be returned as numbers. | No.

**Cell.objectValue** is an object representation of a cell's value and is currently used for adding or updating predecessor cell values.
It provides a more "programmer friendly" format for assembling predecessors. To update a cell's predecessors, set objectValue to a
[PredecessorList object](#predecessorlist-object) containing [Predecessor objects](#predecessor-object).

### Cell Value Parsing

The flexibility in cell value data types is a powerful feature in the Smartsheet application, but at the same time, it poses a challenge
for an API in terms of parsing. Being too flexible will likely result in unexpected behavior. For instance, if you write code
to post a Date value to a Smartsheet and the API operation succeeds,  you might assume that the date value you sent was interpreted
as date. What happens if you posted your date in the wrong format? Do you really want Smartsheet to keep the malformed date
as a Text value? Probably not.
 
To address this problem, the Smartsheet API employs a simple scheme to indicate whether you want a more predictable and strict
interface or a more flexible one. By default, a cell value is expected to conform to "strict" rules for the type of the cell's column.
If an input value doesn't conform, the API will return [error code 1042](#errors).

If, however, you want the same flexibility as the Smartsheet web application, you can disable the strict rules, and we’ll do our best to make
sense of it. To enable lenient parsing simply include `"strict" : false` in the [Cell object](#cell-object) in your request body.

The parsing rules for the various column types are as follows:

**TEXT_NUMBER**:

     |     |
-----|-----|
*Strict* | All numeric and text values are valid and are interpreted literally.
*Lenient* | All numeric and text values are valid. Formatted numbers passed as text values, such as currencies ("$5,000"), percentages ("50%"), or decimals ("100.5")  will be parsed to their numeric equivalents, based on the locale of the Access Token owner,  with the proper formatting enabled for the cell.

<aside class="notice">The Smartsheet application only supports numeric values in the range -9007199254740992 to 9007199254740992. If using strict parsing, any numeric value outside that range will result in <a href="#errors">error code 1148</a>. If using lenient parsing, the value will be silently converted to text.</aside>

**PICKLIST**:

     |     |
-----|-----|
*Strict* | The value must be a string and must be one of the options for the Picklist.
*Lenient* | All numeric and text values are valid. Formatted numbers will be parsed like TEXT_NUMBER formatted numbers.

**DATE**:

     |     |
-----|-----|
*Strict* | The value must be a string value and a valid ISO 8601 date (YYYY-MM-DD).
*Lenient* | We will attempt to convert the string value to date using ISO 8601 date format, as well as several locale-specific date formats. If the value is a parsable date format, we will recognize the date and store it as such. All other values are simply text values.

<aside class="notice">You may use the query string parameter <b>numericDates</b> with a value of <code>true</code> to enable strict parsing of dates in numeric format.  See <a href="#dates-and-times">Dates and Times</a> for more information.</aside>

**CONTACT_LIST**:

     |     |
-----|-----|
*Strict* | The value must be a valid email address. If "displayValue" is set, we use that as the name, otherwise if we find a match among the the Access Token owner's contacts, we will associate this cell with that existing contact.
*Lenient* | If the value is a valid email address, we handle it the same way as Strict. If not, we save the value as a text value.

<aside class="notice">See <a href="#contact-list-columns">Contact List Columns</a> for more information.</aside>

**CHECKBOX**:

     |     |
-----|-----|
*Strict* | Only boolean values (true or false) are valid.
*Lenient* | Boolean values and string values of "true" and "false" are handled the same as Strict. All other values are saved as text values.

**DURATION**:

     |     |
-----|-----|
*Strict* | Only valid duration strings in the user's locale are valid.  Information on duration strings can be found in the [Help Center](<%= PROJECT_COLUMN_HELP_URL %>).
*Lenient* | Numeric values are treated as duration values in days.  String values which are valid duration strings in the user's locale are treated as durations, and any other values are treated as free-form text values.

<aside class="notice">You may use the query string parameter <b>projectParseLocale</b> with a <a href="#server-information">supported locale string</a> to force parsing in the specified locale (e.g. using <code>en_US</code> will let you send in English values regardless of the user's locale)</aside>

**PREDECESSOR**:

The Smartsheet API doesn't support parsing of predecessor strings, so strict and lenient parsing don't apply to predecessors.  Instead, you can set the **objectValue** attribute to a [PredecessorList object](#predecessorlist-object) containing
[Predecessor objects](#predecessor-object). To set a cell in a predecessor column to a non-predecessor string value, simply set **objectValue** to a string.

**ABSTRACT_DATETIME**:

     |     |
-----|-----|
*Strict* | The value must be a string value and a valid ISO 8601 date and time.
*Lenient* | We will attempt to convert the string value to date using ISO 8601 date format, as well as several locale-specific date formats. If the value is a parsable date format, we will recognize the date and store it as such. All other values are simply text values.

<aside class="notice">You may use the query string parameter <b>numericDates</b> with a value of <code>true</code> to enable strict parsing of dates in numeric format.  See <a href="#dates-and-times">Dates and Times</a> for more information.</aside>

#### Contact List Columns

With columns of type CONTACT_LIST, cells’ "value" and "displayValue" attributes are treated independently. 
The contact’s email address is represented by **value**, while the contact’s name (and the value displayed in the cell in the Smartsheet app) is represented by **displayValue**.
 
When creating or updating cells for a contact list column, the **displayValue** attribute works as follows:
<ul>
<li>If **displayValue** is non-null and non-empty, the Smartsheet cell will display the value provided.</li>
<li>If **displayValue** is an empty string, the Smartsheet cell will display the email address.</li>
<li>If **displayValue** is null or absent, Smartsheet will make a best guess effort at filling it in with a contact’s name based on the email address.</li>
</ul>

## Paging

The Smartsheet API contains a number of *index endpoints* (typically denoted in the documentation with titles beginning with "Get All..." or "List...") which return arrays of objects.
Examples include `GET` [/users](#list-users), [/sheets](#list-sheets), [/sheets/{sheetId}/columns](#get-all-columns), and many others.  These endpoints all support pagination, meaning
you can retrieve paged subsets of results, enabling you to process potentially large result sets in smaller chunks.

### Paging Query String Parameters
Index endpoints all support pagination via the following optional query string parameters:

     |     |     |
-----|-----|-----|
**pageSize** 	| number  | The maximum number of items to return per page.  Unless otherwise stated for a specific endpoint, defaults to **100** if not specified.
**page**		| number  | Which page to return.  Defaults to **1** if not specified.
**includeAll**  | boolean | If true, include all results (i.e. do not paginate).  Mutually exclusive with **pageSize** and **page** (they are ignored if **includeAll**=true is specified).

<aside class="notice">Most index endpoints default to a page size of 100 results.  If you need all results at once, you should specify the <code class="prettyprint">includeAll=true</code> query string parameter.</aside>

### Paged Responses

Index endpoints all return paged responses via an **IndexResult** object which provides paging metadata that can be used to navigate the full set of pages in the result set:

<%= partial "snippets/indexResult_object.md.erb" %>

## Bulk Operations

The Smartsheet API supports a number of bulk operations that can operate on multiple objects.  Unlike single-object operations, bulk operations allow you to create, update, or delete
mulitple objects in a single request, which we recommend as a [best practice](#api-best-practices) for optimal performance.

The following API operations currently allow you to do things in bulk:

* [Add Column(s)](#add-column(s))
* [Add Favorite(s)](#add-favorite(s))
* [Remove Favorite(s)](#remove-favorites-(in-bulk))
* [Add Group Member(s)](#add-group-member(s))
* [Add Row(s)](#add-row(s))
* [Copy Row(s) to Another Sheet](#copy-row(s)-to-another-sheet)
* [Delete Row(s)](#delete-row(s))
* [Move Row(s) to Another Sheet](#move-row(s)-to-another-sheet)
* [Send Row(s) via Email](#send-row(s))
* [Update Row(s)](#update-row(s))

### Optional Bulk Operations

Several endpoints support *optional* bulk `POST` operations which exist alongside the standard single-object `POST`.  For these endpoints, you may pass in either a single object, or an array of objects.
Depending on what was passed in, the [Result object](#result-object) returned will contain either a single object, or an array.  An example optional bulk operation is [POST /favorites](#add-favorite(s)): you can
pass in a single [Favorite object](#favorite-object) to create a single favorite, or an array of Favorite objects to create multiple favorites in a single request.  Endpoints which support bulk operations will be
noted as such in their API reference documentation.

**NOTE**: Several `POST` operations fail when attempting to create a single object which already exists (e.g. favorites, shares, group members).  However, for the corresponding bulk operations, these endpoints will *not*
return an error if one or more items in the array already exist.  Existing items will simply be ignored, and [Result object](#result-object) returned will omit them.

<aside class="notice">As we make future updates to the API, we may add bulk support to additional endpoints.  Because the endpoints will continue to support single-object semantics, this will not result in a breaking change, and existing code will continue to function.</aside>

### Partial Success

In general, the default behavior for bulk operations is to fail outright if any of the objects in the request are invalid for some reason.  If successful, all objects in the request will be created/updated/deleted;
if not, none of them will be.

However, there are some operations that support *partial success*, which means the operation will still succeed even if one or more of the objects in the request failed for some reason (e.g. an object is invalid).  Partial success is typically
*not* the default mode for an operation, and instead must be explicitly enabled by using a query string parameter.  This will be noted in the documentation for operations that support partial success.

<%= PARTIAL_SUCCESS %>

## Dates and Times

The Smartsheet API returns all dates and times in the [UTC](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) time zone, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) format.  If a date/time needs to be
displayed to an end-user in their local time zone, you will need to do the conversion using the user's time zone which you can obtain by [getting the current user](#get-current-user).

You can optionally choose to receive and input dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter **numericDates** with a value of `true`.
This flag works for any API request.

# Getting Started

## Developer Account

Developer accounts provide access to the full range of features and functionality available in production. 
They are easy to set up, will not expire, and will let you focus on your development without any risk to your production data.
 
To set up a Developer account, please visit the Smartsheet Developer Portal [registration page](http://www.smartsheet.com/developers/register). 
If you already have a paid Smartsheet account and your goal is to keep your development and production accounts separate, make sure to use a different email address when registering.
 
Please note that Developer accounts are intended for development and testing purposes only, and are subject to the [Smartsheet Developer Program Agreement](https://www.smartsheet.com/files/SmartsheetDeveloperProgramAgreement20150630.pdf).

## SDKs and Sample Code

Smartsheet SDKs (client libraries) are available in a variety of languages. 
For the complete list, see our [SDK page](http://www.smartsheet.com/developers/sdks). 
Submit your vote for additional language coverage by emailing us at <a href="mailto:api@smartsheet.com">api@smartsheet.com</a>.

This API documentation currently contains sample code in the following languages: 
<ul>
<li>cURL</li>
<li>C#</li>
<li>Java</li>
<li>Node.js</li>
<li>Python</li>
</ul>

For each operation, you'll see sample code displayed in the dark blue panel next to the operation. 
To view the sample code in a specific language, select the corresponding language tab along the top of the dark blue panel. 
Each [C#](#c#-sample-code), [Java](#java-sample-code), and [Node.js](#node.js-sample-code) code sample demonstrates how to execute an operation using the corresponding [Smartsheet SDK](http://www.smartsheet.com/developers/sdks). 
See the corresponding section below for more information about using the sample code in a specific language.

### cURL Sample Code

```shell
# For cURL code samples, see each operation in the API REFERENCE section.
```

The cURL code samples included in this API documentation demonstrate how to execute operations using the command line data transfer tool [cURL](http://en.wikipedia.org/wiki/CURL). 

### C# Sample Code

```csharp
using Smartsheet.Api;
using Smartsheet.Api.Models;
using Smartsheet.Api.OAuth;

// Set the Access Token.
Token token = new Token();
token.AccessToken = "INSERT_YOUR_TOKEN_HERE";

// Use the Smartsheet Builder to create an instance of SmartsheetClient.
SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(token.AccessToken).Build();

// Get current user.
smartsheet.UserResources.GetCurrentUser();

// Get server info.
smartsheet.ServerInfoResources.GetServerInfo();

// For additional C# code samples, see each operation in the API REFERENCE section.
```

The C# code samples included in this API documentation demonstrate how to execute operations using the [Smartsheet C# SDK](https://github.com/smartsheet-platform/smartsheet-csharp-sdk). 
To use the C# SDK, you'll need to include the appropriate **using** directives in your code. For example:

<code>
using Smartsheet.Api;<br/>
using Smartsheet.Api.Models;<br/>
using Smartsheet.Api.OAuth;<br/>
</code>

Each code sample uses a **SmartsheetClient** object called "smartsheet" that can be created as follows:

<code>
// Set the Access Token<br/>
Token token = new Token();<br/>
token.AccessToken = "INSERT_YOUR_TOKEN_HERE";<br/>
</code>

<code>
// Use the Smartsheet Builder to create an instance of SmartsheetClient<br/>
SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(token.AccessToken).Build();
</code>

For operations that support querystring parameters, the C# code sample often contains multiple example requests, each one showing a different combination of querystring parameters. 
The code samples are intended for example purposes only and should not be considered to cover all possible combinations of querystring parameters. 

Within the C# code samples, the **...Id** naming convention is used to denote an object ID that will need to be replaced with an actual object ID, should you use the code in your application.
For example, in the following code example, **sheetId** should be replaced with the actual ID of the Sheet and **rowId** should be replaced with the actual ID of the Row:  

<code>smartsheet.SheetResources.RowResources.DiscussionResources.CreateDiscussion(sheetId, rowId, discussion);</code>

### Java Sample Code

```java
import com.smartsheet.api.*;
import com.smartsheet.api.models.*;
import com.smartsheet.api.models.enums.*;
import com.smartsheet.api.oauth.*;

// Set the Access Token.
Token token = new Token();
token.setAccessToken("INSERT_YOUR_TOKEN_HERE");

// Use the Smartsheet Builder to create an instance of Smartsheet.
Smartsheet smartsheet = new SmartsheetBuilder().setAccessToken(token.getAccessToken()).build();

// Get current user.
smartsheet.userResources().getCurrentUser();

// Get server info.
smartsheet.serverInfoResources().getServerInfo();

// For additional Java code samples, see each operation in the API REFERENCE section.
```

The Java code samples included in this API documentation demonstrate how to execute operations using the [Smartsheet Java SDK](https://github.com/smartsheet-platform/smartsheet-java-sdk). 
To use the Java SDK, you'll need to include the appropriate **import** directives in your code. For example:

<code>
import com.smartsheet.api.&#42;;<br/>
import com.smartsheet.api.models.&#42;;<br/>
import com.smartsheet.api.models.enums.&#42;;<br/>
import com.smartsheet.api.oauth.&#42;;<br/>
</code>

Each code sample uses a **Smartsheet** object called "smartsheet" that can be created as follows:

<code>
// Set the Access Token<br/>
Token token = new Token();<br/>
token.setAccessToken("INSERT_YOUR_TOKEN_HERE");<br/>
</code>

<code>
// Use the Smartsheet Builder to create an instance of Smartsheet<br/>
Smartsheet smartsheet = new SmartsheetBuilder().setAccessToken(token.getAccessToken()).build();<br/>
</code>

For operations that support querystring parameters, the Java code sample often contains multiple example requests, each one showing a different combination of querystring parameters. 
The code samples are intended for example purposes only and should not be considered to cover all possible combinations of querystring parameters. 

Within the Java code samples, the **...Id** naming convention is used to denote an object ID that will need to be replaced with an actual object ID, should you use the code in your application.
For example, in the following code example, **sheetId** should be replaced with the actual ID of the Sheet and **rowId** should be replaced with the actual ID of the Row:  

<code>smartsheet.sheetResources().rowResources().discussionResources().createDiscussion(sheetId, rowId, discussion);</code>

### Node.js Sample Code

```javascript
var client = require('smartsheet');
var smartsheet = client.createClient({accessToken:'INSERT_YOUR_TOKEN_HERE'});

// Get current user.
smartsheet.users.getCurrentUser()
    .then(function(data) {
        console.log(data);
    })
    .catch(function(error) {
        console.log(error);
    });

// Get server info.
smartsheet.server.getInfo()
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });

// For additional Node.js code samples, see each operation in the API REFERENCE section.
```

The Node.js code samples included in this API documentation demonstrate how to execute operations using the [Smartsheet JavaScript SDK](https://github.com/smartsheet-platform/smartsheet-javascript-sdk), with promises. 
Each code sample uses a root module called "smartsheet" that can be created as follows:

<code>
var client = require('smartsheet');<br/>
var smartsheet = client.createClient({accessToken:'INSERT_YOUR_TOKEN_HERE'});
</code>

Once you've created the **smartsheet** variable, you can use it to execute API operations. 
For example, the following code example shows how to execute the [Get Current User](#get-current-user) operation.

<code>
smartsheet.users.getCurrentUser()<br/>
&#160;&#160;.then(function(data) {<br/>
&#160;&#160;&#160;&#160;console.log(data);<br/>
&#160;&#160;})<br/>
&#160;&#160;.catch(function(error) {<br/>
&#160;&#160;&#160;&#160;console.log(error);<br/>
&#160;&#160;});<br/>
</code>

For more information about using the [Smartsheet JavaScript SDK](https://github.com/smartsheet-platform/smartsheet-javascript-sdk), including examples of using callbacks (instead of promises), see the [SDK Readme](https://github.com/smartsheet-platform/smartsheet-javascript-sdk).

### Python Sample Code

```python
import smartsheet
smartsheet = smartsheet.Smartsheet()

# Get Current User
me = smartsheet.Users.get_current_user()
print(me)

# Get server info.
info = smartsheet.Server.server_info()

# For additional Python code samples, see each operation in the API REFERENCE section.
```

The Python samples included in this API documentation demonstrate how to execute operations using the [Smartsheet Python SDK](https://github.com/smartsheet-platform/smartsheet-python-sdk). 
To use the Python SDK, you'll first need to include the appropriate **import** directive in your code: 

<code>import smartsheet</code>

Next, create the base client object that will be used to execute API requests via the SDK:

<code>smartsheet = smartsheet.Smartsheet()<br/></code>

<aside class="notice">The snippet above assumes that your Smartsheet API Access Token has been set as an environment variable named <b>SMARTSHEET_ACCESS_TOKEN</b>. If you prefer, you may alternatively pass your Smartsheet Access Token to the instantiation of the Smartsheet object like this: <code>smartsheet = smartsheet.Smartsheet('INSERT_YOUR_TOKEN_HERE')</code></aside>

Once you've created the **smartsheet** object, you can use it to execute API operations. For example, the following example shows how to execute the [Get Current User](#get-current-user) operation.

<code>
me = smartsheet.Users.get_current_user()<br/>
print(me)<br/>
</code>

Within the Python code samples, the **...Id** naming convention is used to denote an object ID that will need to be replaced with an actual object ID, should you use the code in your application.
For example, in the following code example, **sheetId** should be replaced with the actual ID of the Sheet and **rowId** should be replaced with the actual ID of the Row:

<code>smartsheet.Discussions.create_discussion_on_row(<br/>
&#160;&#160;&#160;&#160;sheetId,<br/>
&#160;&#160;&#160;&#160;rowId,<br/>
&#160;&#160;&#160;&#160;smartsheet.models.Discussion({<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'title': 'Expense Reimbursement',<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'comment': smartsheet.models.Comment({<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'text': 'Expenses greater than $500 require manager approval.'<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;})<br/>
&#160;&#160;&#160;&#160;})<br/>
)</code>

## Direct API Access

Smartsheet makes it easy to directly access your data via the API. 
The first step is to generate an Access Token via the Smartsheet UI. 
Users can generate and have more than one active token at any time. 
Access Tokens generated in Smartsheet UI are long lived, meaning they won’t expire for 10 years. 
They are best used in system-level integrations, such as applications designed to keep Smartsheet and other systems in sync, or to integrate with Zapier, ifttt or similar API integration services.

### Generating Access Token

These instructions assume that you already have an existing Smartsheet account. Follow these steps to generate an Access Token:
<ol>
<li>Click the **Account** button in the upper-left corner of your Smartsheet screen and select **Personal Settings**.  This will open the Personal Settings form.</li>
<li>Click the **API Access** button to open the API Access form.
<li>Use the API Access form to generate new or manage existing acces tokens.
</ol>
 
Because you can generate and have more than one active token at any time, you have the ability to implement a granular security policy by designating a separate token for each application or integration scenario you may have. 
That way, should any one token become compromised, you can easily revoke it without impacting any of your other API-enabled applications.
 
<aside class="notice">You will have only one opportunity to view and copy your newly generated token. For security reasons, you will not be able to retrieve it at a later time. If you lose your token, however, it is easy to use the UI to revoke it and generate a new one.</aside>
 
<aside class="success">Access Tokens are essentially passwords and grant the holder access to all of your Smartsheet data. It is imperative that you keep them secure.</aside>

### Using Access Tokens

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/me \
`-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set the access token.
var client = require('smartsheet');
var smartsheet = client.createClient({accessToken:'INSERT_YOUR_TOKEN_HERE'});

// Get current user.
smartsheet.users.getCurrentUser()
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
    	console.log(error);
  	});
```

```csharp
// Set the access token.
Token token = new Token();
token.AccessToken = "INSERT_YOUR_TOKEN_HERE";
SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(token.AccessToken).Build();

// Get current user.
smartsheet.UserResources.GetCurrentUser();
```

```java
// Set the access token.
Token token = new Token();
token.setAccessToken("INSERT_YOUR_TOKEN_HERE");
Smartsheet smartsheet = new SmartsheetBuilder().setAccessToken(token.getAccessToken()).build();

// Get current user.
smartsheet.userResources().getCurrentUser();
```

```python
# Create base client object and set the access token.
smartsheet = smartsheet.Smartsheet('INSERT_YOUR_TOKEN_HERE')

# Get current user.
smartsheet.Users.get_current_user()
```

> Example Response:

```json
{
    "email": "john.doe@smartsheet.com",
    "firstName": "John",
    "lastName": "Doe",
    "id": 48569348493401200
}
```

Once you have an Access Token, include it in the **Authorization** header for every request you make:

`Authorization: Bearer 0da6cf0d848266b4cd32a6151b1`

The header name is <b>Authorization</b> and the value of the header is <b>Bearer ACCESS_TOKEN</b>, where ACCESS_TOKEN is a token generated by you. Since the access token is being transmitted in clear text, all API calls are done over HTTPS.

## Third Party App Development

In addition to being a powerful work management tool, Smartsheet is a powerful application platform. 
We are committed to making it easy to build applications on top of Smartsheet - whether you are developing a solution for your organization or creating an app for the Smartsheet customer community at large. 
We are here to support you and would love your feedback on how to improve the API and the developer experience.
 
As a developer, you may be building applications that allow any Smartsheet user to access his or her Smartsheet data. 
Doing so requires that you complete the following steps.

1. [Complete your Developer Profile](#developer-registration) 
2. [Register your App](#registering-your-app)
3. Within your app, [implement a 3-legged OAuth flow](#oauth-flow) to obtain an access token that can be used to access Smartsheet data on behalf of an end user. 
 
### Developer Registration

Third party app registration and management is available via the Developer Tools. 
To get access to Developer Tools, you must first [register](http://www.smartsheet.com/developers/register) as a Smartsheet developer. 
Follow the instructions on the registration form to add Developer Tools to an existing Smartsheet account or create a new Smartsheet developer account.
 
Once you complete the developer registration, log in to Smartsheet to access Developer Tools.  
<ol>
<li>Click the **Account** button in the upper-left corner of your Smartsheet screen.</li>
<li>Now that you are registered as a Smartsheet developer, you should see a new **Developer Tools** option in the dropdown menu. Select it to open Developer Tools.</li>
<li>Before you can register your first app, you will need to complete your developer profile. Developer profile is a public profile that anyone can access to learn more about you and your applications.</li>
<li>Once your developer profile is complete, you will be able to use **Developer Tools** to register and manage your apps.</li>
</ol>

### Registering Your App

To build a third party app, you must first register it with Smartsheet using Developer Tools:
<ol>
<li>Login to Smartsheet.</li>
<li>Click the **Account** button in the upper-left corner of your Smartsheet screen and select **Developer Tools**.</li>
<li>Create new app and provide the required information, including name, description, contact info and a redirect URL. Redirect URL (also known as the "callback URL") is the URL in your app where Smartsheet must redirect after authentication is complete.</li>
<li>Use the generated app **client id** and **secret** to connect your app to Smartsheet. See [OAuth Flow](#oauth-flow) for details on how to use **client id** and **secret** to do that.</li>
</ol>

### Access Scopes

In order to access an end user's Smartsheet data, your application must explicitly ask for specific Access Scopes. 
The Access Scopes enable your app to communicate to the end users what type of operations it will be performing. 
Access Scopes do not override existing Access Level restrictions. 
For example, having the Access Scope of WRITE_SHEETS will not allow your app to update a sheet on which the end user has read-only permission.
 
The Access Scopes are as follows:

     |     |
-----|-----|
READ_SHEETS | Read all sheet data, including comments, attachments and cell data
WRITE_SHEETS | Insert and modify sheet data, including comments, attachments and cell data
SHARE_SHEETS | Share sheets, including sending sheets as attachments
DELETE_SHEETS | Delete sheets
CREATE_SHEETS | Create new sheets
CREATE_SIGHTS | Create new sights
READ_SIGHTS | Read all sight data
DELETE_SIGHTS | Delete sight
SHARE_SIGHTS | Share sight
READ_USERS | Retrieve users and groups for your Smartsheet organization
READ_CONTACTS | Retrieve contacts
ADMIN_USERS | Add and remove users from your Smartsheet organization; create groups and manage membership
ADMIN_SHEETS | Modify sheet structure, including column definition, publish state, etc.
ADMIN_SIGHTS | Modify sight structure
ADMIN_WORKSPACES | Create and manage workspaces and folders, including sharing



 
<aside class="notice"><b>Additional Info:</b><ul><li>User-generated Access Tokens are granted all of these permissions.</li><li>Third-party apps must request at least one access scope, but should only request the scopes necessary.</li><li>Once a third-party app attains a valid access token, it will be able to execute <a href="#get-current-user">Get Current User</a> operation, regardless of which access scopes were requested.</li></ul></aside>

### OAuth Flow

Your app must implement a 3-legged OAuth flow to retrieve an access token that can be used to access Smartsheet data on behalf of an end user. 
This process involves the following steps:

1. [Request authorization from the user](#requesting-authorization-from-the-user)
2. [Obtain the authorization code](#obtaining-the-authorization-code)
3. [Use the authorization code to obtain an access token](#obtaining-an-access-token)
4. [Refresh the access token](#refreshing-an-access-token) (as necessary)

#### Requesting authorization from the user

To request authorization from an end user, direct your user to `https://app.smartsheet.com/b/authorize` with the following parameters through either a `GET` or `POST`. The parameter values must be URL-encoded:

     |     |
-----|-----|
response_type<br/>(required) | must be set to "code"
client_id<br/>(required) | client id for your app
redirect_uri<br/>(optional) | redirect URL you [registered](#registering-your-app) for your app (including protocol, e.g. "http://"); if not provided, the redirect URL set during registration is used
scope<br/>(required) | space-delimited list of [access scopes](#access-scopes) to which you are asking the user to grant access (note the spaces must be URL-encoded as "%20")
state | arbitrary string that will be returned to your app; intended to be used by you to ensure that this redirect is indeed from an OAuth flow that you initiated

Here is an example of a URL to which you would send your user as a `GET` request:
 
`https://app.smartsheet.com/b/authorize?response_type=code&client_id=dheu3dmkd32fhxme&scope=READ_SHEETS%20WRITE_SHEETS&state=MY_STATE`
 
If your user has not logged in to Smartsheet, he/she will first be directed to the Smartsheet login page. 
After a successful login, your user will be prompted to allow or deny the access scopes you requested.

#### Obtaining the authorization code

If the user clicks "Allow", he/she will be redirected to the **redirect_uri** with the following parameters:

     |     |
-----|-----|
code | authorization code required to obtain access token
expires_in | number of seconds code is valid once issued; this is always 4 minutes - you must obtain an access token within that time
state | **state** string specified earlier

If the user clicks "Deny", he/she will be redirected to the **redirect_uri** with the following parameters:

     |     |
-----|-----|
error | "access_denied"
state | **state** string specified earlier

Other errors that may be returned include:

     |     |
-----|-----|
unsupported_response_type | response_type must be set to "code"
invalid_scope | one or more of the requested access scopes are invalid. Please check the list of access scopes

#### Obtaining an access token

> Request an access token:

```shell
curl https://api.smartsheet.com/2.0/token \
-d 'grant_type=authorization_code&code={your_code}&client_id={your_client_id}&redirect_uri={redirect_uri}&hash={SHA_256(app_secret|code)}' \
-X POST
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Successful Response:

```json
{
   "access_token": "Access Token Value",
   "token_type": "bearer",
   "refresh_token": "Refresh Token Value",
   "expires_in": "# of seconds before token expires"
}
```

> Error Response:

```json
{
   "errorCode": "Smartsheet error number",
   "error": "OAuth error type",
   "error_description": "Error description"
}
```

Once you’ve successfully obtained an authorization code, the next step is to obtain an access token. 
To do so, you’ll need to make a `POST` request to `https://api.smartsheet.com/2.0/token` with the following parameters:

     |     |
-----|-----|
grant_type<br/>(required) | must be set to "authorization_code"
client_id<br/>(required) | client id for your app
code<br/>(required) | authorization code returned in the [previous step](#obtaining-the-authorization-code)
redirect_uri<br/>(optional) | redirect URL [registered](#registering-your-app) for your app, including the protocol (e.g., "http://"); if not provided, the redirect URL set during registration is used
hash<br/>(required) | SHA-256 hash of your App secret concatenated with a pipe and the authorization code.  The app_secret is never sent with the request.

<aside class="notice">The "Get Token" request must have the <b>Content-Type</b> header set to 'application/x-www-form-urlencoded'.</aside>

Possible OAuth error types:

     |     |
-----|-----|
invalid_request | The request parameters are invalid or missing.
invalid_client | The client information is invalid. Ensure your client id is correct.
invalid_grant | The authorization code or refresh token is invalid or expired, the redirect_uri does not match, or the hash value does not match the App secret and/or code.
unsupported_grant_type | grant_type must equal "authorization_code" or "refresh_token".

#### Refreshing an access token

> Refresh an access token:

```shell
curl https://api.smartsheet.com/2.0/token \
-d 'grant_type=refresh_token&refresh_token={your_refresh_token}&client_id={your_client_id}&redirect_uri={redirect_uri}&hash={SHA_256(app_secret|refresh_token)}' \
-X POST
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Successful Response:

```json
{
   "access_token": "Newly refreshed Access Token",
   "expires_in": "# of seconds before token expires",
   "token_type": "bearer",
   "refresh_token": "New refresh token"
}
```

An access token is valid for one week but you can use the refresh token to obtain a new access token. 
Once you obtain the new access token, you can use it in place of the old one, which is no longer valid.
 
To do so, you’ll need to make a `POST` request to `https://api.smartsheet.com/2.0/token` with the following parameters:

     |     |
-----|-----|
grant_type<br/>(required)| must be set to "refresh_token"
client_id<br/>(required)| client id for your app
refresh_token<br/>(required)| refresh_token value that came with the access token
redirect_uri<br/>(optional)| redirect URL [registered](#registering-your-app) for your app, including the protocol (e.g., "http://")
hash<br/>(required)| SHA-256 hash of your App secret concatenated with a pipe and the refresh token value

<aside class="notice">The "Refresh Token" request must have the <b>Content-Type</b> header set to 'application/x-www-form-urlencoded'.</aside>

##### Getting basic user info
Once you have obtained an access token on behalf of the user, you can fetch basic information (including user ID, name, etc.) about the caller using the [Get Current User](#get-current-user) operation.

# Admin Features

Smartsheet users with System Admin rights have access to additional API features, including user management and ability to access any sheet in the organization.

## Manage Users

As an org Administrator, you can provision, de-provision and otherwise manage users in your Smartsheet organization.  See [Users](#users) for more information on relevant API calls.

## Assume-User

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/me \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Assume-User: john.doe%40smartsheet.com" 
```

```javascript
// [todo]
```

```csharp
// Create the 'smartsheet' object and set the 'Assume-User' header value to "john.doe@smartsheet.com".
SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(token.AccessToken).SetAssumedUser("john.doe@smartsheet.com").Build();

// Get current user (call gets executed as "john.doe@smartsheet.com").
UserProfile userProfile = smartsheet.UserResources.GetCurrentUser();
```

```java
// Create the 'smartsheet' object and set the 'Assume-User' header value to "john.doe@smartsheet.com".
Smartsheet smartsheet = new SmartsheetBuilder().setAccessToken(accessToken).setAssumedUser("john.doe@smartsheet.com").build();

// Get current user (call gets executed as "john.doe@smartsheet.com").
UserProfile user= smartsheet.userResources().getCurrentUser();
```

```python
# Create the 'smartsheet' object and run the assume_user method.
smartsheet = smartsheet.Smartsheet()
smartsheet.assume_user('john.doe@smartsheet.com')

# Get the current user (call executed as "john.doe@smartsheet.com").
user = smartsheet.Users.get_current_user()

# Reset the 'smartsheet' object so no Assume-User header is used in further requests.
smartsheet.assume_user()
```

> Example Response:

```json
{
    "email": "john.doe@smartsheet.com",
    "firstName": "John",
    "lastName": "Doe",
    "id": 48569348493401200
}
```

As an org Administrator, you can assume the identity of any user in your organization. 
This advanced feature enables a number of useful business scenarios, such as executing an organization-wide backup or maintaining data attribution when integrating with another system.
 
Here is how it works. 
Simply add an **Assume-User** header to your call, with the URI-encoded email address of the user whose identity you want to assume as the value. 
For example, if you want to assume the identity of **john.doe@smartsheet.com** and john.doe@smartsheet.com is a confirmed member of your Smartsheet organization, you would add the following header:

`Assume-User: john.doe%40smartsheet.com`

You can then act on behalf of the user and make API calls as though you were that user.

## Maintain Data Attribution

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId}/comments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Assume-User: john.doe%40smartsheet.com" \
-H "Content-Type: application/json" \
-X POST \
-d '{"text":"This is a new comment."}'
```

```javascript
// [todo]
```

```csharp
// Create the 'smartsheet' object and set the 'Assume-User' header value to "john.doe@smartsheet.com".
SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(token.AccessToken).SetAssumedUser("john.doe@smartsheet.com").Build();

// Create comment.
Comment comment = new Comment.AddCommentBuilder("This is a new comment.").Build();

// Add comment to discussion (call gets executed as "john.doe@smartsheet.com").
smartsheet.SheetResources.DiscussionResources.CommentResources.AddComment(sheetId, discussionId, comment);
```

```java
// Create the 'smartsheet' object and set the 'Assume-User' header value to "john.doe@smartsheet.com".
Smartsheet smartsheet = new SmartsheetBuilder().setAccessToken(accessToken).setAssumedUser("john.doe@smartsheet.com").build();

// Create comment.
Comment comment = new Comment.AddCommentBuilder().setText("This is a new comment.").build();

// Add comment to discussion (call gets executed as "john.doe@smartsheet.com").
smartsheet.sheetResources().discussionResources().commentResources().addComment(sheetId, discussionId, comment);
```

```python
# Create the 'smartsheet' object and run the assume_user method.
smartsheet = smartsheet.Smartsheet()
smartsheet.assume_user('john.doe@smartsheet.com')

# Create comment.
comment = smartsheet.models.Comment({
    'text': 'Expense reports require manager approval.'
})

# Add comment to discussion (call executed as "john.doe@smartsheet.com").
smartsheet.Discussions.add_comment_to_discussion(sheetId, discussionId, comment)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "createdAt": "2013-02-28T22:58:30-08:00",
        "createdBy": {
            "email": "john.doe@smartsheet.com",
            "name": "John Doe"
        },
        "id": 6834973207488388,
        "modifiedAt": "2013-02-28T22:58:30-08:00",
        "text": "This is a new comment."
    },
    "resultCode": 0
}
```

If you are integrating Smartsheet with another API-enabled system, such as Salesforce, it may be useful to maintain attribution when adding data to Smartsheet. 
For example, let's say you want to add a new row to a Sales Pipeline sheet in Smartsheet whenever your sales team updates a sales pipeline in Salesforce. 
So, if Bob Johnson makes a change in Salesforce, wouldn't it be great to make the new row show up in Smartsheet as if it were created by Bob? 
Specifying the **Assume-User** header API requests allows org Administrators to develop integrations which do just that.
 
## List All Sheets

As an org Administrator, you can get a list of all sheets in your organization, regardless of ownership or whether or not the sheets have been shared to you. 
Please see [List All Org Sheets](#list-all-org-sheets) for more information.

## Backup All Org Data

> Get list of all sheets in the org:

```shell
curl https://api.smartsheet.com/2.0/users/sheets \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
smartsheet.sheets.listOrganizationSheets()
	.then(function(data) {
		console.log(data)
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// List all org sheets.
smartsheet.UserResources.SheetResources.ListSheets();
```

```java
// List all org sheets.
smartsheet.userResources().listOrgSheets();
```

```python
action = smartsheet.Sheets.list_org_sheets()
sheets = action.result
```

> Fetch each sheet (using Assume-User):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}?include=discussions,attachments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Assume-User: OWNER_EMAIL"
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
dl_path = 'backup'
for org_sheet in sheets:
    smartsheet.assume_user(org_sheet.owner)
    sheet = smartsheet.Sheets.get_sheet(
        org_sheet.id,
        include='discussions,attachments'
    )
```

> Fetch each attachment:

```shell
curl -0 URL_TO_ATTACHMENT
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
for attachment in sheet.attachments:
	attachment_obj = smartsheet.Attachments.get_attachment(sheet.id, attachment.id)
	result = smartsheet.Attachments.download_attachment(attachment_obj, dl_path)
	if result.message == 'SUCCESS':
		print(result.filename + ' downloaded')
```

To backup all of the org data, follow these steps:
<ol>
<li>Get a list of all sheets in your organization.</li>
<li>For each sheet in the list, fetch the sheet (optionally including a list of discussions and attachments) by assuming the identity of the owner of the sheet. (The value of the **Assume-User** header must be the URI-encoded email address of the sheet owner.)</li>
<li>To backup all files attached to each sheet, fetch them one at a time, using your favorite download method. See [Get Attachment](#get-attachment) for more information.
</ol>

You can use the sheet version number to enable incremental backups. [Fetch the sheet version number](#get-sheet-version) and compare it to the last backed up version number (you will need to store the sheet ID and the last backup up version number) - if they are the same, no need to include the sheet in your incremental backup run.

> Backup Script

```shell
mkdir backup
curl https://api.smartsheet.com/2.0/users/sheets \
-H "Authorization: Bearer ACCESS_TOKEN"
...
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
import smartsheet
import os

os.mkdir('backup')
os.chdir('backup')

smartsheet = smartsheet.Smartsheet()

action = smartsheet.Sheets.list_org_sheets()
sheets = action.result

for org_sheet in sheets:
    os.mkdir(str(org_sheet.id))
    dl_path = os.path.realpath(str(org_sheet.id))
    
    smartsheet.assume_user(org_sheet.owner)
    sheet = smartsheet.Sheets.get_sheet(
        org_sheet.id,
        include='discussions,attachments'
    )
    
    # download all attachments
    for attachment in sheet.attachments:
        attachment_obj = smartsheet.Attachments.get_attachment(sheet.id, attachment.id)
        result = smartsheet.Attachments.download_attachment(attachment_obj, dl_path)
        if result.message == 'SUCCESS':
            print(result.filename + ' downloaded')
            
    # download sheet itself
    smartsheet.Sheets.get_sheet_as_csv(org_sheet.id, dl_path)

```

# API Change Log

This section documents the evolution of Smartsheet API 2.0 over time. 
To stay informed about changes to the API, we recommend that you periodically review this list for new information, subscribe to our Developer Newsletter (using the *Get Developer Updates* form on the [Smartsheet Developer Portal](http://www.smartsheet.com/developers)) or follow us via [Twitter](https://twitter.com/smartsheetapi).

## March 11, 2016

Backward-compatible updates to Smartsheet API 2.0. 

* API enhancements that enable you to attach a link to a file in OneDrive.

* API enhancements that enable you to differentially share individual items within a workspace and to identify the scope of each [Share](#share-object) for any shared item.

* API enhancements that provide additional information about published sheets and reports and allow you to more tightly control who can access a published sheet or report.

* API support for [Sights](#sights).

* Added createdAt and modifiedAt to the [Share object](#share-object).

For more detailed information about this release, see the [release notes](https://www.smartsheet.com/developers/blog).

## January 15, 2016

Backward-compatible updates to Smartsheet API 2.0. 

* New endpoints for [adding an image to a cell](#add-image-to-cell) within a sheet and [getting URLs](#get-image-urls) for images that are stored in sheet cells.

* API enhancements that add support for enabling [partial success](#partial-success) of a (bulk) [Add Row(s)](#add-row(s)) or [Update Row(s)](#update-row(s)) operation, provide additional information for each object in [List Public Templates](#list-public-templates) response, and return a new [user setting](#sheetusersettings-object) for sheets where Calendar View has been configured.

* Errors: Several new [error codes](#error-handling) and a new (alternate) message for error code 4004.

* Bug fix: Operations that contain [Column](#column-object) objects in the response will now include **tags** CALENDAR_START_DATE and CALENDAR_END_DATE if the Sheet's Calendar View has been configured, even if Gantt is disabled for the sheet.

For more detailed information about this release, see the [release notes](https://www.smartsheet.com/blog/january-2016-api-update).

## December 11, 2015

Backward-compatible updates to Smartsheet API 2.0. 

* New endpoints for [Report publishing](#publish-report) and for managing a User's [alternate email address(es)](#alternate-email-address(es)).

* API enhancements that enable you to skip remapping of Sheet hyperlinks when copying a [Folder](#copy-folder) or a [Workspace](#copy-workspace), include **Row.createdBy** and **Row.modifiedBy** in the [Get Sheet](#get-sheet) or [Get Row](#get-row) API response, and get more detailed error information when either [Add Row(s)](#add-row(s)) or [Update Row(s)](#update-row(s)) fails.

For more detailed information about this release, see the [release notes](https://www.smartsheet.com/blog/december-2015-api-update).

## September 18, 2015

Backward-compatible updates to Smartsheet API 2.0.

 * New [error code](#errors) to indicate that the request should be retried: Smartsheet error code 4004 (HTTP Response code 500).

## August 14, 2015

Backward-compatible updates to Smartsheet API 2.0. 

* New endpoints for accessing Contacts, copy/move Folder/Sheet, copy Workspace, bulk Row delete, bulk Send Rows, Send Update Request.

* API enhancements that enable you to attach a link to a file in Egnyte, lock and unlock Rows/Columns, get more information about Sheets/Reports/Users, choose Columns to include when sending Rows via email, send a Gantt view of a Sheet via email (in PDF format), create Discussion on Row using a multipart upload, include everything when copying a Row from one sheet to another, and retrieve a permalink for a Row.

* New access scope for retrieving Contacts.

* Deprecations: **Delete (single) Row** endpoint, **Send (single) Row** endpoint, **fromId** attribute and **include** parameter on the **Create Sheet/Folder/Workspace** endpoints. 

* Bug fixes: **Add Column(s)** operation now returns correct Ids for new columns; **Revoke Token** operation no longer returns error code 1004 "not authorized".

For more detailed information about this release, see the [release notes](https://www.smartsheet.com/blog/august-2015-api-update).

## July 11, 2015

Initial release of Smartsheet API 2.0. 
For detailed information about API 2.0 features and guidance for migrating from API 1.1 to API 2.0, see the [release notes](https://www.smartsheet.com/blog/july-2015-api-v2-launch).

# <span class="customTOCSectionHeading">API Reference</span>

# Attachments

Attachments can exist on a [Comment](#comments) (i.e., within a Discussion), on a [Row](#rows), or on a [Sheet](#sheets).

## <%= OBJECTS %>

### Attachment Object

     |     |     |
-----|-----|-----|
**id** | number | Attachment ID
**name** | string | Attachment name
**url** | string | Attachment temporary URL (files only)
**urlExpiresInMillis** | number | Attachment temporary URL time to live (files only) 
**attachmentType** | string | Attachment type (one of FILE, GOOGLE_DRIVE, LINK, BOX_COM, DROPBOX, EVERNOTE, EGNYTE, ONEDRIVE)
**attachmentSubType** | string | Attachment sub type, valid only for either GOOGLE_DRIVE attachments or EGNYTE attachments:<ul><li>possible values for GOOGLE_DRIVE attachments: DOCUMENT, SPREADSHEET, PRESENTATION, PDF, DRAWING</li><li>possible values for EGNYTE attachments: FOLDER</li></ul>
**createdAt** | timestamp | A timestamp of when the attachment was originally added
**createdBy** | [User](#user-object) | User object containing name and email of the creator of this attachment
**mimeType** | string | Attachment MIME type (PNG, etc.)
**parentType** | string | The type of object the attachment belongs to. One of "SHEET", "ROW", or "COMMENT"
**parentId** | number | The id of the parent 
**sizeInKb** | number | The size of the file, if the attachmentType is FILE  

## Posting an Attachment

Like the Smartsheet web application, the Smartsheet API allows uploading files to Sheets, Rows and Comments. 
You can upload a file by performing either a *simple upload* or a *multipart upload*. 

A [simple upload](#simple-uploads) allows you to add a single file attachment to the specified object. 
For example, you can perform a simple upload to upload a file to a [sheet](#attach-file-to-sheet), [row](#attach-file-to-row), or [comment](#attach-file-to-comment). 

A [multipart upload](#multipart-uploads) allows you to add a single file attachment to the specified object (i.e., attach a file to a [sheet](#attach-file-to-sheet), [row](#attach-file-to-row), or [comment](#attach-file-to-comment)), or to create an object and attach a file using a single request. 
For example, you can perform a multipart upload to [create a new Comment](#add-comment) that contains a single file attachment or to [add a new Discussion to a Sheet](#create-discussion-on-sheet) that contains a single file attachment.

<aside class="notice">Important Notes:<ul><li>Max file size for uploads through the API is currently limited to 30mb.</li><li>Posting an attachment is a resource-intensive operation and incurs 10 additional requests against the rate limit.</li></ul></aside>

### Multipart Uploads

A multipart upload request allows you to add a single file attachment to the specified object (i.e., attach a file to a [sheet](#attach-file-to-sheet), [row](#attach-file-to-row), or [comment](#attach-file-to-comment)), or to create an object and upload a file using a single request. 
For example, you can perform a multipart upload to [create a new Comment](#add-comment) that contains a single file attachment or to [add a new Discussion to a Sheet](#create-discussion-on-sheet) that contains a single file attachment.

<aside class="notice">Most programming languages have libraries that can be used to assemble multipart requests.</aside>

A multipart upload request must include the following HTTP headers:

     |     |
-----|-----|
**Content-Type** | Must be set to `multipart/form-data`, and include the boundary string that will separate the parts in the request payload.
**Content-Length** | The length of the request payload.

The request body of a multipart upload request contains one or more *parts*, each part containing either JSON or a file to upload. 
The request body must contain at least one part. 
Each part must start with the boundary string specified in the **Content-Type** request header, and must contain the following part headers:

     |     |
-----|-----|
**Content-Disposition** | Contains the following semicolon-delimited items:<ul><li>`form-data`</li><li>`name=`"*partname*"</li><li>`filename=`"*filename*" (only required for file parts)</li></ul><b><i>Note</i></b>: Values specified in the Content-Disposition header must be URL-encoded.
**Content-Type** | The content type of the part: `application/json` for JSON objects, or the applicable MIME type for file parts

The last part in the request must be followed by the boundary string, followed by two hyphens.

The documentation for each operation that supports multipart uploads will specify the number and names of parts that are expected for the operation. 
File parts must have the part name "file", and documentation for operations which allow for JSON object parts will specify the required part name for the JSON part.

The following example shows a multipart upload request that creates a Comment containing the specified text and file attachment:

`POST https://api.smartsheet.com/2.0/sheets/4509093797881732/discussions/2889925487028100/comments`  
`Authorization: Bearer ACCESS_TOKEN`  
`Content-Length: 29008`  
`Content-Type: multipart/form-data; boundary=----gU8h01zAAp3LagBr`  

`------gU8h01zAAp3LagBr`  
`Content-Disposition: form-data; name="comment"`  
`Content-Type: application/json`  

`{ "text": "Please review the attached image." }`  
`------gU8h01zAAp3LagBr`  
`Content-Disposition: form-data; name="file"; filename="picture.jpg"`  
`Content-Type: image/jpeg`  

*< Binary content for file >*  
`------gU8h01zAAp3LagBr--`

### Simple Uploads

A [simple upload](#simple-uploads) allows you to add a single file attachment to the specified object. 
For example, you can perform a simple upload to upload a file to a [sheet](#attach-file-to-sheet), [row](#attach-file-to-row), or [comment](#attach-file-to-comment). 

To perform this kind of upload, you must set specific headers to tell Smartsheet about the file. The following three headers are required: 

     |     |
-----|-----|
**Content-Disposition** | `attachment` to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by `filename=` and the URL-encoded filename in quotes
**Content-Type** | Can be left blank if it is not known (but must be present), and Smartsheet will make its best guess based on the extension of the file. 
**Content-Length** | Must be set to the size of the file, in bytes. For example to determine file size using in UNIX: <p>`$ ls -l ProgressReport.docx`<br/>`5463 ProgressReport.docx`</p>

The following example request shows a simple upload that adds a file attachment to a Sheet:

`POST https://api.smartsheet.com/2.0/sheets/4509093797881732/attachments`  
`Authorization: Bearer ACCESS_TOKEN`  
`Content-Disposition: attachment; filename="ProgressReport.docx"`  
`Content-Type: application/msword`  
`Content-Length: 5463`  

*< Binary content for file >*  

As shown in this example, the contents of the file is included in the body of the `POST` request. In most programming languages, this is done by reading the file from an input stream and writing it out to the output stream of the HTTP request. 

## Attach File to Comment

> Example Request (multipart):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X POST \
-F "file=@ProgressReport.docx;type=application/msword"
```

```javascript
// n/a
```

```csharp
// Attach file to comment.
smartsheet.SheetResources.CommentResources.AttachmentResources.AttachFile(sheetId, commentId, filePath, "application/msword");
```

```java
// Specify file to be attached.
File file = new File(filePath);

// Attach file to comment.
smartsheet.sheetResources().commentResources().attachmentResources().attachFile(sheetId, commentId, file, "application/msword");
```

```python
# Attach file to comment.
smartsheet.Attachments.attach_file_to_comment(
    sheetId,
    commentId,
    ('ProgressReport.docx', 
     open('/path/to/ProgressReport.docx', 'rb'), 
     'application/msword')
)
```

> Example Request (simple):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/msword" \
-H 'Content-Disposition: attachment; filename="ProgressReport.docx"' \
-H "Content-Length: FILE_SIZE" \
-X POST \
--data-binary @ProgressReport.docx
```

```javascript
// Set options.
var options = {
    contentType: CONTENT_TYPE,
    fileName: NAME_OF_FILE,
    fileSize: SIZE_OF_FILE,
    body: ATTACHMENT_DATA,
    sheetId: 2252168947361668,
    commentId: 4293147074291588
};

// Attach file to comment.
smartsheet.sheets.addCommentAttachment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    })
```

```csharp
// Attach file to comment.
smartsheet.SheetResources.CommentResources.AttachmentResources.AttachFile(sheetId, commentId, filePath, "application/msword");
```

```java
// Specify file to be attached.
File file = new File(filePath);

// Attach file to comment.
smartsheet.sheetResources().commentResources().attachmentResources().attachFile(sheetId, commentId, file, "application/msword");
```

```python
# Attach file to comment.
smartsheet.Attachments.attach_file_to_comment(
    sheetId,
    commentId,
    ('ProgressReport.docx', 
     open('/path/to/ProgressReport.docx', 'rb'), 
     'application/msword')
)
```

> Example Response:

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/comments/{commentId}/attachments`

<% SUPPORTS_MULTIPART = "This operation can be performed using a [simple upload](#simple-uploads) or a [multipart upload](#multipart-uploads). For more information, see [Posting an Attachment](#posting-an-attachment)." %>

Attaches a file to the Comment. <%= SUPPORTS_MULTIPART %>

<% NEW_ATTACHMENT = "This operation will always create a new attachment.  To upload a new version of the same attachment, use the [Attach New Version](#attach-new-version) operation." %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach File to Row

> Example Request (multipart):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X POST \
-F "file=@ProgressReport.docx;type=application/msword"
```

```javascript
// n/a
```

```csharp
// Attach file to row.
smartsheet.SheetResources.RowResources.AttachmentResources.AttachFile(sheetId, rowId, filePath, "application/msword");
```

```java
// Specify file to be attached.
File file = new File(filePath);

// Attach file to row.
smartsheet.sheetResources().rowResources().attachmentResources().attachFile(sheetId, rowId, file, "application/msword");
```

```python
# Attach file to row.
smartsheet.Attachments.attach_file_to_row(
    sheetId,
    rowId,
    ('ProgressReport.docx', 
     open('/path/to/ProgressReport.docx', 'rb'), 
     'application/msword')
)
```

> Example Request (simple):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/msword" \
-H 'Content-Disposition: attachment; filename="ProgressReport.docx"' \
-H "Content-Length: FILE_SIZE" \
-X POST \
--data-binary @ProgressReport.docx
```

```javascript
// Set options.
var options = {
    contentType: CONTENT_TYPE,
    fileName: NAME_OF_FILE,
    fileSize: SIZE_OF_FILE,
    body: ATTACHMENT_DATA,
    sheetId: 2252168947361668,
    rowId: 4293147074291588
};

// Attach file to row.
smartsheet.sheets.addRowAttachment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    })
```
	
```csharp
// Attach file to row.
smartsheet.SheetResources.RowResources.AttachmentResources.AttachFile(sheetId, rowId, filePath, "application/msword");
```

```java
// Specify file to be attached.
File file = new File(filePath);

// Attach file to row.
smartsheet.sheetResources().rowResources().attachmentResources().attachFile(sheetId, rowId, file, "application/msword");
```

```python
# Attach file to row.
smartsheet.Attachments.attach_file_to_row(
    sheetId,
    rowId,
    ('ProgressReport.docx', 
     open('/path/to/ProgressReport.docx', 'rb'), 
     'application/msword')
)
```


> Example Response:

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/attachments`

Attaches a file to the Row. <%= SUPPORTS_MULTIPART %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach File to Sheet 

> Example Request (multipart):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X POST \
-F "file=@ProgressReport.docx;type=application/msword"
```

```javascript
// n/a
```

```csharp
// Attach file to sheet.
smartsheet.SheetResources.AttachmentResources.AttachFile(sheetId, filePath, "application/msword");
```

```java
// Specify file to be attached.
File file = new File(filePath);

// Attach file to sheet.
smartsheet.sheetResources().attachmentResources().attachFile(sheetId, file, "application/msword");
```

```python
# Attach file to sheet.
smartsheet.Attachments.attach_file_to_sheet(
    sheetId,
    ('ProgressReport.docx', 
     open('/path/to/ProgressReport.docx', 'rb'), 
     'application/msword')
)
```

> Example Request (simple):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/msword" \
-H 'Content-Disposition: attachment; filename="ProgressReport.docx"' \
-H "Content-Length: FILE_SIZE" \
-X POST \
--data-binary @ProgressReport.docx
```

```javascript
// Set options.
var options = {
    contentType: CONTENT_TYPE,
    fileName: NAME_OF_FILE,
    fileSize: SIZE_OF_FILE,
    body: ATTACHMENT_DATA,
    sheetId: 2252168947361668
};

// Attach file to sheet.
smartsheet.sheets.addAttachment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    })
```

```csharp
// Attach file to sheet.
smartsheet.SheetResources.AttachmentResources.AttachFile(sheetId, filePath, "application/msword");
```

```java
// Specify file to be attached.
File file = new File(filePath);

// Attach file to sheet.
smartsheet.sheetResources().attachmentResources().attachFile(sheetId, file, "application/msword");
```

```python
# Attach file to sheet.
smartsheet.Attachments.attach_file_to_sheet(
    sheetId,
    ('ProgressReport.docx', 
     open('/path/to/ProgressReport.docx', 'rb'), 
     'application/msword')
)
```


> Example Response:

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/attachments`

Attaches a file to the Sheet. <%= SUPPORTS_MULTIPART %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach URL to Comment

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"Search Engine", "description": "A popular search engine", "attachmentType":"LINK", "url":"http://www.google.com"}'
```

```javascript
// Specify URL attachment.
var attachment = {
    "name": "Search Engine",
    "attachmentType": "LINK",
    "url": "http://www.google.com"
};

// Set options.
var options = {
    body: attachment,
    sheetId: 2252168947361668,
    commentId: 4445024629876612
};

// Attach URL to comment.
smartsheet.sheets.addCommentAttachment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```
	
```csharp
// Create attachment.
Attachment attachment = new Attachment.CreateAttachmentBuilder("http://www.google.com", AttachmentType.LINK).SetName("Search Engine").SetDescription("A popular search engine").Build();

// Attach URL to comment.
smartsheet.SheetResources.CommentResources.AttachmentResources.AttachUrl(sheetId, commentId, attachment);
```

```java
// Create attachment.
Attachment attachment = new Attachment.CreateAttachmentBuilder().setUrl("http://www.google.com").setAttachmentType(AttachmentType.LINK).setName("Search Engine").setDescription("A popular search engine").build();
 
// Attach URL to comment.
smartsheet.sheetResources().commentResources().attachmentResources().attachUrl(sheetId, commentId, attachment);
```

```python
# Create URL attachment.
url = smartsheet.models.Attachment({
    'name': 'Search Engine',
    'attachment_type': 'LINK',
    'url': 'http://www.google.com'
})

# Attach URL to comment.
smartsheet.Attachments.attach_url_to_comment(sheetId, commentId, url)
```

> Example Response:

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/comments/{commentId}/attachments`

Attaches a URL to the Comment.

<%= partial "snippets/attachURL_table.md.erb" %>

## Attach URL to Row

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"Search Engine", "description": "A popular search engine", "attachmentType":"LINK", "url":"http://www.google.com"}'
```

```javascript
// Specify URL attachment.
var attachment = {
    "name": "Search Engine",
    "description": "A popular search engine",
    "attachmentType": "LINK",
    "url": "http://www.google.com"
};

// Set options.
var options = {
    body: attachment,
    sheetId: 2252168947361668,
    rowId: 4293147074291588
};

// Attach URL to row.
smartsheet.sheets.addRowAttachment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Create attachment.
Attachment attachment = new Attachment.CreateAttachmentBuilder("http://www.google.com", AttachmentType.LINK).SetName("Search Engine").SetDescription("A popular search engine").Build();

// Attach URL to row.
smartsheet.SheetResources.RowResources.AttachmentResources.AttachUrl(sheetId, rowId, attachment);
```

```java
// Create attachment.
Attachment attachment = new Attachment.CreateAttachmentBuilder().setUrl("http://www.google.com").setAttachmentType(AttachmentType.LINK).setName("Search Engine").setDescription("A popular search engine").build();

// Attach URL to row.
smartsheet.sheetResources().rowResources().attachmentResources().attachUrl(sheetId, rowId, attachment);
```

```python
# Create URL attachment.
url = smartsheet.models.Attachment({
    'name': 'Search Engine',
    'description': 'A popular search engine.'
    'attachment_type': 'LINK',
    'url': 'http://www.google.com'
})

# Attach URL to row.
smartsheet.Attachments.attach_url_to_row(sheetId, rowId, url)
```

> Example Response:

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/attachments`

Attaches a URL to the Row.

<%= partial "snippets/attachURL_table.md.erb" %>

## Attach URL to Sheet

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"Search Engine", "description": "A popular search engine", "attachmentType":"LINK", "url":"http://www.google.com"}'
```

```javascript
// Specify URL attachment.
var attachment = {
    "name": "Search Engine",
    "description": "A popular search engine",
    "attachmentType": "LINK",
    "url": "http://www.google.com"
};

// Set options.
var options = {
    body: attachment,
    sheetId: 2252168947361668
};

// Attach URL to sheet.
smartsheet.sheets.addAttachment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Create attachment.
Attachment attachment = new Attachment.CreateAttachmentBuilder("http://www.google.com", AttachmentType.LINK).SetName("Search Engine").SetDescription("A popular search engine").Build();

// Attach URL to sheet.
smartsheet.SheetResources.AttachmentResources.AttachUrl(sheetId, attachment);
```

```java
// Create attachment.
Attachment attachment = new Attachment.CreateAttachmentBuilder().setUrl("http://www.google.com").setAttachmentType(AttachmentType.LINK).setName("Search Engine").setDescription("A popular search engine").build();

// Attach URL to sheet.
smartsheet.sheetResources().attachmentResources().attachUrl(sheetId, attachment);
```

```python
# Create URL attachment.
url = smartsheet.models.Attachment({
    'name': 'Search Engine',
    'description': 'A popular search engine.',
    'attachment_type': 'LINK',
    'url': 'http://www.google.com'
})

# Attach URL to sheet.
smartsheet.Attachments.attach_url_to_sheet(sheetId, url)
```

> Example Response:

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/attachments`

Attaches a URL to the Sheet.

<%= partial "snippets/attachURL_table.md.erb" %>

## Delete Attachment

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    attachmentId: 7169782752536452,
};

// Delete attachment.
smartsheet.sheets.deleteAttachment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete attachment.
smartsheet.SheetResources.AttachmentResources.DeleteAttachment(sheetId, attachmentId);
```

```java
// Delete attachment.
smartsheet.sheetResources().attachmentResources().deleteAttachment(sheetId, sheetAttachmentId);
```

```python
# Delete attachment.
smartsheet.Attachments.delete_attachment(sheetId, attachmentId)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /sheets/{sheetId}/attachments/{attachmentId}`

Deletes the Attachment specified in the URL.  

<aside class="notice">If the Attachment has multiple versions this deletes only the specific version specified by the attachmentId (each version has a different attachment ID).</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

## Get Attachment

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    attachmentId: 4583173393803140
};

// Get attachment.
smartsheet.sheets.getAttachment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get attachment.
smartsheet.SheetResources.AttachmentResources.GetAttachment(sheetId, attachmentId);
```

```java
// Get attachment.
smartsheet.sheetResources().attachmentResources().getAttachment(sheetId, attachmentId);
```

```python
# Get attachment.
attachment = smartsheet.Attachments.get_attachment(sheetId, attachmentId)
```

> Example Response:

```json
{
    "name": "at3.png",
    "url": "URL_TO_ATTACHMENT",
    "attachmentType": "FILE",
    "mimeType": "image/png",
    "id": 4583173393803140,
    "urlExpiresInMillis": 120000
}
```

`GET /sheets/{sheetId}/attachments/{attachmentId}`

Fetches the Attachment specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Attachment object](#attachment-object). For File attachments, this will include a temporary URL for downloading the file.<br/><br/>Currently, the temporary URL is set to expire in 120000 milliseconds, or 2 minutes.

## Get All Attachments

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668
};

// Get all attachments.
smartsheet.sheets.listAttachments(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get all attachments (omit pagination parameters).
smartsheet.SheetResources.AttachmentResources.ListAttachments(sheetId, null);

// Get all attachments (specify 'includeAll' parameter with value of "true").
smartsheet.SheetResources.AttachmentResources.ListAttachments(sheetId, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'.
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// Get all attachments with pagination.
PagedResult<Attachment> attachments = smartsheet.sheetResources().attachmentResources().listAttachments(sheetId, parameters);

// Get all attachments without pagination.
PagedResult<Attachment> attachments = smartsheet.sheetResources().attachmentResources().listAttachments(sheetId, null);
```

```python
# Get all attachments.
action = smartsheet.Attachments.list_all_attachments(sheetId, include_all=True)
attachments = action.data

# Get a paginated list of attachments.
action = smartsheet.Attachments.list_all_attachments(
    sheetId, 
    page_size=10, 
    page=1)
pages = action.total_pages
attachments = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 2,
	"data": [
		{
			"name": "att3.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 4583173393803140,
			"parentType" : "SHEET",
			"parentId" : 341847495283
		},
		{
			"name": "att4.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 4583173393803140,
			"parentType" : "ROW",
			"parentId" : 684956754834557
		}
	]
}
```

`GET /sheets/{sheetId}/attachments`

Gets a list of all Attachments that are on the Sheet, including Sheet, Row, and Discussion level Attachments.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Attachment objects](#attachment-object)

## Get Discussion Attachments

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    discussionId: 3962273862576004
};

// Get discussion attachments.
smartsheet.sheets.listDiscussionAttachments(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get discussion attachments (omit pagination parameters).
smartsheet.SheetResources.DiscussionResources.AttachmentResources.ListAttachments(sheetId, discussionId, null);

// Get discussion attachments (specify 'includeAll' parameter with value of "true").
smartsheet.SheetResources.DiscussionResources.AttachmentResources.ListAttachments(sheetId, discussionId, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'.
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// Get all discussion attachments with pagination.
PagedResult<Attachment> attachments = smartsheet.sheetResources().discussionResources().attachmentResources().getAttachments(sheetId, discussionId, parameters);

// Get all discussion attachments without pagination.
PagedResult<Attachment> attachments = smartsheet.sheetResources().discussionResources().attachmentResources().getAttachments(sheetId, discussionId, null);
```

```python
# Get discussion attachments.
action = smartsheet.Attachments.list_discussion_attachments(
    sheetId, 
    discussionId, 
    include_all=True)
attachments = action.data

# Get paginated list of discussion attachments.
action = smartsheet.Attachments.list_discussion_attachments(
    sheetId, 
    discussionId, 
    page_size=10, 
    page=1)
pages = action.total_pages
attachments = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 2,
	"data": [
		{
			"name": "att3.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 4583173393803140,
			"parentType" : "COMMENT",
			"parentId" : 341847495283
		},
		{
			"name": "att4.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 4583173393803140,
			"parentType" : "COMMENT",
			"parentId" : 684956754834557
		}
	]
}
```

`GET /sheets/{sheetId}/discussions/{discussionId}/attachments`

Gets a list of all Attachments that are in the Discussion.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Attachment objects](#attachment-object)

## Get Row Attachments

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/attachments \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    rowId: 4293147074291588
};

// Get row attachments.
smartsheet.sheets.getRowAttachments(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get row attachments (omit pagination parameters).
smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(sheetId, rowId, null);

// Get row attachments (specify 'includeAll' parameter with value of "true").
smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(sheetId, rowId, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'.
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// Get all row attachments with pagination.
PagedResult<Attachment> attachments = smartsheet.sheetResources().rowResources().attachmentResources().getAttachments(sheetId, rowId, parameters);

// Get all row attachments without pagination.
PagedResult<Attachment> attachments = smartsheet.sheetResources().rowResources().attachmentResources().getAttachments(sheetId, rowId, null);
```

```python
# Get row attachments.
action = smartsheet.Attachments.list_row_attachments(
    sheetId, 
    rowId, 
    include_all=True)
attachments = action.data

# Get paginated list of row attachments.
action = smartsheet.Attachments.list_row_attachments(
    sheetId, 
    rowId, 
    page_size=10, 
    page=1)
pages = action.total_pages
attachments = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 2,
	"data": [
		{
			"name": "att3.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 4583173393803140,
			"parentType" : "ROW",
			"parentId" : 341847495283
		},
		{
			"name": "att4.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 4583173393803140,
			"parentType" : "COMMENT",
			"parentId" : 684956754834557
		}
	]
}
```

`GET /sheets/{sheetId}/rows/{rowId}/attachments`

Gets a list of all Attachments that are on the Row, including Row and Discussion level Attachments.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Attachment objects](#attachment-object)

## Versioning 

### Attach New Version

> Example Request (multipart):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId}/versions \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X POST \
-F "file=@ProgressReport.docx;type=application/msword"
```

```javascript
// n/a
```

```csharp
// Attach new version of file.
smartsheet.SheetResources.AttachmentResources.VersioningResources.AttachNewVersion(sheetId, attachmentId, filePath, "application/msword");
```

```java
// Specify the new file to be attached.
File file = new File(filePath);

// Attach new version of the file.
smartsheet.sheetResources().attachmentResources().versioningResources().attachNewVersion(sheetId, attachmentId, file, "application/msword");
```

```python
# Attach new version of file.
action = smartsheet.Attachments.attach_new_version(
    sheetId,
    attachmentId,
    ('ProgressReport.docx',
     open('/path/to/ProgressReport.docx', 'rb'),
     'application/msword')
)
# action.message == 'SUCCESS'
# action.result is an Attachment object
```

> Example Request (simple):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId}/versions \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/msword" \
-H 'Content-Disposition: attachment; filename="ProgressReport.docx"' \
-H "Content-Length: FILE_SIZE" \
-X POST \
--data-binary @ProgressReport.docx
```

```javascript
// Set options.
var options = {
    contentType: CONTENT_TYPE,
    fileName: NAME_OF_FILE,
    fileSize: SIZE_OF_FILE,
    body: ATTACHMENT_DATA,
    sheetId: 2252168947361668,
    rowId: 4293147074291588
};

// Attach new version of the file.
smartsheet.sheets.attachNewVersion(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    })
```

```csharp
// Attach new version of file.
smartsheet.SheetResources.AttachmentResources.VersioningResources.AttachNewVersion(sheetId, attachmentId, filePath, "application/msword");
```

```java
// Specify the new file to be attached.
File file = new File(filePath);

// Attach new version of the file.
smartsheet.sheetResources().attachmentResources().versioningResources().attachNewVersion(sheetId, attachmentId, file, "application/msword");
```

```python
# Attach new version of file.
action = smartsheet.Attachments.attach_new_version(
    sheetId,
    attachmentId,
    ('ProgressReport.docx',
     open('/path/to/ProgressReport.docx', 'rb'),
     'application/msword')
)
# action.message == 'SUCCESS'
# action.result is an Attachment object
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "attachmentType": "FILE",
        "createdAt": "2013-02-28T21:04:56-08:00",
        "id": 4583173393803140,
        "mimeType": "application/msword",
        "name": "ProgressReport.docx"
    },
    "resultCode": 0
}
```

`POST /sheets/{sheetId}/attachments/{attachmentId}/versions`

Uploads a new version of a file to a Sheet or Row. <%= SUPPORTS_MULTIPART %>

<aside class="notice">Uploading new versions is not supported for attachments on Comments or for URL attachments.</aside>

<%= partial "snippets/attachFile_table.md.erb" %>

### Delete All Versions

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId}/versions \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    attachmentId: 5510069950408580
};

// Delete all versions of the attachment.
smartsheet.sheets.deleteAllAttachmentVersions(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete all versions of the attachment. 
smartsheet.SheetResources.AttachmentResources.VersioningResources.DeleteAllVersions(sheetId, attachmentId);
```

```java
// Delete all versions of the attachment.
smartsheet.sheetResources().attachmentResources().versioningResources().deleteAllVersions(sheetId, attachmentId);
```

```python
# Delete all versions of the attachment.
smartsheet.Attachments.delete_attachment_versions(sheetId, attachmentId)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /sheets/{sheetId}/attachments/{attachmentId}/versions`

Deletes all versions of the attachment corresponding to the specified Attachment ID.  For attachments with multiple versions, this will effectively delete the attachment from the object that it’s attached to.

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

### List All Versions

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId}/versions \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    attachmentId: 5510069950408580
};

// List all versions of the attachment.
smartsheet.sheets.listAttachmentVersions(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List all versions of the attachment (omit pagination parameters).
smartsheet.SheetResources.AttachmentResources.VersioningResources.ListVersions(sheetId, attachmentId, null);

// List all versions of the attachment (specify 'includeAll' parameter with value of "true").
smartsheet.SheetResources.AttachmentResources.VersioningResources.ListVersions(sheetId, attachmentId, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'.
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List all attachment versions with pagination.
PagedResult<Attachment> attachments = smartsheet.sheetResources().attachmentResources().versioningResources().listAllVersions(sheetId, attachmentId, parameters);

// List all attachment versions without pagination.
PagedResult<Attachment> attachments = smartsheet.sheetResources().attachmentResources().versioningResources().listAllVersions(sheetId, attachmentId, null);
```

```python
# List all attachment versions.
action = smartsheet.Attachments.list_attachment_versions(
    sheetId, 
    attachmentId, 
    include_all=True)
versions = action.data

# Get paginated list of attachments.
action = smartsheet.Attachments.list_attachment_versions(
    sheetId, 
    attachmentId, 
    page_size=5, 
    page=1)
pages = action.total_pages
versions = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 2,
	"data": [
		{
			"id": 4583173393803140,
			"name": "at3.png",
			"attachmentType": "file",
			"mimeType": "image/png",
			"createdAt": "2014-03-28T18:13:20-07:00"
		},
		{
			"id": 642523719853956,
			"name": "at3.png",
			"attachmentType": "file",
			"mimeType": "image/png",
			"createdAt": "2014-03-27T18:11:11-07:00"
		}
	]
}
```

`GET /sheets/{sheetId}/attachments/{attachmentId}/versions`

Gets a list of all versions of the given Attachment ID, in order from newest to oldest.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Attachment objects](#attachment-object)

<aside class="notice">To retrieve a download URL for a file attachment, use the Get Attachment operation for the specific version you want to download.</aside>

# Cells

A collection of Cells comprises each Row in a Sheet.

## <%= OBJECTS %>

### Cell Object

     |     |     |
-----|-----|-----|
**columnId** | number | The ID of the column that the cell is located in
**columnType** | string | See type definition on the [Column object](#column-object).<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **columnType**.
**value** | string,<br/>number,<br/>or boolean | A string, a number or a boolean value -- depending on the cell type and the data in the cell.  See [Cell Values](#cell-values).
**displayValue** | string | Visual representation of cell contents, as presented to the user in the UI.  See [Cell Values](#cell-values).
**objectValue** | [ObjectValue](#objectvalue-object) | [Optionally included](#row-include-flags) object representation of the cell's value. Used for updating predecessor cell values.
**formula** | string | The  formula for a cell, if set
**hyperlink** | [Hyperlink](#hyperlink-object) | A hyperlink to a URL, sheet, or report
**linkInFromCell** | [CellLink](#celllink-object) | An inbound link from a cell in another sheet.  This cell's value mirrors the linked cell's value.
**linksOutToCells** | [CellLink](#celllink-object)[] | An array of [CellLink objects](#celllink-object).  Zero or more outbound links from this cell to cells in other sheets whose values mirror this cell's value.
**format** | string | The format descriptor (see [Formatting](#formatting))<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **format** and this cell has a non-default format applied.
**conditionalFormat** | string | The format descriptor describing this cell's conditional format (see [Formatting](#formatting)).<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **format** and this cell has a conditional format applied.
**strict** | boolean | Set to **false** to enable lenient parsing. Defaults to **true**. <%= REQUEST_ONLY_ATTRIBUTE %> See [Cell Value Parsing](#cell-value-parsing) for more information about using this attribute. 
**image** | [Image](#image-object) | The image that the cell contains.<br/>Only returned if the cell contains an image.

### Cell History Object

Extends the [Cell object](#cell-object).

     |     |     |
-----|-----|-----|
**modifiedAt** | timestamp | The datetime for when the change was made to the cell
**modifiedBy** | [User](#user-object) | User object containing the name and email of the User that made the change

### CellLink Object

Represents a link to a Cell in a different Sheet.

<aside class="notice">If status is not "OK" (i.e. there is a problem with the link), any or all of the following attributes may be null: <ul><li>sheetId</li><li>rowId</li><li>columnId</li></ul></aside>

     |     |     |
-----|-----|-----|
**status** | string | One of the following values:<ul><li>**OK**: the link is in a good state</li><li>**BROKEN**: the row or sheet linked to was deleted</li><li>**INACCESSIBLE**: the sheet linked to cannot be viewed by this user</li><li>Several other values indicating unusual error conditions: **NOT_SHARED**, **BLOCKED**, **CIRCULAR**, **INVALID**, and **DISABLED**.</li></ul>
**sheetId** | number | Sheet ID of the sheet that the linked cell belongs to
**rowId** | number | Row ID of the linked cell
**columnId** | number | Column ID of the linked cell
**sheetName** | string | Sheet name of the linked cell

### Hyperlink Object

Represents a hyperlink to a URL, a Sheet, a Report, or a Sight.
 
<aside class="notice">If the Sheet, Report, or Sight that is linked to was deleted, this object may be empty (i.e. all values null).</aside>

     |     |     |
-----|-----|-----|
**url** | string | When the hyperlink is a URL link, this property will contain the URL value.<br/><br/>When the hyperlink is a Sheet/Report/Sight link (i.e. **sheetId** or **reportId** or **sightId** is non-null), this property will contain the permalink to the Sheet or Report or Sight.
**sheetId** | number | If non-null, this hyperlink is a link to the Sheet with this ID.
**reportId** | number | If non-null, this hyperlink is a link to the Report with this ID.
**sightId** | number | If non-null, this hyperlink is a link to the Sight with this ID.

### ObjectValue object

The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object.
This object itself is not used directly.

     |     |     |
-----|-----|-----|
**objectType** | string | One of DATE, DATETIME, ABSTRACT_DATETIME, CONTACT, DURATION, or PREDECESSOR_LIST

### PredecessorList object

> Example Update Row Request for a Predecessor Cell:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows?include=objectValue \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '[{"id": "6572427401553796", "cells": [{"columnId": 7518312134403972,"objectValue": {"objectType": "PREDECESSOR_LIST","predecessors": [{"rowId": 567735454328708,"type": "FS","lag": {"objectType": "DURATION","days": 2,"hours": 4}}]}}]}]'
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": [
        {
            "id": 6572427401553796,
            "rowNumber": 2,
            "expanded": true,
            "createdAt": "2015-01-09T11:41:55-08:00",
            "modifiedAt": "2015-02-23T15:36:07-08:00",
            "cells": [	
				{
					"columnId": 7518312134403972,
					"value": "1FS +2d 4h",
					"objectValue": {
						"objectType": "PREDECESSOR_LIST",
						"predecessors": [
							{
								"rowId": 567735454328708,
								"rowNumber": 1,
								"type": "FS",
								"lag": {
									"objectType": "DURATION",
									"days": 2,
									"hours": 4
								}
							}
						]
					},
					"displayValue": "1FS +2d 4h"
				}
			]
		}
	]
}
```

Extends the [ObjectValue object](#objectvalue-object).

In a project sheet with dependencies enabled, the **objectValue** attribute for predecessor cells will be an object of this type, which represents the predecessors for the row.

     |     |     |
-----|-----|-----|
**objectType** | string | PREDECESSOR_LIST
**predecessors** | [Predecessor](#predecessor-object)[] | Array of [Predecessor objects](#predecessor-object).

### Predecessor object

     |     |     |
-----|-----|-----|
**rowId** | number| The ID of the predecessor row
**rowNumber** | number | The row number of the predecessor row. Omitted if **invalid** is true. Read-only.
**type** | string | The type of the predecessor. One of FS, FF, SS, or SF.
**lag** | [Duration](#duration-object) | The lag value of this predecessor. Omitted if there is no lag.
**invalid** | boolean | True if the row referenced by rowId is not a valid row in this sheet, or there is a circular reference (displayed in the Smartsheet web application as "#REF"). Read-only. Omitted if false.
**inCriticalPath** | boolean | True if this predecessor is in the critical path. Read-only.

### Duration object

Extends the [ObjectValue object](#objectvalue-object).

In a project sheet, represents a value in a duration cell, or a lag value of a predecessor.

     |     |     |
-----|-----|-----|
**objectType** | string | DURATION
**negative** | boolean | When used as a predecessor's lag value, indicates whether the lag is negative (if true), or positive (false). The individual duration values themselves (e.g. **days**, **hours**, **minutes**, etc.) will always be positive.
**elapsed** | boolean | If true, indicates this duration represents elapsed time, which ignores non-working time.
**weeks** | number | The number of weeks for this duration.
**days** | number | The number of days for this duration.
**hours** | number | The number of hours for this duration.
**minutes** | number | The number of minutes for this duration.
**seconds** | number | The number of seconds for this duration.
**milliseconds** | number | The number of milliseconds for this duration.

## Get Cell History

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history?include=columnType \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    rowId: 4293147074291588,
    columnId: 642523719853956
};

// Get cell history.
smartsheet.sheets.getCellHistory(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get cell history (omit 'include' parameter and pagination parameters).
smartsheet.SheetResources.RowResources.CellResources.GetCellHistory(sheetId, rowId, columnId, null, null);

// Get cell history (specify 'include' parameter with value of "columnType" and 'includeAll' parameter with value of "true").
smartsheet.SheetResources.RowResources.CellResources.GetCellHistory(sheetId, rowId, columnId, new CellInclusion[] { CellInclusion.COLUMN_TYPE }, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'.
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// Get cell history with pagination.
PagedResult<CellHistory> cellHistory = smartsheet.sheetResources().rowResources().cellResources().getCellHistory(sheetId, rowId, columnId, parameters);

// Get cell history without pagination.
PagedResult<CellHistory> cellHistory = smartsheet.sheetResources().rowResources().cellResources().getCellHistory(sheetId, rowId, columnId, null);
```

```python
# Get all cell history.
action = smartsheet.Cells.get_cell_history(
    sheetId,
    rowId,
    columnId,
    include_all=True)
revisions = action.data

# Get paginated list of cell history.
action = smartsheet.Cells.get_cell_history(
    sheetId,
    rowId,
    columnId,
    page_size=5,
    page=1)
pages = action.total_pages
revisions = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 3,
	"data": [
		{
			"columnId":642523719853956,
			"displayValue": "Revision 3",
			"columnType": "TEXT_NUMBER",
			"value": "Revision 3",
			"modifiedAt": "2013-06-24T00:10:18Z",
			"modifiedBy" : {
				"name" : "Jane Smart",
				"email" : "jane.smart@smartsheet.com"
			}
		},
		{
			"columnId":642523719853956,
			"displayValue": "Revision 2",
			"columnType": "TEXT_NUMBER",
			"value": "Revision 2",
			"modifiedAt": "2013-06-23T00:10:18Z",
			"modifiedBy" : {
				"name" : "Joe Smart",
				"email" : "joe.smart@smartsheet.com"
			}
		},
		{
			"columnId":642523719853956,
			"displayValue": "Revision 1",
			"columnType": "TEXT_NUMBER",
			"value": "Revision 1",
			"modifiedAt": "2013-06-22T00:10:18Z",
			"modifiedBy" : {
				"name" : "Joe Smart",
				"email" : "joe.smart@smartsheet.com" 
			}
		}
	]
}
```

`GET /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history`

Gets the cell modification history. 

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<aside class="notice">This is a resource-intensive operation and incurs 10 additional requests against the rate limit.</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): when specified with a value of "columnType", response will include the **columnType** attribute for each [cell] (#cell-object)
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Cell History objects](#cell-history-object)

## Update Cell(s)

To update the Cells in a Sheet, use the [Update Row(s)](#update-row(s)) operation.

## <%= RELATED %>

### Images in Cells

For details about working with images in cells, see [Cell Images](#cell-images).

### Cell Links

Creating or updating cell links via the **cell.linkInFromCell** attribute is a special operation. 
A given row or cell update operation may contain only link updates, or no link updates. 
Attempting to mix row/cell updates with cell link updates will result in error code 1115. 
Additionally, a [cell link](#celllink-object) can only be added to an *existing* cell, so the **cell.linkInFromCell** attribute is not allowed when POSTing a new row to a sheet.
 
When creating a cell link, **cell.value** must be null (the data will be pulled from the linked cell).
 
A cell may not contain both a hyperlink and a cell link, so **hyperlink** and **linkInFromCell** may never both be non-null at the same time.

### Hyperlinks

You can create and modify [hyperlinks](#hyperlink-object) by using any API operation that creates or updates cell data. 
When creating or updating a hyperlink, **cell.value** may be set to a string value or null. 
If null, the cell's value will be derived from the hyperlink: 
<ul><li>If the hyperlink is a URL link, the cell's value will be set to the URL itself.</li><li>If the hyperlink is a sheet or report or Sight link, the cell's value will be set to the sheet or report or Sight name.</li></ul>

# Cell Images

A 'cell image' is an image that has been uploaded to a Cell within a Sheet.

## <%= OBJECTS %>

### Image Object

     |     |     |
-----|-----|-----|
**id** | string | Image ID
**width** | number | Original width (in pixels) of the uploaded image
**height** | number | Original height (in pixels) of the uploaded image
**altText** | string | Alternate Text for the image

### ImageUrl Object

     |     |     |
-----|-----|-----|
**imageId** | string | Image ID
**width** | number | Image width (in pixels).<br/>In the [Get Image URLs](#get-image-urls) request, this (optional) attribute represents requested width; in the response, it represents actual width of the image returned. (See [Get Image URLs](#get-image-urls).) 
**height** | number | Image height (in pixels).<br/>In the [Get Image URLs](#get-image-urls) request, this (optional) attribute represents requested height; in the response, it represents actual height of the image returned. (See [Get Image URLs](#get-image-urls).) 
**url** | string | Temporary URL that can be used to retrieve the image. This attribute can be present in a response but will never be specified in a request.
**error** | [Error](#errors) | Error object. Present in the [Get Image URLs](#get-image-urls) response only if an error occurred retrieving the image.

### ImageUrlMap Object

     |     |     |
-----|-----|-----|
**urlExpiresInMillis** | number | Milliseconds before the URLs within **imageUrls** will expire
**imageUrls** | [ImageUrl](#imageurl-object)[] | Array of ImageUrl objects

## Add Image to Cell

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages?altText=my%20image \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/jpeg" \
-H 'Content-Disposition: attachment; filename="picture.jpg"' \
-H "Content-Length: FILE_SIZE" \
-X POST \
--data-binary @picture.jpg
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
    },
    "resultCode": 0
}
```

`POST /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages`

Uploads an image to the specified Cell within a Sheet. 

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | See [Simple Uploads](#simple-uploads) for information about required headers.
<%= PARAMETERS %> | **altText** (optional): url-encoded alternate text for the image
<%= REQUEST %> | Binary content for the file
<%= RETURNS %> | [Result object](#result-object)

## Get Image URLs

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/imageurls \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application\json" \
-X POST \
-d '[{"imageId": "e1znCxhuZo_soEJtUmmX_A","height":40,"width": 20},{"imageId": "g2jdKdfhQa_abKJmPnhC_B","height":100,"width": 50}]'
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
	"urlExpiresInMillis": 1800000,
	"imageUrls":  [
		{
			"imageId": "e1znCxhuZo_soEJtUmmX_A",
			"url": "https://urltoimage1.com?qs1=foo"
		},
		{
			"imageId": "g2jdKdfhQa_abKJmPnhC_B",
			"error": {
				"errorCode": 5001,
				"message": "localized_error_message"
			}
		}
	]
}  
```

`POST /imageurls`

Gets URLs that can be used to retrieve the specified cell images.

<aside class="notice">The HTTP verb for this operation is <code>POST</code> (to provide support for specifying request body).</aside>

<aside class="notice">The number and sequence of <a href="#imageurl-object">ImageUrl objects</a> in the Response will correspond exactly to the number and sequence of objects specified by the Request.</aside>

<aside class="notice">If an error is encountered for any of the requested images, the corresponding <b>ImageUrl</b> object in the Response will contain an <b>error</b> attribute that describes the error. (See Example Response.)</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Array of [ImageUrl objects](#imageurl-object), with the following attributes:<ul><li><b>imageId</b> (required)</li><li><b>height</b> (optional)</li><li><b>width</b> (optional)</li></ul>Each image in the response will be sized according to which dimensions were specified by the request:<ul><li>If neither <b>height</b> nor <b>width</b> is specified, the image is returned in its original size.</li><li>If both <b>height</b> AND <b>width</b> are specified, image is sized using those measurements.</li><li>If either <b>height</b> OR <b>width</b> is specified (i.e., one or the other -- not both), the image will be automatically scaled using that measurement.</li></ul>Additionally, the following rules apply:<ul><li>If the requested image size is less than or equal to the actual image size, then the returned image size matches the requested size.</li><li>If the requested image size is larger than the actual image size, then the returned image size will match the actual image size.</li></ul>
<%= RETURNS %> | [ImageUrlMap object](#imageurlmap-object)

## Remove Image from Cell

To remove an image from a cell (and set cell contents to either empty or to another value), use the [Update Row(s)](#update-row(s)) operation to set **cell.value** to the new value.

## Update Cell Image

A cell image can be updated as follows:

* To change the alternate text of an image, use the [Update Row(s)](#update-row(s)) operation.
* To replace an existing image with a new image, use the [Add Image to Cell](#add-image-to-cell) operation.
* To add an image to a cell that previously contained another type of data, use the [Add Image to Cell](#add-image-to-cell) operation.

## <%= RELATED %>

### Cells

For details about working with the cells within a Sheet, see [Cells](#cells).

# Columns

A Column is a component of a Sheet or Report. 

## <%= OBJECTS %>

### Column Object

     |     |     |
-----|-----|-----|
**id** | number | Column ID
**index** | number | Column index
**title** | string | Column title
**primary** | boolean | Returned only if the column is the Primary Column (value = `true`)
**type** | string | One of:<ul><li>TEXT_NUMBER</li><li>DATE</li><li>DATETIME</li><li>CONTACT_LIST</li><li>CHECKBOX</li><li>PICKLIST</li><li>DURATION</li><li>PREDECESSOR</li><li>ABSTRACT_DATETIME</li></ul>See [Column Types](#column-types).
**options** | string[] | Array of the options available for the column
**hidden** | boolean | Flag indicating whether the column is hidden
**symbol** | string | When applicable for CHECKBOX column type:<%= CHECKBOX_SYMBOL_LIST %>When applicable for PICKLIST column type:<%= PICKLIST_SYMBOL_LIST %>See [Symbol Columns](#symbol-columns).
**systemColumnType** | string | When applicable, one of: <ul><li>AUTO_NUMBER</li><li>MODIFIED_DATE</li><li>MODIFIED_BY</li><li>CREATED_DATE</li><li>CREATED_BY</li></ul>See [System Columns](#system-columns).
**autoNumberFormat** | [AutoNumberFormat](#autonumberformat-object) | Present when systemColumnType == AUTO_NUMBER
**tags** | string[] | Set of tags to indicate special columns. Each element in the array will be set to one of the following values:<ul><li>CALENDAR_START_DATE</li><li>CALENDAR_END_DATE</li><li>GANTT_START_DATE</li><li>GANTT_END_DATE</li><li>GANTT_PERCENT_COMPLETE</li><li>GANTT_DISPLAY_LABEL</li><li>GANTT_PREDECESSOR</li><li>GANTT_DURATION</li><li>GANTT_ASSIGNED_RESOURCE</li></ul>
**width** | number | Display width of the column in pixels
**format** | string | The format descriptor (see [Formatting](#formatting))<br/>Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it.
**filter** | [Filter](#filter-object) | The filter applied to the column.<br/>Only returned if the **include** query string parameter contains **filters** and this column has a filter applied to it.
**locked** | boolean | Flag indicating whether the column is locked. In a response, a value of `true` indicates that the column has been locked by the sheet owner or the admin.
**lockedForUser** | boolean | Flag indicating whether the column is locked for the requesting user.  This attribute may be present in a response, but cannot be specified in a request.

### Criteria Object

     |     |     |
-----|-----|-----|
**operator** | string | One of the following values:<ul><li>EQUAL</li><li>NOT_EQUAL</li><li>GREATER_THAN</li><li>LESS_THAN</li><li>CONTAINS</li><li>BETWEEN</li><li>TODAY</li><li>PAST</li><li>FUTURE</li><li>LAST_N_DAYS</li><li>NEXT_N_DAYS</li><li>IS_BLANK</li><li>IS_NOT_BLANK</li><li>IS_NUMBER</li><li>IS_NOT_NUMBER</li><li>IS_DATE</li><li>IS_NOT_DATE</li><li>IS_CHECKED</li><li>IS_NOT_CHECKED</li></ul>
**value1** | string or number | Optional. Present if a custom filter criteria's operator has one or more arguments.
**value2** | string or number | Optional.  Present if a custom filter criteria's operator has two arguments.

### Filter Object

Smartsheet users can define and save personal column filters on sheets they can view.  When any API operation that returns columns is invoked with the "include=filters" query string parameter, the column will include any active filters the user has defined for the sheet.

     |     |     |
-----|-----|-----|
**type** | string | One of the following values:<ul><li>LIST</li><li>CUSTOM</li></ul>
**excludeSelected** | boolean | If **true**, rows containing cells matching the "values" or "criteria" items are excluded instead of included.
**values** | object[] containing strings, numbers, and booleans | Only included if the filter is of type LIST.<br/><br/>An array of literal cell values that this filter will match against row cells in this column.  The type of the objects in the array depend on the type of the cell values selected to be filtered on when the filter was created.  These may be strings, numbers, booleans, or dates.
**criteria** | [Criteria](#criteria-object)[] | Only included if the filter is of type CUSTOM.<br/><br/>An array of Criteria objects specifying custom criteria against which to match cell values.

## Add Column(s)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"title": "New Picklist Column 1", "type": "PICKLIST", "options": ["First", "Second", "Third"], "index": 4} , {"title":"New Date Column", "type":"DATE", "index":4}, {"title": "New Picklist Column 2", "type": "PICKLIST", "options": ["1", "2", "3"], "index": 4}]'
```

```javascript
// Specify new columns.
var column = [
    {
        "title": "New Picklist Column 1",
        "type": "PICKLIST",
        "options": [
            "First",
            "Second",
            "Third"
        ],
        "index": 4
    },
    {
        "title": "New Date Column",
        "type": "DATE",
        "index": 5
    },
    {
        "title": "New Picklist Column 2",
        "type": "PICKLIST",
        "options":[
            "1",
            "2",
            "3"
        ],
        "index": 6
    }
];

// Set options.
var options = {
    body: column,
    sheetId: 2252168947361668
};

// Add columns to the sheet.
smartsheet.sheets.addColumn(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Create a column.
Column columnA = new Column.AddColumnBuilder("New Picklist Column 1", 4, ColumnType.PICKLIST).SetOptions(new string[] { "First", "Second", "Third" }).Build();

// Create another column.
Column columnB = new Column.AddColumnBuilder("New Date Column", 4, ColumnType.DATE).Build();

// Create a third column.
Column columnC = new Column.AddColumnBuilder("New Picklist Column 2", 4, ColumnType.PICKLIST).SetOptions(new string[] { "1", "2", "3" }).Build();

// Add columns to the sheet.
smartsheet.SheetResources.ColumnResources.AddColumns(sheetId, new Column[] { columnA, columnB, columnC });
```

```java
// Create columns.
Column column1 = new Column.AddColumnToSheetBuilder().setTitle("New Picklist Column 1").setType(ColumnType.PICKLIST).setIndex(4).setOptions(Arrays.asList("First", "Second", "Third")).build();

Column column2 = new Column.AddColumnToSheetBuilder().setTitle("New Date Column").setType(ColumnType.DATE).setIndex(4).build();

Column column3 = new Column.AddColumnToSheetBuilder().setTitle("New Picklist Column 2").setType(ColumnType.PICKLIST).setIndex(4).setOptions(Arrays.asList("1", "2", "3")).build();

// Add columns to the sheet.
smartsheet.sheetResources().columnResources().addColumns(sheetId(), Arrays.asList(column1, column2, column3));
```

```python
# Create the columns.
column1 = smartsheet.models.Column({
    'title': 'New Picklist Column 1',
    'type': 'PICKLIST',
    'options': [
        'First',
        'Second',
        'Third'
    ],
    'index': 4
})

column2 = smartsheet.models.Column({
    'title': 'New Date Column',
    'type': 'DATE',
    'index': 4
})

column3 = smartsheet.models.Column({
    'title': 'New Picklist Column 2',
    'type': 'PICKLIST',
    'options': ['1', '2', '3'],
    'index': 4
})

# Add columns to the sheet.
smartsheet.Sheets.add_columns(sheetId, [column1, column2, column3])
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": [
        {
            "id": 9007194052434043,
            "index": 4,
            "title": "New Picklist Column 1",
            "type": "PICKLIST",
            "options": [
                "First",
                "Second",
                "Third"
            ],
            "width": 150
        },
        {
            "id": 4503594425063547,
            "index": 4,
            "title": "New Date Column",
            "type": "DATE",
            "width": 150
        },
        {
            "id": 6755394238748795,
            "index": 4,
            "title": "New Picklist Column 2",
            "type": "PICKLIST",
            "options": [
                "1",
                "2",
                "3"
            ],
            "width": 150
        }
    ],
    "message": "SUCCESS"
}
```

`POST /sheets/{sheetId}/columns`

Inserts one or more columns into the Sheet specified in the URL.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<aside class="notice">If multiple columns are specified in the request, the <b>index</b> attribute must be set to the same value for all columns. Columns will be inserted into the sheet starting at the specified position (<b>index</b>), in the sequence that the columns appear in the request.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Column object](#column-object) or an array of Column objects, with the following attributes:<ul><li>title</li><li>type</li><li>symbol (optional)</li><li>options (optional)</li><li>index (zero-based)</li><li>systemColumnType (optional)</li><li>autoNumberFormat (optional)</li><li>width (optional)</li><li>locked (optional)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the the newly created column(s) -- either a single [Column object](#column-object) or an array of Column objects, corresponding to what was specified in the request.

## Delete Column

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns/{columnId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    columnId: 7881817631025028
};

// Delete column.
smartsheet.sheets.deleteColumn(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete column.
smartsheet.SheetResources.ColumnResources.DeleteColumn(sheetId, columnId);
```

```java
// Delete column.
smartsheet.sheetResources().columnResources().deleteColumn(sheetId, columnId);
```

```python
# Delete column.
smartsheet.Sheets.delete_column(sheetId, columnId)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /sheets/{sheetId}/columns/{columnId}`

Deletes the Column specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

## Get Column

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns/{columnId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    columnId: 7960873114331012
};

// Get column.
smartsheet.sheets.getColumns(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get column (omit 'include' parameter).
smartsheet.SheetResources.ColumnResources.GetColumn(sheetId, columnId, null);

// Get column (specify 'include' parameter with value of "filters").
smartsheet.SheetResources.ColumnResources.GetColumn(sheetId, columnId, new ColumnInclusion[] { ColumnInclusion.FILTERS });
```

```java
// Get column (omit 'include' parameter).
smartsheet.sheetResources().columnResources().getColumn(sheetId, columnId, null);

// Get column (specify 'include' parameter with value of "filters").
smartsheet.sheetResources().columnResources().getColumn(sheetId, columnId, EnumSet.of(ColumnInclusion.FILTERS));
```

```python
# Get column.
column = smartsheet.Sheets.get_column(sheetId, columnId)
```

> Example Response:

```json
{
	"id": 7960873114331012,
	"index": 2,
	"symbol": "STAR",
	"title": "Favorite",
	"type": "CHECKBOX"
}
```

`GET /sheets/{sheetId}/columns/{columnId}`

Gets the Column specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): when specified with a value of "filters", response will include the [filter](#filter-object) that the user has applied to the column (if any)
<%= RETURNS %> | [Column object](#column-object)

## Get All Columns

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668
};

// Get all columns.
smartsheet.sheets.getColumns(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get all columns (omit 'include' parameter and pagination parameters).
smartsheet.SheetResources.ColumnResources.ListColumns(sheetId, null, null);

// Get all columns (specify 'include' parameter with value of "filters" and 'includeAll' parameter with value of "true").
smartsheet.SheetResources.ColumnResources.ListColumns(sheetId, new ColumnInclusion[] { ColumnInclusion.FILTERS }, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'.
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// Get all columns (specify 'include' parameter with value of "filters" and 'includeAll' parameter with value of "true").
smartsheet.sheetResources().columnResources().listColumns(sheetId, EnumSet.of(ColumnInclusion.FILTERS), parameters);

// Get all columns (omit 'include' parameter and pagination parameters).
smartsheet.sheetResources().columnResources().listColumns(sheetId, null, null);
```

```python
# Get all columns.
action = smartsheet.Sheets.get_columns(sheetId, include_all=True)
columns = action.data

# Get paginated list of columns (100 columns per page).
action = smartsheet.Sheets.get_columns(sheetId)
pages = action.total_pages
columns = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 3,
	"data": [
		{
			"id": 7960873114331012,
			"index": 0,
			"symbol": "STAR",
			"title": "Favorite",
			"type": "CHECKBOX"
		},
		{
			"id": 642523719853956,
			"index": 1,
			"primary": true,
			"title": "Primary Column",
			"type": "TEXT_NUMBER"
		},
		{
			"id": 5146123347224452,
			"index": 2,
			"title": "Status",
			"type": "PICKLIST"
		}
	]
}
```

`GET /sheets/{sheetId}/columns`

Gets a list of all Columns belonging to the Sheet specified in the URL.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): when specified with a value of "filters", response will include the [filter](#filter-object) that the user has applied to each column (if any)<br/><br/><%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Column objects](#column-object)

## Update Column

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns/{columnId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X PUT \
-d '{"title":"First Column","index":0, "type" : "PICKLIST", "options" :["One","Two"]}'
```

```javascript
// Specify column properties.
var column = {
    "index": 0,
    "title": "First Column",
    "type": "PICKLIST",
    "options": ["One", "Two"]
};

// Set options.
var options = {
    body: column,
    sheetId: 2252168947361668,
    columnId: 5005385858869124
};

// Update column.
smartsheet.sheets.updateColumn(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify column properties.
Column column = new Column.UpdateColumnBuilder(columnId, "First Column", 0).SetType(ColumnType.PICKLIST).SetOptions(new string[] { "One", "Two" }).Build();

// Update column.
smartsheet.SheetResources.ColumnResources.UpdateColumn(sheetId, column);
```

```java
// Specify column properties.
Column column = new Column.UpdateColumnBuilder().setColumnId(columnId).setTitle("First Column").setIndex(0).setType(ColumnType.PICKLIST).setOptions(Arrays.asList("One", "Two")).build();

// Update column.
smartsheet.sheetResources().columnResources().updateColumn(sheetId, column);
```

```python
# Specify column properties.
altered_column = smartsheet.models.Column({
    'title': 'First Column',
    'type': 'PICKLIST',
    'options': ["One", "Two"],
    'index': 0
})

# Update column.
action = smartsheet.Sheets.update_column(sheetId, columnId, altered_column)
# action.result is an instance of smartsheet.models.Column
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "id": 5005385858869124,
        "index": 0,
        "options" : ["One", "Two"],
        "title": "First Column",
        "type": "PICKLIST"
    },
    "resultCode": 0
}
```

`PUT /sheets/{sheetId}/columns/{columnId}`

Updates properties of the column, moves the column, and/or renames the column.

**Notes:**

* You cannot change the type of a Primary column.
* While dependencies are enabled on a sheet, you can't change the type of any special calendar/Gantt columns.
* If the column type is changed, all cells in the column will be converted to the new column type.
* Type is optional when moving or renaming, but required when changing type or dropdown values.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | A [Column object](#column-object) that contains the following attributes:<ul><li>index (column's new index in the sheet)</li><li>title</li><li>type (optional)</li><li>options (optional)</li><li>symbol (optional)</li><li>systemColumnType (optional)</li><li>autoNumberFormat (optional)</li><li>width (optional)</li><li>format (optional)</li><li>locked (optional)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the [Column object](#column-object) that was modified

# Comments

A Comment is a component of a [Discussion](#discussions).  Each Discussion is composed of one or more Comments.

<aside class="notice">The operations in this section describe how to add, delete, or get an <i>individual comment</i>. To get <i>all comments</i> that exist within all discussions on a Sheet or on a Row, use one of the following operations:<ul><li><a href="#get-all-discussions">Get All Discussions</a></li><li><a href="#get-row-discussions">Get Row Discussions</a></li></ul></aside>

## <%= OBJECTS %>

### Comment Object

     |     |     |
-----|-----|-----|
**id** | number | Comment ID
**text** | string | Comment body
**createdBy** | [User](#user-object) | User object containing name and email of the Comment's author
**createdAt** | timestamp | Time of creation
**modifiedAt** | timestamp | Time of last modification
**attachments** | [Attachment](#attachment-object)[] | Array of Attachment objects
**discussionId** | number (optional) | Discussion ID

## Add Comment

> Example Request (without attachment):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId}/comments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"text":"This is a new comment."}'
```

```javascript
// Specify comment.
var comment = { "text": "This is a new comment." };

// Set options.
var options = {
    body: comment,
    sheetId: 2252168947361668,
    discussionId: 3962273862576004
};

// Add comment to discussion.
smartsheet.sheets.addDiscussionComment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Create comment.
Comment comment = new Comment.AddCommentBuilder("This is a new comment.").Build();

// Add comment to discussion.
smartsheet.SheetResources.DiscussionResources.CommentResources.AddComment(sheetId, discussionId, comment);
```

```java
// Create comment.
Comment comment = new Comment.AddCommentBuilder().setText("This is a new comment.").build();

// Add comment to discussion.
smartsheet.sheetResources().discussionResources().commentResources().addComment(sheetId, discussionId, comment);
```

```python
# Add comment to discussion.
action = smartsheet.Discussions.add_comment_to_discussion(
    sheetId,
    discussionId,
    smartsheet.models.Comment({
        'text': 'This is a new comment.'
    })
)
```

> Example Request (with attachment):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId}/comments \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X POST \
-F "comment=<comment.json;type=application/json" \
-F "file=@file_to_attach;type=application/octet-stream"

    #
    # Content of the comment.json file:
    #
    {
        "text":"This text is the body of the new comment"
    }
```

```javascript
// [todo]
```

```csharp
// Create comment.
Comment comment = new Comment.AddCommentBuilder("This is a new comment.").Build();

// Add comment (with attachment) to discussion.
smartsheet.SheetResources.DiscussionResources.CommentResources.AddCommentWithAttachment(sheetId, discussionId, comment, filePath, "application/octet-stream");
```

```java
// Create comment.
Comment comment = new Comment.AddCommentBuilder().setText("This is a new comment.").build();

// Add comment (with attachment) to discussion.
File file = new File(filePath);

smartsheet.sheetResources().discussionResources().commentResources().addCommentWithAttachment(sheetId, discussionId, comment, file, "application/octet-stream");
```

```python
# Create comment.
comment = smartsheet.models.Comment({
    'text': 'You might need this.'
})

# Add comment (with attachment) to discussion.
action = smartsheet.Discussions.add_comment_to_discussion_with_attachment(
    sheetId,
    discussionId,
    comment,
    ('image.png', open('/path/to/image.png', 'rb'), 'image/png')
)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "createdAt": "2013-02-28T22:58:30-08:00",
        "createdBy": {
            "email": "john.doe@smartsheet.com",
            "name": "John Doe"
        },
        "id": 6834973207488388,
        "modifiedAt": "2013-02-28T22:58:30-08:00",
        "text": "This is a new comment."
    },
    "resultCode": 0
}
```

`POST /sheets/{sheetId}/discussions/{discussionId}/comments`

Adds a Comment to a Discussion.

<aside class="notice">This operation supports multipart requests. Using a multipart request allows you to create a new Comment and upload a file to that Comment in a single step (i.e., using a single request). For more information, see <a href="#multipart-uploads">Multipart Uploads</a>.</aside>

<br/><br/>
**Creating a Comment without an Attachment:**

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Comment object](#comment-object) with the following attribute:<ul><li>text</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing [Comment object](#comment-object) that was created

<br/><br/>
**Creating a Comment with an Attachment:**

<%= partial "snippets/createCommentMultipart_table.md.erb" %>

## Delete Comment

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId} \
-H "Authorization: Bearer ACCESS_TOKEN"\
-X 'DELETE'
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    commentId: 4952999001909124
};

// Delete comment.
smartsheet.sheets.deleteComment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete comment.
smartsheet.SheetResources.CommentResources.DeleteComment(sheetId, commentId);
```

```java
// Delete comment.
smartsheet.sheetResources().commentResources().deleteComment(sheetId, commentId);
```

```python
# Delete comment.
smartsheet.Discussions.delete_discussion_comment(sheetId, commentId)
```

> Example Response:

```json
{
   "resultCode": 0,
   "message" : "SUCCESS"
}
```

`DELETE /sheets/{sheetId}/comments/{commentId}`

Deletes the Comment specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

## Get Comment

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{id} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    commentId: 48569348493401200
};

// Get comment.
smartsheet.sheets.getComment(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get comment.
smartsheet.SheetResources.CommentResources.GetComment(sheetId, commentId);
```

```java
// Get comment.
smartsheet.sheetResources().commentResources().getComment(sheetId, commentId);
```

```python
# Get comment.
comment = smartsheet.Discussions.get_discussion_comment(sheetId, commendId)
```

> Example Response:

```json
{
    "text": "This is a comment",
    "createdBy" : {"name": "John Doe", "email" : "john.doe@smartsheet.com"},
    "createdAt" : "2013-06-24T21:07:45Z",
    "modifiedAt" : "2013-06-24T21:07:45Z",
    "discussionId" : 48569348493469348,
    "id": 48569348493401200
}
```

`GET /sheets/{sheetId}/comments/{commentId}`

Gets the Comment specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Comment object](#comment-object)

## <%= RELATED %>

A Comment can contain one or more Attachments.

### Comment Attachments

For details about working with a Comment's attachments, see [Attachments](#attachments).

# Contacts

A Contact is a user's personal contact in Smartsheet (as described [here](http://help.smartsheet.com/customer/portal/articles/796143-managing-contacts)).

## <%= OBJECTS %>

### Contact Object

     |     |     |
-----|-----|-----|
**id** | string | Contact ID
**name** | string | Contact's full name
**email** | string | Contact's email address

## Get Contact

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/contacts/{contactId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```csharp
// Get contact.
smartsheet.ContactResources.GetContact(contactId);
```

```java
// Get contact.
smartsheet.contactResources().getContact(contactId);
```

```python
# Get contact.
contact = smartsheet.Contacts.get_contact(contactId)
```

> Example Response:

```json
{
    "id": "AAAAATYU54QAD7_fNhTnhA",
    "name": "David Davidson",
    "email": "dd@example.com"
}
```

`GET /contacts/{contactId}`

Gets the specified Contact.

     |     |
-----|-----|
<%= SCOPE %> | READ_CONTACTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Contact object](#contact-object)

## List Contacts

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/contacts \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```csharp
// List contacts (omit pagination parameters).
smartsheet.ContactResources.ListContacts(null);

// List contacts (specify 'includeAll' parameter with value of "true").
smartsheet.ContactResources.ListContacts(new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List contacts (specify 'includeAll' parameter with value of "true").
smartsheet.contactResources().listContacts(parameters);

// List contacts (omit pagination parameters).
smartsheet.contactResources().listContacts(null);
```

```python
# Get all contacts.
action = smartsheet.Contacts.list_contacts(include_all=True)
contacts = action.data

# Get paginated list of contacts (100 contacts per page).
action = smartsheet.Contacts.list_contacts()
pages = action.total_pages
contacts = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 2,
    "data": [
        {
            "id": "AAAAATYU54QAD7_fNhTnhA",
            "name": "David Davidson",
            "email": "dd@example.com"
        },
        {
            "id": "AAAAATYU54QAH7_fNhTnhA",
            "name": "Ed Edwin",
            "email": "ee@example.com"
        }
    ]
}
```

`GET /contacts`

Gets a list of the user's Smartsheet Contacts.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_CONTACTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Contact objects](#contact-object)


# Discussions

A Discussion is a collection of one or more [Comments](#comments). A Discussion can exist on a [Row](#rows) or a [Sheet](#sheets).

## <%= OBJECTS %>

### Discussion Object

     |     |     |
-----|-----|-----|
**id** | number | Discussion ID
**title** | string | Discussion title
**comments** | [Comment](#comment-object)[] | Array of Comment objects
**commentAttachments** | [Attachment](#attachment-object)[] | Array of Attachment objects
**parentId** | number | ID of the directly associated row or sheet: present only when the direct association is not clear (see [Get All Discussions](#get-all-discussions))
**parentType** | string | "SHEET" or "ROW": present only when the direct association is not clear (see [Get All Discussions](#get-all-discussions))
**lastCommentedAt** | timestamp | Time of most recent comment
**lastCommentedUser** | [User](#user-object) | User object containing name and email of the author of the most recent Comment
**createdBy** | [User](#user-object) | User object containing name and email of the creator of the Discussion
**accessLevel** | string | User's permissions on the Discussion
**readOnly** | boolean | Flag to indicate if the User can modify the Discussion

## Create Discussion on Row

> Example Request (without attachment):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/discussions \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"title": "This is a new discussion", "comment": {"text":"This text is the body of the first comment"}}'
```

```javascript
// Specify discussion.
var discussion = {
    "title": "This is a new discussion",
    "comment": {
        "text": "This text is the body of the first comment"
    }
};

// Set options.
var options = {
    body: discussion,
    sheetId: 2252168947361668,
    rowId: 4293147074291588
};

// Add discussion to row.
smartsheet.sheets.createRowDiscussion(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Create comment.
Comment comment = new Comment.AddCommentBuilder("This text is the body of the first comment").Build();

// Create discussion (including the comment).
Discussion discussion = new Discussion.CreateDiscussionBuilder("This is a new discussion", comment).Build();

// Add discussion to row.
smartsheet.SheetResources.RowResources.DiscussionResources.CreateDiscussion(sheetId, rowId, discussion);
```

```java
// Create comment.
Comment comment = new Comment.AddCommentBuilder().setText("This text is the body of the first comment").build();

// Create discussion (including the comment).
Discussion discussion = new Discussion.CreateDiscussionBuilder().setTitle("This is a new discussion").setComment(comment).build();

// Add discussion to row.
smartsheet.sheetResources().rowResources().discussionResources().createDiscussion(sheetId, rowId, discussion);
```

```python
# Add discussion to row.
action = smartsheet.Discussions.create_discussion_on_row(
    sheetId,
    rowId,
    smartsheet.models.Discussion({
        'title': 'This is a new discussion',
        'comment': smartsheet.models.Comment({
            'text': 'This text is the body of the first comment'
        })
    })
)
```

> Example Request (with attachment):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/discussions \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-F "discussion=<discussion.json;type=application/json" \
-F "file=@datafile;type=application/octet-stream"

    #
    # Content of the discussion.json file:
    #
    {
        "title": "This is a new discussion with an attachment", 
        "comment": {
            "text":"This text is the body of the first comment"
        }
    }
```

```javascript
// [todo]
```

```csharp
// Create comment.
Comment comment = new Comment.AddCommentBuilder("This text is the body of the first comment").Build();

// Create discussion (including the comment).
Discussion discussion = new Discussion.CreateDiscussionBuilder("This is a new discussion", comment).Build();

// Add discussion to row.
smartsheet.SheetResources.RowResources.DiscussionResources.CreateDiscussionWithAttachment(sheetId, rowId, discussion, filePath, "application/octet-stream");
```

```java
// Create comment.
Comment comment = new Comment.AddCommentBuilder().setText("This text is the body of the first comment").build();

// Create discussion (including the comment).
Discussion discussion = new Discussion.CreateDiscussionBuilder().setTitle("This is a new discussion").setComment(comment).build();

// Set file path
File file = new File(filePath);

// Add discussion to row.
smartsheet.sheetResources().rowResources().discussionResources().createDiscussionWithAttachment(sheetId, rowId, discussion, file, "application/octet-stream");
```

```python
# Add discussion to row.
action = smartsheet.Discussions.create_discussion_on_row_with_attachment(
    sheetId,
    rowId,
    smartsheet.models.Discussion({
        'title': 'This is a new discussion',
        'comment': smartsheet.models.Comment({
            'text': 'This text is the body of the first comment'
        })
    }),
    ('photo.jpg', open('/path/to/photo.jpg', 'rb'), 'image/jpeg')
)
```

> Example Response:

<%= partial "snippets/createDiscussion_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/discussions`

Creates a new Discussion on a Row.

<aside class="notice">This operation supports multipart requests. Using a multipart request allows you to create a new Discussion and upload a file to the first Comment within that Discussion in a single step (i.e., using a single request). For more information, see <a href="#multipart-uploads">Multipart Uploads</a>.</aside>

<br/>
**Creating a Discussion without an Attachment:**
<%= partial "snippets/createDiscussion_table.md.erb" %>
<br/>
**Creating a Discussion with an Attachment:**
<%= partial "snippets/createDiscussionMultipart_table.md.erb" %>

## Create Discussion on Sheet

> Example Request (without attachment):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"title": "This is a new discussion", "comment": {"text":"This text is the body of the first comment"}}'
```

```javascript
// Specify discussion.
var discussion = {
    "title": "This is a new discussion",
    "comment": {
        "text": "This text is the body of the first comment"
    }
};

// Set options.
var options = {
    body: discussion,
    sheetId: 2252168947361668
};

// Add discussion to sheet.
smartsheet.sheets.createDiscussion(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Create comment.
Comment comment = new Comment.AddCommentBuilder("This text is the body of the first comment").Build();

// Create discussion (including the comment).
Discussion discussion = new Discussion.CreateDiscussionBuilder("This is a new discussion", comment).Build();

// Add discussion to sheet.
smartsheet.SheetResources.DiscussionResources.CreateDiscussion(sheetId, discussion);
```

```java
// Create comment.
Comment comment = new Comment.AddCommentBuilder().setText("This text is the body of the first comment").build();

// Create discussion (including the comment).
Discussion discussion = new Discussion.CreateDiscussionBuilder().setTitle("This is a new discussion").setComment(comment).build();

// Add discussion to sheet.
smartsheet.sheetResources().rowResources().discussionResources().createDiscussion(sheetId, rowId, discussion);
```

```python
# Add discussion to sheet.
action = smartsheet.Discussions.create_discussion_on_sheet(
    sheetId,
    smartsheet.models.Discussion({
        'title': 'This is a new discussion',
        'comment': smartsheet.models.Comment({
            'text': 'This text is the body of the first comment'
        })
    })
)
```


> Example Request (with attachment):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X POST \
-F "discussion=<discussion.json;type=application/json" \
-F "file=@file_to_attach;type=application/octet-stream"

    #
    # Content of the discussion.json file:
    #
    {
        "title": "This is a new discussion with an attachment", 
        "comment": {
            "text":"This text is the body of the first comment"
        }
    }
```

```javascript
// [todo]
```

```csharp
// Create comment.
Comment comment = new Comment.AddCommentBuilder("This text is the body of the first comment").Build();

// Create discussion (including the comment).
Discussion discussion = new Discussion.CreateDiscussionBuilder("This is a new discussion with an attachment", comment).Build();

// Add discussion (including comment with attachment) to sheet.
smartsheet.SheetResources.DiscussionResources.CreateDiscussionWithAttachment(sheetId, discussion, filePath, "application/octet-stream");
```

```java
// Create comment.
Comment comment = new Comment.AddCommentBuilder().setText("This text is the body of the first comment").build();

// Create discussion (including the comment).
Discussion discussion = new Discussion.CreateDiscussionBuilder().setTitle("This is a new discussion").setComment(comment).build();
File file = new File(filePath);

// Add discussion (including comment with attachment) to sheet.
smartsheet.sheetResources().discussionResources().createDiscussionWithAttachment(sheetId, discussion, file, "application/octet-stream");
```

```python
# Add discussion to sheet.
action = smartsheet.Discussions.create_discussion_on_sheet_with_attachment(
    sheetId,
    smartsheet.models.Discussion({
        'title': 'This is a new discussion',
        'comment': smartsheet.models.Comment({
            'text': 'This text is the body of the first comment'
        })
    }),
    ('photo.jpg', open('/path/to/photo.jpg', 'rb'), 'image/jpeg')
)
```

> Example Response:

<%= partial "snippets/createDiscussion_response.md.erb" %>

`POST /sheets/{sheetId}/discussions`

Creates a new Discussion on a Sheet.

<aside class="notice">This operation supports multipart requests. Using a multipart request allows you to create a new Discussion and upload a file to the first Comment within that Discussion in a single step (i.e., using a single request). For more information, see <a href="#multipart-uploads">Multipart Uploads</a>.</aside>

<br/>
**Creating a Discussion without an Attachment:**
<%= partial "snippets/createDiscussion_table.md.erb" %>

<br/>
**Creating a Discussion with an Attachment:**
<%= partial "snippets/createDiscussionMultipart_table.md.erb" %>

## Delete Discussion

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId} \
-H "Authorization: Bearer ACCESS_TOKEN"\
-X 'DELETE'
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    discussionId: 991393444325252
};

// Delete discussion.
smartsheet.sheets.deleteDiscussion(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete discussion.
smartsheet.SheetResources.DiscussionResources.DeleteDiscussion(sheetId, discussionId);
```

```java
// Delete discussion.
smartsheet.sheetResources().discussionResources().deleteDiscussion(sheetId, discussionId);
```

```python
# Delete discussion.
action = smartsheet.Discussions.delete_discussion(sheetId, discussionId)
```

> Example Response:

```json
{
   "resultCode": 0,
   "message" : "SUCCESS"
}
```

`DELETE /sheets/{sheetId}/discussions/{discussionId}`

Deletes the Discussion specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

## Get All Discussions

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions?include=comments,attachments \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript 
// Set options.
var options = {
    sheetId: 3138415114905476
};

// Get all discussions.
smartsheet.sheets.getDiscussions(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get all discussions (omit 'include' parameter and pagination parameters).
smartsheet.SheetResources.DiscussionResources.ListDiscussions(sheetId, null, null);

// Get all discussions (specify 'include' parameter with values of 'comments' and 'attachments', and 'includeAll' parameter with value of "true").
smartsheet.SheetResources.DiscussionResources.ListDiscussions(sheetId, new DiscussionInclusion[] { DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS }, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// Get all discussions (specify 'include' parameter with values of 'comments' and 'attachments', and 'includeAll' parameter with value of "true").
smartsheet.sheetResources().discussionResources().listDiscussions(sheetId, parameters, EnumSet.of(DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS));

// Get all discussions (omit 'include' parameter and pagination parameters).
smartsheet.sheetResources().discussionResources().listDiscussions(sheetId, null, null);
```

```python
# Get all discussions.
action = smartsheet.Discussions.get_all_discussions(sheetId, include_all=True)
discussions = action.data

# Get paginated list of discussions.
action = smartsheet.Discussions.get_all_discussions(sheetId, page_size=10, page=1)
pages = action.total_pages
discussions = action.data
```
> Example Response:

<%= partial "snippets/getDiscussions_response.md.erb" %>

`GET /sheets/{sheetId}/discussions`

Gets a list of all Discussions associated with the specified Sheet (both sheet-level discussions and row-level discussions).

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/getDiscussions_table.md.erb" %>

## Get Discussion

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    discussionId: 2331373580117892
};

// Get discussion.
smartsheet.sheets.getDiscussions(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get discussion.
smartsheet.SheetResources.DiscussionResources.GetDiscussion(sheetId, discussionId);
```

```java
// Get discussion.
smartsheet.sheetResources().discussionResources().getDiscussion(sheetId, discussionId);
```

```python
# Get discussion.
discussion = smartsheet.Discussions.get_discussion(sheetId, discussionId)
# discussion is an instance of smartsheet.models.Discussion
```

> Example Response:

```json
{
    "title": "This is a new discussion",
    "id": 2331373580117892,
    "comments": [
        {
            "id": 2331373580117892,
            "text": "This text is the body of the discussion",
            "createdBy": {
                "email": "john.doe@smartsheet.com"
            },
            "modifiedAt": "2012-07-25T00:02:42-07:00"
        }
    ]
}
```

`GET /sheets/{sheetId}/discussions/{discussionId}`

Gets the Discussion specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Discussion object](#discussion-object)

## Get Row Discussions

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/discussions?include=comments,attachments \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    rowId: 4293147074291588
};

// Get row discussions.
smartsheet.sheets.getRowDiscussions(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get row discussions (omit 'include' parameter and pagination parameters).
smartsheet.SheetResources.RowResources.DiscussionResources.ListDiscussions(sheetId, rowId, null, null);

// Get row discussions (specify 'include' parameter with values of 'comments' and 'attachments', and 'includeAll' parameter with value of "true").
smartsheet.SheetResources.RowResources.DiscussionResources.ListDiscussions(sheetId, rowId, new DiscussionInclusion[] { DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS }, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// Get row discussions (specify 'include' parameter with values of 'comments' and 'attachments', and 'includeAll' parameter with value of "true").
smartsheet.sheetResources().rowResources().discussionResources().listDiscussions(sheetId, rowId, parameters, EnumSet.of(DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS));

// Get row discussions (omit 'include' parameter and pagination parameters).
smartsheet.sheetResources().rowResources().discussionResources().listDiscussions(sheetId, rowId, null, null);
```

```python
# Get row discussions.
action = smartsheet.Discussions.get_row_discussions(sheetId, rowId, include_all=True)
discussions = action.data

# Get paginated list of row discussions.
action = smartsheet.Discussions.get_row_discussions(sheetId, rowId, page_size=10)
pages = action.total_pages # starts on page 1 by default
discussions = action.data
```

> Example Response:

<%= partial "snippets/getDiscussions_response.md.erb" %>

`GET /sheets/{sheetId}/rows/{rowId}/discussions`

Gets a list of all Discussions associated with the specified Row.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/getDiscussions_table.md.erb" %>

## <%= RELATED %>

A Discussion is a collection of one or more Comments, each of which may contain Attachments.

### Discussion Attachments

For details about working with the attachments within a Discussion, see [Attachments](#attachments).

### Discussion Comments

For details about working with a Discussion's comments, see [Comments](#comments).

# Favorites

Smartsheet allows users to "star" sheets, reports, folders, workspaces, Sight, and other objects on their Home tab to mark them as favorites. 
These API operations allow you to access the user's favorite API-supported objects, as well as create and delete favorites.

## <%= OBJECTS %>

### Favorite Object

     |     |     |
-----|-----|-----|
**type** | string | One of:<ul><li>workspace</li><li>folder</li><li>sheet</li><li>report</li><li>template</li><li>Sight</li></ul>
**objectId** | number | ID of the favorited item.  If **type** is "template", only private sheet-type template ID is allowed.

## Add Favorite(s)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"type": "sheet", "objectId": 8400677765441412}]'
```

```javascript 
// Specify favorite(s).
var favorites = [
	{
    	"type": "sheet",
    	"objectId": 8400677765441412
	}
];

// Set options.
var options = {
    body: favorites
};

// Add item(s) to favorites.
smartsheet.favorites.addItemsToFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify favorite(s).
Favorite[] favorites = new Favorite[] { new Favorite.AddFavoriteBuilder(ObjectType.SHEET, objectId).Build() };

// Add item(s) to favorites.
smartsheet.FavoriteResources.AddFavorites(favorites);
```

```java
// Specify favorite(s).
List<Favorite> favorites = new Favorite.AddFavoriteBuilder().addFavorite(sheetId, FavoriteType.SHEET).build();

// Add item(s) to favorites.
smartsheet.favoriteResources().addFavorites(favorites);
```

```python
# Add sheet to Favorites.
action = smartsheet.Favorites.add_favorites([
    smartsheet.models.Favorite({
        'type': 'sheet',
        'object_id': 8400677765441412
    })
])
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": [
        {
            "type": "sheet",
            "objectId": 8400677765441412
        }
    ],
    "message": "SUCCESS"
}
```

`POST /favorites`

Adds one or more items to the user's list of Favorite items.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

If called with a single [Favorite object](#favorite-object), and that favorite already exists, [error code](#errors) **1129** will be returned.  If called with an array of [Favorite objects](#favorite-object), any objects specified in the array that are already marked as favorites will be ignored and omitted from the response.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Favorite object](#favorite-object) or an array of Favorite objects, with the following attributes:<ul><li>type</li><li>objectId</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing object(s) that were marked as favorites -- either a single [Favorite object](#favorite-object) or an array of Favorite objects, corresponding to what was specified in the request.

## List Favorites

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// List favorites.
smartsheet.favorites.listFavorites()
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List favorites (omit pagination parameters).
smartsheet.FavoriteResources.ListFavorites(null);

// List favorites (specify 'includeAll' parameter with value of "true").
smartsheet.FavoriteResources.ListFavorites(new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List favorites (specify 'includeAll' parameter with value of "true").
smartsheet.favoriteResources().listFavorites(parameters);

// List favorites (omit pagination parameters).
smartsheet.favoriteResources().listFavorites(null);
```

```python
# Get all favorites.
action = smartsheet.Favorites.list_favorites(include_all=True)
favs = action.data

# Get paginated list of favorites.
action = smartsheet.Favorites.list_favorites(page_size=10, page=1)
pages = action.total_pages
favs = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 2,
	"data": [
		{
			"type": "sheet",
			"objectId": 5897312590423940
		},
		{
			"type": "folder",
			"objectId": 1493728255862660
		}
	]
}
```

`GET /favorites`

Gets a list of all of the user's Favorite items.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Favorite objects](#favorite-object)

## Remove Favorite

### Remove Favorite Sight

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/sights/{sightId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /favorites/sights/{sightId}`

Removes a single Sight from the user's list of Favorite items.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

### Remove Favorite Folder

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/folder/{folderId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    objectId: 2252168947361668
};

// Remove folder from list of favorites.
smartsheet.favorites.removeFolderFromFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Remove folder from list of favorites.
smartsheet.FavoriteResources.RemoveFavorites(ObjectType.FOLDER, new long[] { folderId });
```

```java
// Remove folder from list of favorites.
smartsheet.favoriteResources().removeFavorites(FavoriteType.FOLDER, new HashSet(Arrays.asList(folderId)));
```

```python
# Remove folder from list of favorites.
action = smartsheet.Favorites.remove_favorites(
    'folder', 
    folderId
)
```

> Example Response:

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/folder/{folderId}`

Removes a single Folder from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Report

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/report/{reportId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    objectId: 2252168947361668
};

// Remove report from list of favorites.
smartsheet.favorites.removeReportFromFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Remove report from list of favorites.
smartsheet.FavoriteResources.RemoveFavorites(ObjectType.REPORT, new long[] { reportId });
```

```java
// Remove report from list of favorites.
smartsheet.favoriteResources().removeFavorites(FavoriteType.REPORT, new HashSet(Arrays.asList(reportId)));
```

```python
# Remove report from list of favorites.
action = smartsheet.Favorites.remove_favorites(
    'report', 
    reportId
)
```

> Example Response:

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/report/{reportId}`

Removes a single Report from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Sheet

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/sheet/{sheetId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    objectId: 2252168947361668
};

// Remove sheet from list of favorites.
smartsheet.favorites.removeSheetFromFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });	
```
```csharp
// Remove sheet from list of favorites.
smartsheet.FavoriteResources.RemoveFavorites(ObjectType.SHEET, new long[] { sheetId });
```

```java
// Remove sheet from list of favorites.
smartsheet.favoriteResources().removeFavorites(FavoriteType.SHEET, new HashSet(Arrays.asList(sheetId)));
```

```python
# Remove sheet from list of favorites.
action = smartsheet.Favorites.remove_favorites(
    'sheet', 
    sheetId
)
```

> Example Response:

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/sheet/{sheetId}`

Removes a single Sheet from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Template

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/template/{templateId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    objectId: 2252168947361668
};

// Remove template from list of favorites.
smartsheet.favorites.removeTemplateFromFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Remove template from list of favorites.
smartsheet.FavoriteResources.RemoveFavorites(ObjectType.TEMPLATE, new long[] { templateId });
```

```java
// Remove template from list of favorites.
smartsheet.favoriteResources().removeFavorites(FavoriteType.TEMPLATE, new HashSet(Arrays.asList(templateId)));
```

```python
# Remove template from list of favorites.
action = smartsheet.Favorites.remove_favorites(
    'template', 
    templateId
)
```

> Example Response:

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/template/{templateId}`

Removes a single Template from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Workspace

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/workspace/{workspaceId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    objectId: 2252168947361668
};

// Remove workspace from list of favorites.
smartsheet.favorites.removeWorkspaceFromFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Remove workspace from list of favorites.
smartsheet.FavoriteResources.RemoveFavorites(ObjectType.WORKSPACE, new long[] { workspaceId });
```

```java
// Remove workspace from list of favorites.
smartsheet.favoriteResources().removeFavorites(FavoriteType.WORKSPACE, new HashSet(Arrays.asList(workspaceId)));
```

```python
# Remove workspace from list of favorites.
action = smartsheet.Favorites.remove_favorites(
    'workspace', 
    workspaceId
)
```


> Example Response:

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/workspace/{workspaceId}`

Removes a single Workspace from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

## Remove Favorites (in bulk)

### Remove Favorite Sights

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/sights?objectIds={folderId1},{folderId2} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/sights`

Removes multiple Sights from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Favorite Folders

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/folder?objectIds={folderId1},{folderId2} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    queryParameters: {
        objectIds: "2252168947361668, 2252168947361669"
    }
};

// Remove folders from list of favorites.
smartsheet.favorites.removeFoldersFromFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Remove folders from list of favorites.
smartsheet.FavoriteResources.RemoveFavorites(ObjectType.FOLDER, new long[] { folderId, folderId2 });
```

```java
// Remove folders from list of favorites.
smartsheet.favoriteResources().removeFavorites(FavoriteType.FOLDER, new HashSet(Arrays.asList(folderId1, folderId2)));
```

```python
# Remove folders from list of favorites.
action = smartsheet.Favorites.remove_favorites(
    'folder', 
    [folderId1, folderId2]
)
```

> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/folder`

Removes multiple Folders from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Favorite Reports

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/report?objectIds={reportId1},{reportId2} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    queryParameters: {
        objectIds: "2252168947361668, 2252168947361669"
    }
};

// Remove reports from list of favorites.
smartsheet.favorites.removeReportsFromFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Remove reports from list of favorites.
smartsheet.FavoriteResources.RemoveFavorites(ObjectType.REPORT, new long[] { reportId1, reportId2 });
```

```java
// Remove reports from list of favorites.
smartsheet.favoriteResources().removeFavorites(FavoriteType.REPORT, new HashSet(Arrays.asList(reportId1, reportId2)));
```

```python
# Remove reports from list of favorites.
action = smartsheet.Favorites.remove_favorites(
    'report', 
    [reportId1, reportId2]
)
```

> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/report`

Removes multiple Reports from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Favorite Sheets

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/sheet?objectIds={sheetId1},{sheetId2} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    queryParameters: {
        objectIds: "2252168947361668, 2252168947361669"
    }
};

// Remove sheets from list of favorites.
smartsheet.favorites.removeSheetsFromFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Remove sheets from list of favorites.
smartsheet.FavoriteResources.RemoveFavorites(ObjectType.SHEET, new long[] { sheetId1, sheetId2 });
```

```java
// Remove sheets from list of favorites.
smartsheet.favoriteResources().removeFavorites(FavoriteType.SHEET, new HashSet(Arrays.asList(sheetId1, sheetId2)));
```

```python
# Remove sheets from list of favorites.
action = smartsheet.Favorites.remove_favorites(
    'sheet', 
    [sheetId1, sheetId2]
)
```

> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/sheet`

Removes multiple Sheets from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Favorite Templates

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/template?objectIds={templateId1},{templateId2} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    queryParameters: {
        objectIds: "2252168947361668, 2252168947361669"
    }
};

// Remove templates from list of favorites.
smartsheet.favorites.removeTemplatesFromFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Remove templates from list of favorites.
smartsheet.FavoriteResources.RemoveFavorites(ObjectType.TEMPLATE, new long[] { templateId1, templateId2 });
```

```java
// Remove templates from list of favorites.
smartsheet.favoriteResources().removeFavorites(FavoriteType.TEMPLATE, new HashSet(Arrays.asList(templateId1, templateId2)));
```

```python
# Remove templates from list of favorites.
action = smartsheet.Favorites.remove_favorites(
    'template', 
    [templateId1, templateId2]
)
```

> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/template`

Removes multiple Templates from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Favorite Workspaces

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/favorites/workspace?objectIds={workspaceId1},{workspaceId2} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    queryParameters: {
        objectIds: "2252168947361668, 2252168947361669"
    }
};

// Remove workspaces from list of favorites.
smartsheet.favorites.removeWorkspacesFromFavorites(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Remove workspaces from list of favorites.
smartsheet.FavoriteResources.RemoveFavorites(ObjectType.WORKSPACE, new long[] { workspaceId1, workspaceId2 });
```

```java
// Remove workspaces from list of favorites.
smartsheet.favoriteResources().removeFavorites(FavoriteType.WORKSPACE, new HashSet(Arrays.asList(workspaceId1, workspaceId2)));
```

```python
# Remove workspaces from list of favorites.
action = smartsheet.Favorites.remove_favorites(
    'workspace', 
    [workspaceId1, workspaceId2]
)
```

> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/workspace`

Removes multiple Workspaces from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

# Folders

A Folder can exist in a user's **Sheets** folder ([Home](#home)), in a [Folder](#folders), or in a [Workspace](#workspaces).

## <%= OBJECTS %>

### Folder Object

     |     |     |
-----|-----|-----|
**id** | number | Folder ID
**name** | string | Folder name
**favorite** | boolean | Returned only if the user has marked the Folder as a Favorite in their Home tab (value = "true")
**permalink** | string | URL that represents a direct link to the Folder in Smartsheet
**sheets** | [Sheet](#sheet-object)[] | Array of Sheet objects
**folders** | [Folder](#folder-object)[] | Array of Folder objects
**reports** | [Report](#report-object)[] | Array of Report objects
**templates** | [Template](#template-object)[] | Array of Template objects

## Copy Folder

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId}/copy?include=all \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-d '{ \
    "destinationType": "folder", \
    "destinationId": 7960873114331012, \
    "newName": "newFolderName" \
}' \
-X POST
```

```csharp
// Specify destination.
ContainerDestination destination = new ContainerDestination
{
	DestinationId = destinationFolderId,
	DestinationType = DestinationType.FOLDER,
	NewName = "newFolderName"
};

// Copy folder (omit 'include' and 'skipRemap' parameters).
smartsheet.FolderResources.CopyFolder(folderId, destination, null, null);

// Copy folder (specify 'include' parameter with value of "all", and 'skipRemap' parameter with value of "cellLinks").
smartsheet.FolderResources.CopyFolder(folderId, destination, new FolderCopyInclusion[] { FolderCopyInclusion.ALL }, new FolderRemapExclusion[] { FolderRemapExclusion.CELL_LINKS });
```


```java
// Specify destination.
ContainerDestination destination = new ContainerDestination.AddContainerDestinationBuilder()
		.setDestinationType(DestinationType.FOLDER)
		.setDestinationId(destinationFolderId)
		.setNewName("newFolderName")
		.build();

// Copy folder (omit 'include' and 'skipRemap' parameters).
smartsheet.folderResources().copyFolder(folderId, destination, null, null);

// Copy folder (specify 'include' parameter with value of "all", and 'skipRemap' parameter with value of "cellLinks").
smartsheet.folderResources().copyFolder(folderId, destination, EnumSet.of(FolderCopyInclusion.ALL), EnumSet.of(FolderRemapExclusion.CELLLINKS));
```

```python
# Copy folder to another folder.
action = smartsheet.Folders.copy_folder(
    folderId,
    smartsheet.models.ContainerDestination({
        'destination_id': destinationId,
        'destination_type': 'folder',
        'new_name': 'newFolderName'
    })
)
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": {
        "id": 7116448184199044,
        "name": "newFolderName",
        "permalink": "https://{base_url}?lx=lB0JaOh6AX1wGwqxsQIMaA"
    },
    "message": "SUCCESS"
}
```

`POST /folders/{folderId}/copy`

Creates a copy of the specified Folder.

     |     |    
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of elements to copy:<ul><li>data</li><li>attachments</li><li>discussions</li><li>cellLinks</li><li>forms</li><li>**all** - specify a value of "all" to include everything (data, attachments, discussions, cellLinks, and forms)</li></ul><i>Note</i>: Cell history will not be copied, regardless of which **include** parameter values are specified.
 | **skipRemap** (optional) --  -- comma-separated list of references to NOT re-map for the newly created folder:<ul><li>cellLinks</li><li>reports</li><li>sheetHyperlinks</li><li>sights</li></ul>By default, all cell links, reports, sheet hyperlinks, and sights that reference objects in the source folder will be re-mapped to reference corresponding objects in the newly created folder. The **skipRemap** parameter can be specified to change that default behavior:<ul><li>If "cellLinks" is specified in the <b>skipRemap</b> parameter value, the cell links within the newly created folder will continue to point to the original source sheets.</li><li>If "reports" is specified in the <b>skipRemap</b> parameter value, the reports within the newly created folder will continue to point to the original source sheets.</li><li>If "sheetHyperlinks" is specified in the <b>skipRemap</b> parameter value, the sheet hyperlinks within the newly created folder will continue to point to the original source sheets.</li><li>If "sights" is specified in the <b>skipRemap</b> parameter value, the widgets within sights in the newly created folder will continue to point to the original source sheets / reports.</li></ul>
<%= REQUEST %> | [ContainerDestination object](#containerdestination-object)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Folder object](#folder-object) for the newly created Folder

## Create Child Folder

A Folder can be created in the user's **Sheets** folder ([Home](#home)), in another Folder, or in a Workspace.

### Create Folder

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/home/folders \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name": "New folder"}'
```

```javascript
// Set folder name.
var folder = {
    "name": "New folder"
};

// Set options.
var options = {
    body: folder
};

// Create folder in "Sheets" folder (Home).
smartsheet.home.createFolder(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Set folder name.
Folder folder = new Folder.CreateFolderBuilder("New folder").Build();

// Create folder in "Sheets" folder (Home).
smartsheet.HomeResources.FolderResources.CreateFolder(folder);
```

```java
// Set folder name.
Folder folder = new Folder.CreateFolderBuilder().setName("New Folder").build();

// Create folder in "Sheets" folder (Home).
smartsheet.homeResources().folderResources().createFolder(folder);
```

```python
# Create folder in "Sheets" folder (Home).
smartsheet.Home.create_folder('New Folder')
```

> Example Response:

<%= partial "snippets/createFolder_response.md.erb" %>

`POST /home/folders`

Creates a Folder in the user's **Sheets** folder ([Home](#home)). 

<%= partial "snippets/createFolder_table.md.erb" %>

### Create Folder (Folder)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/folders/{folderid}/folders \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name": "New folder"}'
```

```javascript
// Set folder name.
var folder = {
    "name": "New folder"
};

// Set options.
var options = {
    body: folder,
    folderId: 7960873114331012
};

// Create folder in another folder.
smartsheet.folders.createChildFolder(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Set folder name.
Folder folder = new Folder.CreateFolderBuilder("New folder").Build();

// Create folder in another folder.
smartsheet.FolderResources.CreateFolder(destinationFolderId, folder);
```

```java
// Set folder name.
Folder folder = new Folder.CreateFolderBuilder().setName("New Folder").build();

// Create folder in another folder.
smartsheet.folderResources().createFolder(destinationFolderId, folder);
```

```python
# Create folder in another folder.
action = smartsheet.Folders.create_folder_in_folder(folderId, 'New folder')
```

> Example Response:

<%= partial "snippets/createFolder_response.md.erb" %>

`POST /folders/{folderId}/folders`

Creates a Folder in the specified Folder. 

<%= partial "snippets/createFolder_table.md.erb" %>

### Create Folder (Workspace)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceid}/folders \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name": "New folder"}'
```

```javascript
// Set folder name.
var folder = {
    "name": "New folder"
};

// Set options.
var options = {
    body: folder,
    workspaceId: 1656220827314052
};

// Create folder in a workspace.
smartsheet.workspaces.createFolder(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Set folder name.
Folder folder = new Folder.CreateFolderBuilder("New folder").Build();

// Create folder in a workspace.
smartsheet.WorkspaceResources.FolderResources.CreateFolder(workspaceId, folder);
```

```java
// Set folder name.
Folder folder = new Folder.CreateFolderBuilder().setName("New Folder").build();

// Create folder in a workspace.
smartsheet.workspaceResources().folderResources().createFolder(workspaceId, folder);
```

```python
# Create folder in a workspace.
smartsheet.Workspaces.create_folder_in_workspace(workspaceId, 'New folder')
```

> Example Response:

<%= partial "snippets/createFolder_response.md.erb" %>

`POST /workspaces/{workspaceId}/folders`

Creates a Folder in the specified Workspace. 

<%= partial "snippets/createFolder_table.md.erb" %>

## Delete Folder

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    id: 965780272637828 // ID of Folder
};

// Delete folder.
smartsheet.folders.deleteFolder(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete folder.
smartsheet.FolderResources.DeleteFolder(folderId);
```

```java
// Delete folder.
smartsheet.folderResources().deleteFolder(folderId);
```

```python
# Delete folder.
smartsheet.Folders.delete_folder(folderId)
```

> Example Response:

```json
{
    "resultCode": 0,
    "message": "SUCCESS"
}
```

`DELETE /folders/{folderId}`

Deletes the Folder (and its contents) specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

## Get Folder

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    id: 7116448184199044 // ID of Folder
};

// Get folder.
smartsheet.folders.getFolder(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get folder (omit 'include' parameter).
smartsheet.FolderResources.GetFolder(folderId, null);

// Get folder (specify 'include' parameter with value of "source").
smartsheet.FolderResources.GetFolder(folderId, new FolderInclusion[] { FolderInclusion.SOURCE });
```

```java
// Get folder (omit 'include' parameter).
smartsheet.folderResources().getFolder(folderId, null)

// Get folder (specify 'include' parameter with value of "source").
smartsheet.folderResources().getFolder(folderId, EnumSet.of(SourceInclusion.SOURCE))
```

```python
# Get folder.
folder = smartsheet.Folders.get_folder(folderId)
# folder is an instance of smartsheet.models.Folder
```

> Example Response:

```json
{
    "id": 7116448184199044,
    "name": "Projects",
    "permalink": "https://https://app.smartsheet.com/b/home?lx=B0_lvAtnWygeMrWr4Rfoa",
    "sheets": [
        {
            "id": 4509918431602564,
            "name": "Project Timeline",
            "accessLevel": "OWNER",
            "permalink": "https://app.smartsheet.com/b/home?lx=uWicCItTmkbxJwpCfQ5wiwW",
            "createdAt": "2015-06-05T20:05:29Z",
            "modifiedAt": "2015-06-05T20:05:43Z"
        }
    ]
}
```

`GET /folders/{folderId}`

Gets the specified Folder (and lists its contents).

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user ID for each sheet</li><li>source - the [source](#source-object) for any sheet that was created from another sheet or template</li></ul>
<%= RETURNS %> | [Folder object](#folder-object), populated according to the **include** parameter<br/><br/>Note: If no folders, sheets, reports, templates, or sights are present in the Folder, the corresponding attribute (e.g., "folders", "sheets", etc.) will not be present in the response.

## List Child Folders

Top-level child Folders can be retrieved from the user's **Sheets** folder ([Home](#home)), from another Folder, or from a Workspace.

### List Folders

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/home/folders \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json"
```

```javascript
// List folders in "Sheets" folder. 
smartsheet.home.listFolders()
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    })
```

```csharp
// List folders in "Sheets" folder (omit pagination parameters).
smartsheet.HomeResources.FolderResources.ListFolders(null);

// List folders in "Sheets" folder (specify 'includeAll' parameter with value of "true").
smartsheet.HomeResources.FolderResources.ListFolders(new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List folders (specify 'includeAll' parameter with value of "true").
smartsheet.homeResources().folderResources().listFolders(parameters);

// List folders (omit pagination parameters).
smartsheet.homeResources().folderResources().listFolders(null);
```

```python
# Get complete list of folders in "Sheets" folder.
action = smartsheet.Home.list_folders(include_all=True)
home_sheets_folders = action.data

# Get paginated list of folders in "Sheets" folder.
action = smartsheet.Home.list_folders(page_size=5, page=1)
pages = action.total_pages
folders = action.data
```

> Example Response:

<%= partial "snippets/listFolders_response.md.erb" %>

`GET /home/folders`

Gets a list of the top-level child Folders within the user's **Sheets** folder ([Home](#home)).

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listFolders_table.md.erb" %>

### List Folders (Folder)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId}/folders \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json"
```

```javascript
// Set options.
var options = {
    folderId: 5107651446105988
};

// List folders in another folder.
smartsheet.folders.listChildFolders(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List folders in another folder (omit pagination parameters).
smartsheet.FolderResources.ListFolders(folderId, null);

// List folders in another folder (specify 'includeAll' parameter with value of "true").
smartsheet.FolderResources.ListFolders(folderId, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List folders in another folder (specify 'includeAll' parameter with value of "true").
smartsheet.folderResources().listFolders(parameters);

// List folders in another folder (omit pagination parameters).
smartsheet.folderResources().listFolders(null);
```

```python
# Get complete list of folders in another folder.
action = smartsheet.Folders.list_folders(folderId, include_all=True)
folders = action.data

# Get paginated list of folders in another folder.
action = smartsheet.Folders.list_folders(folderId, page_size=5, page=1)
pages = action.total_pages
folders = action.data
```

> Example Response:

<%= partial "snippets/listFolders_response.md.erb" %>

`GET /folders/{folderId}/folders`

Gets a list of the top-level child Folders within the specified Folder.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listFolders_table.md.erb" %>

### List Folders (Workspace)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/folders \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json"
```

```javascript
// Set options.
var options = {
    workspaceId: 1656220827314052
};

// List folders in workspace.
smartsheet.workspaces.listWorkspaceFolders(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List folders in workspace (omit pagination parameters).
smartsheet.WorkspaceResources.FolderResources.ListFolders(workspaceId, null);

// List folders in workspace (specify 'includeAll' parameter with value of "true").
smartsheet.WorkspaceResources.FolderResources.ListFolders(workspaceId, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List folders in workspace (specify 'includeAll' parameter with value of "true").
smartsheet.workspaceResources().folderResources().listFolders(parameters);

// List folders in workspace (omit pagination parameters).
smartsheet.workspaceResources().folderResources().listFolders(null);
```

```python
# Get complete list of folders in a workspace.
action = smartsheet.Workspaces.list_folders(workspaceId, include_all=True)
folders = action.data

# Get paginated list of folders in a workspace.
action = smartsheet.Workspaces.list_folders(workspaceId, page_size=5, page=1)
pages = action.total_pages
folders = action.data
```

> Example Response:

<%= partial "snippets/listFolders_response.md.erb" %>

`GET /workspaces/{workspaceId}/folders`

Gets a list of the top-level child Folders within the specified Workspace.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listFolders_table.md.erb" %>


## Move Folder

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId}/move \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-d '{ \
    "destinationType": "folder", \
    "destinationId": 7960873114331012, \
}' \
-X POST
```

```csharp
// Specify destination.
ContainerDestination destination = new ContainerDestination
{
	DestinationId = destinationFolderId,
	DestinationType = DestinationType.FOLDER,
};

// Move folder.
smartsheet.FolderResources.MoveFolder(folderId, destination);
```

```java
// Specify destination.
ContainerDestination destination = new ContainerDestination.AddContainerDestinationBuilder()
		.setDestinationType(DestinationType.FOLDER)
		.setDestinationId(destinationFolderId)
		.build();

// Move folder.
smartsheet.folderResources().moveFolder(folderId, destination);
```

```python
# Move folder.
smartsheet.Folders.move_folder(
    folderId,
    smartsheet.models.Destination({
        'destination_id': folderId,
        'destination_type': 'folder'
    })
)
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": {
        "id": 4509918431602564,
        "name": "moved_folder_name",
        "permalink": "https://{base_url}?lx=lB0JaOh6AX1wGwqxsQIMaA"
    },
    "message": "SUCCESS"
}
```

`POST /folders/{folderId}/move`

Moves the specified Folder to another location.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [ContainerDestination object](#containerdestination-object), limited to the following required attributes:<ul><li>destinationType</li><li>destinationId</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Folder object](#folder-object) for the moved Folder


## Update Folder

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"name": "New name for folder"}'
```

```javascript
// Set folder name.
var folder = {
    "name": "New name for folder"
};

// Set options.
var options = {
    id: 1486948649985924, // ID of Folder
    body: folder
};

// Update folder.
smartsheet.folders.updateFolder(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Set folder name.
Folder folder = new Folder.UpdateFolderBuilder(folderId, "New name for folder").Build();

// Update folder.
smartsheet.FolderResources.UpdateFolder(folder);
```

```java
// Set folder name and id of the folder to be updated.
Folder folder = new Folder.UpdateFolderBuilder().setName("New name for folder").setId(folderId).build();

// Update folder.
smartsheet.folderResources().updateFolder(folder);
```

```python
# Update folder.
smartsheet.Folders.update_folder(folderId, 'New name for folder')
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "id": 1486948649985924,
        "name": "New name for folder"
    },
    "resultCode": 0
}
```

`PUT /folders/{folderId}`

Updates the Folder specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Folder object](#folder-object), limited to the following required attribute:<ul><li>name (string)</li></ul>Name need not be unique.
<%= RETURNS %> | [Result object](#result-object) containing the updated [Folder object](#folder-object)

# Groups

A Group is a collection of [Group Members](#group-members).

## <%= OBJECTS %>

### Group Object

     |     |     |
-----|-----|-----|
**id** | number | Group ID
**name** | string | Group name
**description** | string | Group description
**owner** | string | Group owner’s email address
**ownerId** | number | Group owner's User ID
**members** | [GroupMember](#groupmember-object)[] | Array of GroupMember objects
**createdAt** | timestamp | Time of creation
**modifiedAt** | timestamp | Time of last modification

## Create Group

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/groups \
-H "Authorization: Bearer ACCESS_TOKEN"
-H "Content-Type: application/json" \
-X POST \
-d '{ "name": "API-created Group", "description": "Group created via API", "members": [{ "email": "john.doe@smartsheet.com" }]}'
```

```javascript
// Specify group.
var group = {
    "name": "API-created Group",
    "description": "Group created via API",
    "members": [
        {
            "email": "john.doe@smartsheet.com"
        }
    ]
};

// Set options.
var options = {
    body: group
};

// Create group.
smartsheet.groups.createGroup(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Create group member.
GroupMember member = new GroupMember.AddGroupMemberBuilder("john.doe@smartsheet.com").Build();

// Add member to group.
Group group = new Group.CreateGroupBuilder("API-created Group", "Group created via API").SetMembers(new GroupMember[] { member }).Build();

// Create group.
smartsheet.GroupResources.CreateGroup(group);
```

```java
// Create group member.
GroupMember member = new GroupMember.AddGroupMemberBuilder().setEmail("john.doe@smartsheet.com").build(); 

// Add member to group.
Group group = new Group.CreateGroupBuilder().setName("API-created Group").setDescription("Group created via API").setMembers(Arrays.asList(member)).build();

// Create group.
smartsheet.groupResources().createGroup(group);
```

```python
# Create group (with a single member).
smartsheet.Groups.create_group(
    smartsheet.models.Group({
        'name': 'API-created Group',
        'description': 'Group created via API',
        'members': smartsheet.models.GroupMember({
            'email': 'john.doe@smartsheet.com'
        })
    })
)
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": {
        "id": 2331373580117892,
        "name": "API-created Group",
        "description": "Group created via API",
        "owner": "john.doe@smartsheet.com",
        "ownerId": 4583173393803140,
        "members": [
            {
                "id": 4583173393803140,
                "email": "john.doe@smartsheet.com",
                "firstName": "John",
                "lastName": "Doe",
                "name": "John Doe"
            }
        ],
        "createdAt": "2014-05-29T16:28:49-07:00",
        "modifiedAt": "2014-05-29T16:28:49-07:00"
    },
    "message": "SUCCESS"
}
```

`POST /groups`

Creates a new Group.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Group object](#group-object), limited to the following attributes:<ul><li>name (required) -- must be unique within the organization</li><li>description (optional)</li><li>members (optional) -- array of [GroupMember objects](#groupmember-object), each limited to the following attribute:<ul><li>email</li></ul></li></ul>
<%= RETURNS %> | [Result object](#result-object), containing a [Group object](#group-object) for the newly created Group

## Delete Group

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/groups/{groupId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    id: 6932724448552836 // ID of Group
};

// Delete group.
smartsheet.groups.deleteGroup(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete group.
smartsheet.GroupResources.DeleteGroup(groupId);
```

```java
// Delete group.
smartsheet.groupResources().deleteGroup(groupId);
```

```python
# Delete group.
smartsheet.Groups.delete_group(groupId)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /groups/{groupId}`

Deletes the Group specified in the URL.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

<aside class="notice"><b>This operation is asynchronous</b>, meaning group members may retain their sharing access for a brief period of time after the call returns.  For small groups with limited sharing, the operation should complete quickly (within a few seconds).  For large groups with many shares, this operation could possibly take more than a minute to complete.</aside>

## Get Group

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/groups/{groupId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    id: 4583173393803140 // ID of Group
};

// Get group.
smartsheet.groups.getGroup(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get group.
smartsheet.GroupResources.GetGroup(groupId);
```

```java
// Get group.
smartsheet.groupResources().getGroup(groupId);
```

```python
# Get group.
group = smartsheet.Groups.get_group(groupId)
# group is an instance of smartsheet.models.Group
```

> Example Response:

```json
{
    "id": 4583173393803140,
    "name": "Group 1",
    "description": "My group",
    "owner": "john.doe@smartsheet.com",
    "ownerId": 2331373580117892,
    "members": [
        {
            "id": 2331373580117892,
            "email": "john.doe@smartsheet.com",
            "firstName": "John",
            "lastName": "Doe",
            "name": "John Doe"
        },
    ],
    "createdAt": "2014-05-29T14:41:35-07:00",
    "modifiedAt": "2014-05-29T14:41:35-07:00"
}
```

`GET /groups/{groupId}`

Gets the Group specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Group object](#group-object) that includes the list of [GroupMembers](#groupmember-object)

## List All Org Groups

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/groups \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// List all org groups.
smartsheet.groups.listGroups()
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List all org groups (omit pagination parameters).
smartsheet.GroupResources.ListGroups(null);

// List all org groups (specify 'includeAll' parameter with value of "true").
smartsheet.GroupResources.ListGroups(new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List all org groups (specify 'includeAll' parameter with value of "true").
smartsheet.groupResources().listGroups(parameters);

// List all org groups (omit pagination parameters).
smartsheet.groupResources().listGroups(null);
```

```python
# Get all org groups.
action = smartsheet.Groups.list_groups(include_all=True)
groups = action.data

# Get paginated list of org groups.
action = smartsheet.Groups.list_groups(page_size=10, page=1)
pages = action.total_pages
groups = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 1,
	"data": [
		{
			"id": 4583173393803140,
			"name": "Group 1",
			"description": "My group",
			"owner": "john.doe@smartsheet.com",
			"ownerId": 2331373580117892,
			"createdAt": "2014-05-29T14:41:35-07:00",
			"modifiedAt": "2014-05-29T14:41:35-07:00"
		}
	]
}
```

`GET /groups`

Gets the list of all Groups in an organization. To fetch the members of an individual group, use the [Get Group](#get-group) operation.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Group objects](#group-object)

## Update Group

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/groups/{groupId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{ "name": "Renamed Group", "description": "Some new description" }'
```

```javascript
// Specify the name and description of the group.
var group = {
    "name": "Renamed Group",
    "description": "Some new description"
};

// Set options.
var options = {
    body: group,
    id: 2331373580117892 // ID of Group
};

// Update group.
smartsheet.groups.updateGroup(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify the name and description of the group.
Group group = new Group.UpdateGroupBuilder(groupId).SetName("Renamed Group").SetDescription("Some new description").Build();

// Update group.
smartsheet.GroupResources.UpdateGroup(group);
```

```java
// Specify the name and description of the group.
Group group = new Group.UpdateGroupBuilder().setId(groupId).setName("Renamed Group").setDescription("Some new description").build();

// Update group.
smartsheet.groupResources().updateGroup(group);
```

```python
# Update group.
smartsheet.Groups.update_group(
    groupId,
    smartsheet.models.Group({
        'name': 'Renamed Group',
        'description': 'Some new description'
    })
)
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": {
        "id": 2331373580117892,
        "name": "Renamed Group",
        "description": "Some new description",
        "owner": "john.doe@smartsheet.com",
        "ownerId": 4583173393803140,
        "createdAt": "2014-05-29T16:28:49-07:00",
        "modifiedAt": "2014-05-29T17:00:23-07:00"
    },
    "message": "SUCCESS"
}
```

`PUT /groups/{groupId}`

Updates the Group specified in the URL.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Group object](#group-object), limited to the following attributes:<ul><li>name (optional) -- must be unique within the organization</li><li>description (optional)</li><li>ownerId (optional): ID of an admin User to whom the group ownership will be transferred</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the [Group object](#group-object) for the updated group

## <%= RELATED %>

A Group is comprised of one or more members.

### Members of a Group

For details about working with a Group's members, see [Group Members](#group-members).

# Group Members

A Group Member is a User that belongs to a [Group](#groups).

## <%= OBJECTS %>

### GroupMember Object

     |     |     |
-----|-----|-----|
**id** | number | Group Member's User ID
**email** | string | Group Member's email address
**firstName** | string | Group Member's first name
**lastName** | string | Group Member's last name
**name** | string | Group Member's full name

## Add Group Member(s)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/groups/{groupId}/members \
-H "Authorization: Bearer ACCESS_TOKEN"
-H "Content-Type: application/json" \
-X POST \
-d '[{ "email": "jane.doe@smartsheet.com" }]'
```

```javascript
// Specify group member(s).
var members = [{ "email": "jane.doe@smartsheet.com" }];

// Set options.
var options = {
    body: members,
    groupId: 7917992160847748
};

// Add member(s) to group.
smartsheet.groups.addGroupMembers(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Create group member.
GroupMember member = new GroupMember.AddGroupMemberBuilder("jane.doe@smartsheet.com").Build();

// Add member(s) to group.
smartsheet.GroupResources.AddGroupMembers(groupId, new GroupMember[] { member });
```

```java
// Create group member.
GroupMember member = new GroupMember.AddGroupMemberBuilder().setEmail("jane.doe@smartsheet.com").build();

// Add member(s) to group.
smartsheet.groupResources().memberResources().addGroupMembers(groupId, Arrays.asList(member));
```

```python
# Add member(s) to group.
smartsheet.Groups.add_members(
    groupId,
    [smartsheet.models.GroupMember({'email': 'jane.doe@smartsheet.com'})]
)
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": [
        {
            "id": 1539725208119172,
            "email": "jane.doe@smartsheet.com",
            "firstName": "Jane",
            "lastName": "Doe",
            "name": "Jane Doe"
        }
    ],
    "message": "SUCCESS"
}
```

`POST /groups/{groupId}/members`

Adds one or more members to a Group.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

If called with a single [GroupMember object](#groupmember-object), and that group member already exists, [error code](#errors) **1129** will be returned. If called with an array
of [GroupMember objects](#groupmember-object) any users specified in the array that are already group members will be ignored and omitted from the response.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | A single [GroupMember object](#groupmember-object) or an array of Group Member objects, limited to the following attribute:<ul><li>email</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the members added to the group -- either a single [group member](#groupmember-object) or array of group member objects, corresponding to what was specified in the request.
<%= ERRORS %>  | If an error occurs because the request specified one or more [*alternate* email addresses](#alternate-email-address(es)) (i.e., not the primary email address associated with the User account), the [Error object](#errors) returned will contain a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "u1+1@smartsheet.com is an alternate address of the user u1@smartsheet.com. Please retry using their primary address u1@smartsheet.com."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

<aside class="notice"><b>This operation is asynchronous</b>, meaning the users may not yet have sharing access to sheets for a period of time after this operation returns.  For small groups with limited sharing, the operation should complete quickly (within a few seconds).  For large groups with many shares, this operation could possibly take more than a minute to complete.</aside>

## Remove Group Member

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/groups/{groupId}/members/{userId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    groupId: 7917992160847748,
    userId: 1539725208119172
};

// Remove member from group.
smartsheet.groups.removeGroupMember(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Remove member from group.
smartsheet.GroupResources.RemoveGroupMember(groupId, userId);
```

```java
// Remove member from group.
smartsheet.groupResources().memberResources().deleteGroupMember(groupId, userId)
```

```python
# Remove member from group.
smartsheet.Groups.remove_member(groupId, groupMemberId)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /groups/{groupId}/members/{userId}`

Removes a member from a Group.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

<aside class="notice"><b>This operation is asynchronous</b>, meaning group members may retain their sharing access for a brief period of time after the call returns.  For small groups with limited sharing, the operation should complete quickly (within a few seconds).  For large groups with many shares, this operation could possibly take more than a minute to complete.</aside>

# Home

In the Smartsheet UI, the "Home" tab shows all objects a User has access to, including Sheets, Folders, Workspaces, Reports, and Templates.

## <%= OBJECTS %>

### Home Object

     |     |     |
-----|-----|-----|
**sheets** | [Sheet](#sheet-object)[] | Array of Sheet objects
**folders** | [Folder](#folder-object)[] | Array of Folder objects
**reports** | [Report](#report-object)[] | Array of Report objects
**templates** | [Template](#template-object)[] | Array of Template objects
**workspaces** | [Workspace](#workspace-object)[] | Array of Workspace objects
**sights** | [Sight](#sight-object)[] | Array of Sight objects

## List All Contents

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/home?include=source \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// List all contents.
smartsheet.home.listContents()
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// List all contents (omit 'include' parameter).
smartsheet.HomeResources.GetHome(null);

// List all contents (specify 'include' parameter with value of "source").
smartsheet.HomeResources.GetHome(new HomeInclusion[] { HomeInclusion.SOURCE });
```

```java
// List all contents (omit 'include' parameter).
smartsheet.homeResources().getHome(null);

// List all contents (specify 'include' parameter with value of "source").
smartsheet.homeResources().getHome(EnumSet.of(SourceInclusion.SOURCE)));
```

```python
# List all contents (include source).
contents = smartsheet.Home.list_all_contents(include='source')
```

> Example Response:

```json
{
    "folders": [
        {
            "id": 5709073300645764,
            "name": "folder 1",
            "permalink": "https://app.smartsheet.com/b/home?lx=Dsje3YKtpyZScrCX6Z1"
        }
    ],
    "sheets": [
        {
            "id": 4583173393803140,
            "name": "sheet 1",
            "accessLevel": "OWNER",
            "permalink": "https://app.smartsheet.com/b/home?lx=Dsje3YKtpyZScrCX6Za", 
            "createdAt": "2015-06-05T20:05:29Z",
            "modifiedAt": "2015-06-05T20:05:43Z"
        },
        {
            "id": 2331373580117892,
            "name": "Copy of sheet 1",
            "accessLevel": "OWNER",
            "permalink": "https://app.smartsheet.com/b/home?lx=Dsje3YKtpyZScrCX6Zb",
            "createdAt": "2015-06-05T20:05:29Z",
            "modifiedAt": "2015-06-05T20:05:43Z",
			"source": {
                "id": 4583173393803140,
                "type": "sheet"
            }
        }
    ],
    "reports": [],
    "templates": [],
    "workspaces": [],
	"sights": []
}
```

`GET /home`

Gets a nested list of all Home objects, including Sheets, Workspaces, Folders, Reports, Templates, and Sights, as shown on the Home tab.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user ID for each sheet</li><li>source - the [source](#source-object) for any sheet that was created from another sheet or template</li></ul>
<%= RETURNS %> | [Home object](#home-object), populated according to the **include** parameter

## <%= RELATED %>

### Home Folders

For details about working with Folders in the user's **Sheets** folder (i.e., at the Home level), see [Folders](#folders).

### Home Sheets

For details about working with sheets in the user's **Sheets** folder (i.e., at the Home level), see [Sheets](#sheets).

# Reports

A Report is a filtered view of the data from one or more Sheets. Like a Sheet, a Report is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

## <%= OBJECTS %>

### Report Object

Extends the [Sheet object](#sheet-object), adding the following:

     |     |     |
-----|-----|-----|
**sourceSheets** | [Sheet](#sheet-object)[] | Array of Sheet objects (without rows), representing the sheets that rows in the report originated from.  Only included in the [Get Report](#get-report) response if the **include** parameter specifies "sourceSheets".

### ReportCell Object

Extends the [Cell object](#cell-object), adding the following: 

     |     |     |
-----|-----|-----|
**virtualColumnId** | number | The virtual ID of the cell's column. This property refers to the cell's parent column in the Report, while the **columnId** property refers to the cell's parent column in its originating source Sheet.


### ReportColumn Object

Extends the [Column object](#column-object), adding the following: 

     |     |     |
-----|-----|-----|
**virtualId** | number | The virtual ID of this report column
**sheetNameColumn** | boolean | Returned only for the special "Sheet Name" report column (value = "true")

A report column is a "virtual" column, in that it appears identical to source sheet column(s), but is in fact a different column belonging to the report. 
[Cells](#reportcell-object) in the report refer to this column via their **virtualColumnId** attribute, and to their actual column from their source sheet via their **columnId** attribute.

### ReportRow Object

Extends the [Row object](#row-object), adding the following: 

     |     |     |
-----|-----|-----|
**sheetId** | number | The ID of the Sheet from which the Row originates

### ReportPublish Object 

     |     |     |
-----|-----|-----|
**readOnlyFullEnabled** | boolean | If `true`, a rich version of the report is published with the ability to download row attachments and discussions.
**readOnlyFullUrl** | string | URL for 'Read-Only Full' view of the published report<br/>Only returned in a response if **readOnlyFullEnabled** = true.
**readOnlyFullAccessibleBy** | string | Flag to indicate who can access the 'Read-Only Full' view of the published report:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the report owner's Smartsheet organization.</li></ul>Only returned in a response if **readOnlyFullEnabled** = true.

## Get Report

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    id: 4583173393803140 // ID of Report
};

// Get report.
smartsheet.reports.getReport(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get report (omit 'include', 'pageSize', and 'page' parameters).
smartsheet.ReportResources.GetReport(reportId, null, null, null);

// Get report (specify 'include' parameter with value of "attachments" and "discussions", 'pageSize' parameter with value of "500", and 'page' of value "2").
smartsheet.ReportResources.GetReport(reportId, new ReportInclusion[] { ReportInclusion.ATTACHMENTS, ReportInclusion.DISCUSSIONS }, 500, 2);
```

```java
// Get report (omit 'include', 'pageSize', and 'page' parameters).
smartsheet.reportResources().getReport(reportId, null, null, null);

// Get report (specify 'include' parameter with value of "attachments" and "discussions", 'pageSize' parameter with value of "500", and 'page' of value "2").
smartsheet.reportResources().getReport(reportId, EnumSet.of(ReportInclusion.ATTACHMENTS, ReportInclusion.DISCUSSIONS), 500, 2)
```

```python
# Get report.
report = smartsheet.Reports.get_report(reportId)
```

> Example Response:

```json
{
    "id": 4583173393803140,
    "name": "My Report",
    "totalRowCount": 4,
    "accessLevel": "OWNER",
    "permalink": "https://app.smartsheet.com/b/home?lx=pWNSDH9itjBXxBzFmyf-5w",
    "createdAt": "2012-07-24T18:22:29-07:00",
    "modifiedAt": "2012-07-24T18:30:52-07:00",
    "columns": [
        {
            "virtualId": 4583173393803140,
            "index": 0,
            "primary": true,
            "title": "Sheet Name",
            "type": "TEXT_NUMBER",
            "sheetNameColumn": true
        },
        {
            "virtualId": 2331373580117892,
            "index": 1,
            "title": "Status",
            "type": "TEXT_NUMBER"
        }
    ],
    "rows": [
        {
            "id": 1732835527681924,
            "sheetId": 1060338138408836,
            "rowNumber": 1,
            "expanded": true,
            "accessLevel": "OWNER",
            "createdAt": "2014-10-02T15:05:35-07:00",
            "modifiedAt": "2014-10-02T15:05:35-07:00",
            "cells": [
                {
                    "virtualColumnId": 4583173393803140,
                    "type": "TEXT_NUMBER",
                    "value": "My Sheet",
                    "displayValue": "My Sheet"
                },
                {
                    "columnId": 8467747974735748,
                    "virtualColumnId": 2331373580117892,
                    "type": "TEXT_NUMBER",
                    "value": "In Progress",
                    "displayValue": "In Progress"
                }
            ]
        }
 
    ]
}
```

`GET /reports/{reportId}`

Gets the Report, including one page of Rows, and optionally populated with Discussions, Attachments, and source Sheets.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>discussions</li><li>attachments</li><li>[format](#formatting)</li><li>sourceSheets</li></ul> 
  | **pageSize** (optional): Number of rows per page.  If not specified, the default value is 100.  This operation can return a maximum of 500 rows per page.
  | **page** (optional): Which page number (1-based) to return.  If not specified, the default value is 1.  If a page number is specified that is greater than the number of total pages, the last page will be returned.
<%= RETURNS %> | [Report object](#report-object), populated according to the "include" parameter

## Get Report as Excel / CSV

> Example Request (Excel):

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Accept: application/vnd.ms-excel" \
-o output.xlsx
```

```javascript
// Set options.
var options = {
    id: 3882962191181700 // ID of Report
};

// Get report as Excel.
smartsheet.reports.getReportAsExcel(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get report as Excel.
smartsheet.ReportResources.GetReportAsExcel(reportId, outputStream);
```

```java
// Get report as Excel.
smartsheet.reportResources().getReportAsExcel(reportId, outputStream);
```

```python
# Get report as Excel (download file with filename suggested by API).
smartsheet.Reports.get_report_as_excel(
    reportId,
    download_folder_path
)

# Get report as Excel (specify custom filename for the downloaded file).
smartsheet.Reports.get_report_as_excel(
    reportId,
    download_folder_path,
    'MyFileName.xslx'
)
```

> Example Response:

```shell
# See local file named "output.xlsx"
```

```javascript
// [todo]
```

```csharp
// Contents of Excel file will be written to "outputStream"
```

```java
// Contents of Excel file will be written to "outputStream"
```

```python
# download folder will contain the downloaded Excel file
```

> Example Request (CSV):

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Accept: text/csv" \
-o output.csv
```

```javascript
// Set options.
var options = {
    id: 3882962191181700 // ID of Report
};

// Get report as CSV.
smartsheet.reports.getReportAsCSV(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get report as CSV.
smartsheet.ReportResources.GetReportAsCSV(reportId, outputStream);
```

```java
// Get report as CSV.
smartsheet.reportResources().getReportAsCsv(reportId, outputStream);
```

```python
# Get report as CSV (download file with filename suggested by API).
smartsheet.Reports.get_report_as_csv(
    reportId,
    download_folder_path
)

# Get report as CSV (specify custom filename for the downloaded file).
smartsheet.Reports.get_report_as_csv(
    reportId,
    download_folder_path,
    'CallMeAl.csv'
)
```

> Example Response:

```shell
# See local file named "output.csv"
```

```javascript
// [todo]
```

```csharp
// Contents of CSV file will be written to "outputStream"
```

```java
// Contents of CSV file will be written to "outputStream"
```

```python
# download folder will contain the downloaded CSV file
```

`GET /reports/{reportId}`

Gets the Report in the format specified, based on the Report ID.  

<aside class="notice">Note: For Excel format, only .xlsx output format is supported at this time.</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
 | **Accept** -- must be set to one of the following values:<ul><li>application/vnd.ms-excel</li><li>text/csv</li></ul>
<%= RETURNS %> | The file in either Excel or CSV format, containing the Report data according to the **include** parameter.

## List Reports

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/reports 
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// List reports.
smartsheet.reports.listReports()
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List reports (omit pagination parameters).
smartsheet.ReportResources.ListReports(null);

// List reports (specify 'includeAll' parameter with value of "true").
smartsheet.ReportResources.ListReports(new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List reports (specify 'includeAll' parameter with value of "true").
smartsheet.reportResources().listReports(parameters);

// List reports (omit pagination parameters).
smartsheet.reportResources().listReports(null);
```

```python
# Get all reports.
action = smartsheet.Reports.list_reports(include_all=True)
reports = action.data

# Get paginated list of reports.
action = smartsheet.Reports.list_reports(page_size=5, page=1)
pages = action.total_pages
reports = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "totalPages": 1,
    "totalCount": 2,
    "data": [
        {   
            "id": 6761305928427396,
            "name": "r1",
            "accessLevel": "OWNER",
            "permalink": "https://app.smartsheet.com/b/home?lx=zWThapjNSR8LxW_kTdxPhQ"
        },  
        {   
            "id": 4508956358928260,
            "name": "r2",
            "accessLevel": "OWNER",
            "permalink": "https://app.smartsheet.com/b/home?lx=33-Y5QkQw6ZNSoApMKntbw"
        }   
    ]   
}
```

`GET /reports`

Gets the list of all Reports that the User has access to, in alphabetical order, by name.

<aside class="notice"><%= SUPPORTS_NUMERICDATES %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PARAMETER_MODIFIEDSINCE %>
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Report objects](#report-object) limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Publish Report

### Get Report Publish Status

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/publish \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
	"readOnlyFullEnabled": true,
	"readOnlyFullUrl": "https://publish.smartsheet.com/6d35fa6c99334d4892f9591cf6065",
	"readOnlyFullAccessibleBy": "ALL"
}
```

`GET /reports/{reportId}/publish`

Gets the Report's 'Publish' settings.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [ReportPublish object](#reportpublish-object)

### Set Report Publish Status

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/publish \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"readOnlyFullEnabled": true, "readOnlyFullAccessibleBy": "ORG"}'
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "readOnlyFullEnabled": true,
		"readOnlyFullAccessibleBy": "ORG",
        "readOnlyFullUrl": "http://publish.smartsheet.com/9862638d9c444014b5d7a114d436e99d"
    },
    "resultCode": 0
}
```

`PUT /reports/{reportId}/publish`

Sets the publish status of the Report and returns the new status, including the URL of any enabled publishing.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [ReportPublish object](#reportpublish-object) limited to the following attributes:<ul><li>**readOnlyFullEnabled** (required)</li><li>**readOnlyFullAccessibleBy** (optional) - set to either "ALL" or "ORG", when **readOnlyFullEnabled**=true.</li></ul>To publish the Report, set **readOnlyFullEnabled** to `true`. To unpublish the Report, set **readOnlyFullEnabled** to `false`.
<%= RETURNS %> | [Result object](#result-object) containing a [ReportPublish object](#reportpublish-object)

<aside class="notice">If <b>readOnlyFullEnabled</b> is set to <code>true</code> in the request, but <b>readOnlyFullAccessibleBy</b> is not specified, then the value of <b>readOnlyFullAccessibleBy</b> will be defaulted to the organization-level 'Report Publishing' setting (if the Report owner belongs to an organization) or to "ALL" (if the Report owner does not belong to an organization).</aside>

## Send Report via Email

<%= partial "snippets/sendReport.md.erb" %>

## Share Report

For details about Report sharing, see [Report Sharing](#report-sharing).

## <%= RELATED %>

A Report is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

### Report Attachments

For details about working with a Report's attachments, see [Attachments](#attachments).

### Report Cells

For details about working with a Report's cells, see [Cells](#cells).

### Report Columns

For details about working with a Report's columns, see [Columns](#columns).

### Report Discussions

For details about working with a Report's discussions, see [Discussions](#discussions).

### Report Rows 

For details about working with a Report's rows, see [Rows](#rows).

# Rows

A Row is a component of a Sheet or Report. Each Row is composed of a collection of Cells, and may optionally contain Discussions and/or Attachments.

## <%= OBJECTS %>

### Row Object

     |     |     |
-----|-----|-----|
**id** | number | Row ID
**sheetId** | number | Parent Sheet ID
**rowNumber** | number | Row number within the sheet (1-based - starts at 1)
**version** | number | Number that is incremented every time a sheet is modified
**filteredOut** | boolean | `true` if this row is filtered out by a column filter (and thus is not displayed in the Smartsheet app), `false` if the row is not filtered out.<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **filters**.
**inCriticalPath** | boolean | Only returned, with a value of `true`, if the sheet is a project sheet with dependencies enabled and this row is in the critical path
**locked** | boolean | Flag indicating whether the row is locked. In a response, a value of `true` indicates that the row has been locked by the sheet owner or the admin.
**lockedForUser** | boolean | Flag indicating whether the row is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request.
**expanded** | boolean | Flag to indicate if the row is expanded or collapsed
**accessLevel** | string | User's permission level on the Sheet that contains the Row
**format** | string | Format descriptor (see [Formatting](#formatting)).<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **format** and this row has a non-default format applied.
**conditionalFormat** | string | Format descriptor describing this row's conditional format (see [Formatting](#formatting))<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **format** and this row has a conditional format applied.
**createdAt** | timestamp | Time of creation
**createdBy** | [User](#user-object) | User object containing name and email of the creator of this row
**modifiedAt** | timestamp | Time of last modification
**modifiedBy** | [User](#user-object) | User object containing name and email of the last person to modify this row
**cells** | [Cell](#cell-object)[] | Array of Cell objects belonging to the row
**discussions** | [Discussion](#discussion-object)[] | Array of Discussion objects.<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **discussions**.
**attachments** | [Attachment](#attachment-object)[] | Array of Attachment objects.<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **attachments**.
**columns** | [Column](#column-object)[] | Array of Column objects.<br/>Only returned if the [Get Row](#get-row) **include** query string parameter contains **columns**.
**permalink** | string | URL that represents a direct link to the Row in Smartsheet<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **rowPermalink**.
**parentId** | number | In a response - the ID of the parent row (if any).<br/><br/>In a request - the ID of the desired parent row (used to specify the location for a new or moved row). For more information, see [Row Location](#row-location).
**siblingId** | number | In a response - the ID of the previous sibling row at the same hierarchical level of this row (if any).<br/><br/>In a request - the ID of the desired sibling row (used to specify the location for a new or moved row). For more information, see [Row Location](#row-location).
**toTop** | boolean | Flag used to specify the location for a new or moved row. <%= REQUEST_ONLY_ATTRIBUTE %> For more information, see [Row Location](#row-location).
**toBottom** | boolean | Flag used to specify the location for a new or moved row. <%= REQUEST_ONLY_ATTRIBUTE %> For more information, see [Row Location](#row-location).
**above** | boolean | Flag used to specify the location for a new or moved row. <%= REQUEST_ONLY_ATTRIBUTE %> For more information, see [Row Location](#row-location).

### CopyOrMoveRowDirective Object

     |     |     |
-----|-----|-----|
**rowIds** | number[] | The IDs of the rows to move or copy from the source sheet
**to** | [CopyOrMoveRowDestination](#copyormoverowdestination-object) | A CopyOrMoveRowDestination object that identifies the destination sheet 

### CopyOrMoveRowDestination Object

     |     |     |
-----|-----|-----|
**sheetId** | number | ID of the destination sheet

### CopyOrMoveRowResult Object

     |     |     |
-----|-----|-----|
**destinationSheetId** | number | ID of the destination sheet
**rowMappings** | [RowMapping](#rowmapping-object)[] | Array of RowMapping objects 

### RowMapping Object

     |     |     |
-----|-----|-----|
**from** | number | Row ID in the source sheet
**to** | number | Row ID in the destination sheet

## Add Row(s)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"toTop":true, "cells": [ {"columnId": 7960873114331012, "value": true}, {"columnId": 642523719853956, "value": "New status", "strict": false} ] }, {"toTop":true, "cells": [ {"columnId": 7960873114331012, "value": true}, {"columnId": 642523719853956, "value": "New status", "strict": false} ] }]'
```

```javascript
// Specify rows.
var row = [
    {
        "toTop": true,
        "cells": [
            {
                "columnId": 7960873114331012,
                "value": true
            },
            {
                "columnId": 642523719853956,
                "value": "New status",
                "strict": false
            }
        ]
    },
    {
        "toTop": true,
        "cells": [
            {
                "columnId": 7960873114331012,
                "value": true
            },
            {
                "columnId": 642523719853956,
                "value": "New status",
                "strict": false
            }
        ]
    }
];

// Set options.
var options = {
    body: row,
    sheetId: 2252168947361668
};

// Add rows to sheet.
smartsheet.sheets.addRows(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify cell values for first row.
Cell[] cellsA = new Cell[] { new Cell.AddCellBuilder(7960873114331012, true).Build(), new Cell.AddCellBuilder(642523719853956, "New status").SetStrict(false).Build() };

// Specify contents of first row.
Row rowA = new Row.AddRowBuilder(true, null, null, null, null).SetCells(cellsA).Build();

// Specify cell values of second row.
Cell[] cellsB = new Cell[] { new Cell.AddCellBuilder(7960873114331012, true).Build(), new Cell.AddCellBuilder(642523719853956, "New status").SetStrict(false).Build() };

// Specify contents of second row.
Row rowB = new Row.AddRowBuilder(true, null, null, null, null).SetCells(cellsB).Build();

// Add rows to sheet.
smartsheet.SheetResources.RowResources.AddRows(sheetId, new Row[] { rowA, rowB });
```

```java
// Specify cell values for first row.
List<Cell> cellsA = new Cell.AddRowCellsBuilder().addCell(7960873114331012, true).addCell(642523719853956, "New status").build();

// Specify contents of first row.
Row rowA = new Row.AddRowBuilder().setCells(cellsA).setToBottom(true).build();

// Specify cell values for second row.
List<Cell> cellsB = new Cell.AddRowCellsBuilder().addCell(7960873114331012, true).addCell(642523719853956, "New status").build();

// Specify contents of second row.
Row rowB = new Row.AddRowBuilder().setCells(cellsB).setToBottom(true).build();

// Add rows to sheet.
smartsheet.sheetResources().rowResources().addRows(sheetId, Arrays.asList(rowA, rowB));
```

```python
# Specify cell values for one row.
row_a = smartsheet.models.Row()
row_a.to_top = True
row_a.cells.append({
    'column_id': 7960873114331012,
    'value': True
})
row_a.cells.append({
    'column_id': 642523719853956
    'value': 'New Status',
    'strict': False
})

# Specify cell values for another row.
row_b = smartsheet.models.Row()
row_b.to_top = True
row_b.cells.append({
    'column_id': 7960873114331012,
    'value': True
})
row_b.cells.append({
    'column_id': 642523719853956
    'value': 'New Status',
    'strict': False
})

# Add rows to sheet.
action = smartsheet.Sheets.add_rows(sheetId, [row_a, row_b])
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": [
        {
            "id": 7670198317672324,
            "sheetId": 2331373580117892,
            "rowNumber": 1,
            "expanded": true,
            "createdAt": "2013-02-28T17:45:13-08:00",
            "modifiedAt": "2013-02-28T17:45:13-08:00",
            "cells": [
                {
                    "columnId": 7960873114331012,
                    "type": "CHECKBOX",
                    "value": true
                },
                {
                    "columnId": 642523719853956,
                    "displayValue": "New status",
                    "type": "TEXT_NUMBER",
                    "value": "New status"
                }
            ]
        },
        {
            "id": 2040698783459204,
            "sheetId": 2331373580117892,
            "rowNumber": 2,
            "expanded": true,
            "createdAt": "2013-02-28T17:45:13-08:00",
            "modifiedAt": "2013-02-28T17:45:13-08:00",
            "cells": [
                {
                    "columnId": 7960873114331012,
                    "type": "CHECKBOX",
                    "value": true
                },
                {
                    "columnId": 642523719853956,
                    "displayValue": "New status",
                    "type": "TEXT_NUMBER",
                    "value": "New status"
                }
            ]
        }
    ],
	"version": 14, 
    "resultCode": 0
}
```

`POST /sheets/{sheetId}/rows`

Inserts one or more rows into the Sheet specified in the URL.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<aside class="notice">If multiple rows are specified in the request, all rows must be inserted at the same location (i.e. the <b>toTop</b>, <b>toBottom</b>, <b>parentId</b>, <b>siblingId</b>, and <b>above</b> attributes must be the same for all rows in the request).</aside>

<aside class="notice">In a parent row, values of the following fields will be auto-calculated based upon values in the child rows (and therefore cannot be updated using the API): Start Date, End Date, Duration, % Complete.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | <%= PARAMETER_ALLOW_PARTIAL_SUCCESS %>
<%= REQUEST %> | [Row object](#row-object) or an array of Row objects, with the following attributes:<ul><li>One or more [*location-specifier* attributes](#row-location) (optional)</li><li>**format** (optional)</li><li>**expanded** (optional)</li><li>**locked** (optional)</li><li>A **cells** attribute set to an array of [Cell objects](#cell-object). To insert an empty row, set the **cells** attribute to empty or null. Each Cell object may contain the following attributes:<ul><li>columnId (required)</li><li>value (required)</li><li>strict (optional)</li><li>format (optional)</li><li>hyperlink (optional)</li></ul></li></ul>Please note the following:<ul><li>Column Ids must be valid for the sheet specified, and must only be used once for each row in the operation.</li><li>Cells of a project sheet in the  "Predecessor" or "Finish Date" columns cannot be populated via API.</li><li>Cells of a project sheet in the  "Start Date" column cannot be populated via API for rows that also specify a value in the "Predecessor" column.</li></ul></ul>More information:<ul><li>See [Column Types](#column-types) and [Update Cell(s)](#update-cell(s)).</li><li>See [Contact List Columns](#contact-list-columns) for information on inserting cells for columns of type CONTACT_LIST.</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the newly created row(s) -- either a single [Row object](#row-object) or array of Row objects, corresponding to what was specified in the request, as well as the new version of the Sheet. 
<%= ERRORS %> | <u><b>When <code>allowPartialSuccess=false</code> (or not specified):</b></u><br/><br/>If an error occurs, the [Error object](#errors) returned will contain a **detail** attribute set to an object with the following attribute:<ul><li>**index**: the array index of the row that caused the error (0 if a single Row was passed in)</li></ul>If any error occurs, the entire request will fail (no rows will be added), and the Error response returned will describe the first problem that was encountered. For example:<br/>{<br/>&#160;&#160;"errorCode": 1042,<br/>&#160;&#160;"message": "The cell value in column 5504245941200772 did not conform to the strict requirements for type CHECKBOX."<br/>&#160;&#160;"detail": {<br/>&#160;&#160;&#160;&#160;"index": 4<br/>&#160;&#160;}<br/>}<br/><br/><br/><u><b>When <code>allowPartialSuccess=true</code>:</b></u><br/><br/><%= PARTIAL_SUCCESS %>

## Copy Row(s) to Another Sheet

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/copy \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{ "rowIds": [145417762563972, 8026717110462340], "to": {"sheetId": 2258256056870788} }'
```

```javascript
// Specify the directive.
var copyRow = {
    "rowIds": [145417762563972, 8026717110462340],
    "to": {
        "sheetId": 2258256056870788
    }
};

// Set options.
var options = {
    body: copyRow,
    sheetId: 2252168947361668
};

// Copy rows.
smartsheet.sheets.copyRowToAnotherSheet(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify destination sheet.
CopyOrMoveRowDestination destination = new CopyOrMoveRowDestination { SheetId = 2258256056870788 };

// Specify rows to be copied (and destination sheet).
CopyOrMoveRowDirective directive = new CopyOrMoveRowDirective { RowIds = new long[] { 145417762563972, 8026717110462340 }, To = destination };

// Copy rows (omit 'include' and 'ignoreRowsNotFound' parameters).
smartsheet.SheetResources.RowResources.CopyRowsToAnotherSheet(sheetId, directive, null, null);

// Copy rows (specify 'include' parameter with value of "children", and 'ignoreRowsNotFound' parameter with value of "true").
smartsheet.SheetResources.RowResources.CopyRowsToAnotherSheet(sheetId, directive, new CopyRowInclusion[] { CopyRowInclusion.CHILDREN }, true);
```

```java
// Specify destination sheet.
CopyOrMoveRowDestination destination = new CopyOrMoveRowDestination.InsertCopyOrMoveRowDestinationBuilder().setSheetId(2258256056870788).build();

// Specify rows to be copied (and destination sheet).
CopyOrMoveRowDirective directive = new CopyOrMoveRowDirective.InsertCopyOrMoveRowDirectiveBuilder().setRowIds(Arrays.asList(145417762563972, 8026717110462340)).setTo(destination).build();

// Copy rows (omit 'include' and 'ignoreRowsNotFound' parameters).
smartsheet.sheetResources().rowResources().copyRows(sheetId, null, null, directive);

// Copy rows (specify 'include' parameter with value of "children", and 'ignoreRowsNotFound' parameter with value of "true").
smartsheet.sheetResources().rowResources().copyRows(sheetId, EnumSet.of(RowCopyInclusion.CHILDREN), true, directive);
```

```python
# Copy rows from one sheet to another sheet.
smartsheet.Sheets.copy_rows(
    sheetId,
    smartsheet.models.CopyOrMoveRowDirective({
        'row_ids': [145417762563972, 8026717110462340]
        'to': smartsheet.models.CopyOrMoveRowDestination({
            'sheet_id': 2258256056870788
        })
    })
)
```


<%= partial "snippets/rowCopyMove_response.md.erb" %>

`POST /sheets/{sheetId}/rows/copy`

Copies Row(s) from the Sheet specified in the URL to (the bottom of) another sheet.

<aside class="notice">Up to 5,000 row IDs can be specified in the request, but if the total number of rows in the destination sheet after the copy exceeds the Smartsheet row limit, an error response will be returned.</aside>
     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of row elements to copy in addition to the cell data:<ul><li>attachments</li><li>discussions</li><li>children - if specified, any child rows of the rows specified in the request will also be copied to the destination sheet, and parent-child relationships amongst rows will be preserved within the destination sheet; if not specified, only the rows specified in the request will be copied.</li><li>**all** - specify a value of "all" to include everything (attachments, discussions, and children)</li></ul>**ignoreRowsNotFound** (optional) -- true or false: default is false. If set to true, specifying row Ids that do not exist within the source sheet will not cause an error response. If omitted or set to false, specifying row Ids that do not exist within the source sheet will cause an error response (and no rows will be copied).
<%= REQUEST %> | [CopyOrMoveRowDirective object](#copyormoverowdirective-object)
<%= RETURNS %> | [CopyOrMoveRowResult object](#copyormoverowresult-object)

## Delete Row(s)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows?ids={rowId1},{rowId2},{rowId3}&ignoreRowsNotFound=true \
-X DELETE
```

```javascript
// Set options.
var options = {
    sheetId: 2252168947361668,
    rowId: 207098194749316
};

// Delete row.
smartsheet.sheets.deleteRow(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete rows (specify 'ignoreRowsNotFound' parameter with value of "true").
smartsheet.SheetResources.RowResources.DeleteRows(sheetId, new long[] { rowId1, rowId2, rowId3 }, true);
```

```java
// Delete rows (specify 'ignoreRowsNotFound' parameter with value of "true").
smartsheet.sheetResources().rowResources().deleteRows(sheetId, new HashSet(Arrays.asList(rowId1, rowId2, rowId3), true);
```

```python
# Delete rows.
smartsheet.Sheets.delete_rows(sheetId, [rowId1, rowId2, rowId3])
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": [
        145417762563972,
        4508365800925060,
        8026717110462340,
        2256565987239812 
    ],
    "message": "SUCCESS"
}
```

`DELETE /sheets/{sheetId}/rows?ids={rowId1},{rowId2},{rowId3}...`

Deletes one or more row(s) from the Sheet specified in the URL.

<aside class="warning">This operation will delete ALL child Rows of the specified Row(s).</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **ids** (required) - comma-separated list of Row IDs
 | **ignoreRowsNotFound** (optional) - true or false. If set to false and any of the specified Row IDs are not found, no rows will be deleted, and the "not found" [error](#errors) will be returned.
<%= RETURNS %> | [Result object](#result-object) containing Row IDs corresponding to all rows that were successfully deleted (including any child rows of rows specified in the URL).

## Get Row

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}?include=discussions,attachments,columns,columnType \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 4583173393803140,
    rowId: 2361756178769796
};

// Get row.
smartsheet.sheets.getRow(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get row (omit 'include' parameter and pagination parameters).
smartsheet.SheetResources.RowResources.GetRow(sheetId, rowId, null, null);

// Get row (specify 'include' parameter with values of "columns" and "columnType", and 'exclude' parameter with value of "nonexistentCells").
smartsheet.SheetResources.RowResources.GetRow(sheetId, rowId, new RowInclusion[] { RowInclusion.COLUMNS, RowInclusion.COLUMN_TYPE }, new ObjectExclusion[] { ObjectExclusion.NONEXISTENT_CELLS });
```

```java
// Get row (omit 'include' parameter and pagination parameters).
smartsheet.sheetResources().rowResources().getRow(sheetId, rowId, null, null);

// Get row (specify 'include' parameter with values of "columns" and "columnType", and 'exclude' parameter with value of "nonexistentCells").
smartsheet.sheetResources().rowResources().getRow(sheetId, rowId, EnumSet.of(RowInclusion.COLUMNS, RowInclusion.COLUMN_TYPE), EnumSet.of(ObjectExclusion.NONEXISTENT_CELLS));
```

```python
# Get row (include discussions, attachments, columns, and columnType).
row = smartsheet.Sheets.get_row(
    sheetId, 
    rowId, 
    include='discussions,attachments,columns,columnType'
)
```

> Example Response:

```json
{
    "id": 2361756178769796,
    "sheetId": 4583173393803140,
    "rowNumber": 1,
    "expanded": true,
    "cells": [
        {
            "columnType": "TEXT_NUMBER",
            "value": "Revision 1",
            "displayValue": "Revision 1",
            "columnId": 4583173393803140
        },
        {
            "columnType": "PICKLIST",
            "value": "completed",
            "displayValue": "completed",
            "columnId": 2331373580117892
        }
    ],
    "createdAt": "2012-07-24T23:10:55-07:00",
    "modifiedAt": "2012-07-24T23:14:27-07:00"
}
```

`GET /sheets/{sheetId}/rows/{rowId}`

Gets the Row specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of elements to include in the response.<br/><br/>See [Row Include Flags](#row-include-flags).<br/>Also supports the **columns** include flag, which will add a columns array that specifies all of the columns for the sheet. This enables you to have the full context of the cells in the row.<br/><br/>The **filters** include flag may be used in conjunction with **columns** to include the user's column [filters](#filter-object) with the columns.
  | **exclude** (optional): when specified with a value of "nonexistentCells", response will <i>not include</i> cells that have never contained any data
<%= RETURNS %> | [Row object](#row-object)

## List Rows

To get the list of all Rows in a Sheet, use the [Get Sheet](#get-sheet) operation.

## Move Row(s) to Another Sheet

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/move \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{ "rowIds": [145417762563972, 8026717110462340], "to": {"sheetId": 2258256056870788} }'
```

```javascript
// Specify the directive.
var moveRow = {
    "rowIds": [145417762563972, 8026717110462340],
    "to": {
        "sheetId": 2258256056870788
    }
};

// Set options.
var options = {
    body: moveRow,
    sheetId: 2252168947361668
};

// Move rows.
smartsheet.sheets.moveRowToAnotherSheet(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    }
```

```csharp
// Specify destination sheet.
CopyOrMoveRowDestination destination = new CopyOrMoveRowDestination { SheetId = 2258256056870788 };

// Specify rows to be moved (and destination sheet).
CopyOrMoveRowDirective directive = new CopyOrMoveRowDirective { RowIds = new long[] { 145417762563972, 8026717110462340 }, To = destination };

// Move rows (omit 'include' and 'ignoreRowsNotFound' parameters).
smartsheet.SheetResources.RowResources.MoveRowsToAnotherSheet(sheetId, directive, null, null);

// Move rows (specify 'include' parameter with value of "attachments" and "discussions", and 'ignoreRowsNotFound' parameter with value of "true").
smartsheet.SheetResources.RowResources.MoveRowsToAnotherSheet(sheetId, directive, new MoveRowInclusion[] { MoveRowInclusion.ATTACHMENTS, MoveRowInclusion.DISCUSSIONS }, true);
```

```java
// Specify destination sheet.
CopyOrMoveRowDestination destination = new CopyOrMoveRowDestination.InsertCopyOrMoveRowDestinationBuilder().setSheetId(2258256056870788).build();

// Specify rows to be moved (and destination sheet).
CopyOrMoveRowDirective directive = new CopyOrMoveRowDirective.InsertCopyOrMoveRowDirectiveBuilder().setRowIds(Arrays.asList(145417762563972, 8026717110462340)).setTo(destination).build();

// Move rows (omit 'include' and 'ignoreRowsNotFound' parameters).
smartsheet.sheetResources().rowResources().moveRows(sheetId, null, null, directive);

// Move rows (specify 'include' parameter with value of "attachments" and "discussions", and 'ignoreRowsNotFound' parameter with value of "true").
smartsheet.sheetResources().rowResources().moveRows(sheetId, EnumSet.of(EnumSet.of(RowMoveInclusion.ATTACHMENTS, RowMoveInclusion.DISCUSSIONS)), true, directive);
```

```python
# Move rows from one sheet to another sheet.
smartsheet.Sheets.move_rows(
    sheetId,
    smartsheet.models.CopyOrMoveRowDirective({
        'row_ids': [145417762563972, 8026717110462340],
        'to': smartsheet.models.CopyOrMoveRowDestination({
            'sheet_id': 2258256056870788
        })
    })
)
```

<%= partial "snippets/rowCopyMove_response.md.erb" %>

`POST /sheets/{sheetId}/rows/move`

Moves Row(s) from the Sheet specified in the URL to (the bottom of) another sheet.
<aside class="notice">Up to 5,000 row IDs can be specified in the request, but if the total number of rows in the destination sheet after the move exceeds the Smartsheet row limit, an error response will be returned.</aside>
<aside class="notice">Any child rows of the rows specified in the request will also be moved. Parent-child relationships amongst rows will be preserved within the destination sheet.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of row elements to move in addition to the cell data:<ul><li>attachments</li><li>discussions</li></ul>**ignoreRowsNotFound** (optional) -- true or false: default is false. If set to true, specifying row Ids that do not exist within the source sheet will not cause an error response. If omitted or set to false, specifying row Ids that do not exist within the source sheet will cause an error response (and no rows will be moved).
<%= REQUEST %> | [CopyOrMoveRowDirective object](#copyormoverowdirective-object)
<%= RETURNS %> | [CopyOrMoveRowResult object](#copyormoverowresult-object)

## Send Row(s) via Email

<%= partial "snippets/sendRows.md.erb" %>

## Send Update Request

<%= partial "snippets/createUpdateRequest.md.erb" %>

## Update Row(s)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '[{"id": "6572427401553796", "cells": [{"columnId": 7518312134403972,"value": "new value"}, {"columnId": 1888812600190852,"value": "A"}]}, {"id": "2068827774183300", "cells": [{"columnId": 7518312134403972,"value": "desc_updated"}, {"columnId": 1888812600190852,"value": "B"}]}]'
```

```javascript
// Specify updated cell values.
var row = [
    {
        "id": "6572427401553796",
        "cells": [
            {
                "columnId": 7518312134403972,
                "value": "new value"
            },
            {
                "columnId": 1888812600190852,
                "value": "A"
            }
        ]
    },
    {
        "id": "2068827774183300",
        "cells": [
            {
                "columnId": 7518312134403972,
                "value": "desc_updated"
            },
            {
                "columnId": 1888812600190852,
                "value": "B"
            }
        ]
    }
];

// Set options.
var options = {
    body: row,
    sheetId: 2252168947361668
};

// Update rows in sheet.
smartsheet.sheets.updateRow(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify updated cell values for first row.
Cell[] cellsA = new Cell[] { new Cell.UpdateCellBuilder(7518312134403972, "new value").Build(), new Cell.UpdateCellBuilder(1888812600190852, "A").Build() };

// Specify updated contents of first row.
Row rowA = new Row.UpdateRowBuilder(6572427401553796).SetCells(cellsA).Build();

// Specify updated cell values for second row.
Cell[] cellsB = new Cell[] { new Cell.UpdateCellBuilder(7518312134403972, "desc_updated").Build(), new Cell.UpdateCellBuilder(1888812600190852, "B").Build() };

// Specify updated contents of second row.
Row rowB = new Row.UpdateRowBuilder(2068827774183300).SetCells(cellsB).Build();

// Update rows in sheet.
smartsheet.SheetResources.RowResources.UpdateRows(sheetId, new Row[] { rowA, rowB });
```

```java
// Specify updated cell values for first row.
List<Cell> cellsA = new Cell.UpdateRowCellsBuilder().addCell(7518312134403972, "new value").addCell(1888812600190852, "A").build();

// Specify updated contents of first row.
Row rowA = new Row.UpdateRowBuilder().setCells(cellsA).setRowId(6572427401553796).build();

// Specify updated cell values for second row.
List<Cell> cellsB = new Cell.UpdateRowCellsBuilder().addCell(7518312134403972, "desc_updated").addCell(1888812600190852, "B").build();

// Specify updated contents of second row.
Row rowB = new Row.UpdateRowBuilder().setCells(cellsB).setRowId(2068827774183300).build();

// Update rows in sheet.
smartsheet.sheetResources().rowResources().updateRows(sheetId, Arrays.asList(rowA, rowB));
```

```python
# Specify updated cell values for one row.
row_a = smartsheet.Sheets.get_row(sheetId, 6572427401553796)

# use row get_column(columnId) convenience method to pluck the 
# cell with a known columnId out of the row
cell_a = row_a.get_column(7518312134403972)
cell_a.value = 'new value'
cell_b = row_a.get_column(1888812600190852)
cell_b.value = 'A'

# use row set_column(id, Cell) convenience method
# to replace the cell in-place.
row_a.set_column(cell_a.column_id, cell_a)
row_a.set_column(cell_b.column_id, cell_b)

# Specify updated cell values for a second row.
row_b = smartsheet.Sheets.get_row(sheetId, 2068827774183300)
cell_c = row_b.get_column(7518312134403972)
cell_c.value = 'desc_updated'
cell_d = row_b.get_column(1888812600190852)
cell_d.value = 'B'
row_b.set_column(cell_c.column_id, cell_c)
row_b.set_column(cell_d.column_id, cell_d)

# Update rows.
smartsheet.Sheets.update_rows(sheetId, [row_a, row_b])
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": [
        {
            "id": 2068827774183300,
            "rowNumber": 2,
            "parentRowNumber": 1,
            "parentId": 4624744004773764,
            "expanded": true,
            "createdAt": "2015-01-09T11:41:55-08:00",
            "modifiedAt": "2015-02-23T15:36:07-08:00",
            "cells": [
                {
                    "columnId": 7518312134403972,
                    "type": "TEXT_NUMBER",
                    "value": "desc_updated",
                    "displayValue": "desc_updated"
                },
                {
                    "columnId": 1888812600190852,
                    "type": "PICKLIST",
                    "value": "B",
                    "displayValue": "B"
                },
                {
                    "columnId": 6392412227561348,
                    "type": "TEXT_NUMBER",
                    "value": 1,
                    "displayValue": "1"
                }
            ]
        },
        {
            "id": 6572427401553796,
            "rowNumber": 3,
            "parentRowNumber": 1,
            "parentId": 4624744004773764,
            "expanded": true,
            "createdAt": "2015-01-09T11:41:55-08:00",
            "modifiedAt": "2015-02-23T15:36:07-08:00",
            "cells": [
                {
                    "columnId": 7518312134403972,
                    "type": "TEXT_NUMBER",
                    "value": "new value",
                    "displayValue": "new value"
                },
                {
                    "columnId": 1888812600190852,
                    "type": "PICKLIST",
                    "value": "A",
                    "displayValue": "A"
                },
                {
                    "columnId": 6392412227561348,
                    "type": "TEXT_NUMBER",
                    "value": 1,
                    "displayValue": "1"
                }
            ]
        }
    ],
    "version": 8,
    "resultCode": 0
}
```

`PUT /sheets/{sheetId}/rows`

Updates cell values in the specified row(s), expands/collapses the specified row(s), and/or modifies the position of specified rows (including indenting/outdenting). 

<aside class="notice">If a row's position is updated, all child rows are moved with the row.</aside>

<aside class="notice">In a parent row, values of the following fields are auto-calculated based upon values in the child rows (and therefore cannot be updated using the API): Start Date, End Date, Duration, % Complete.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | <%= PARAMETER_ALLOW_PARTIAL_SUCCESS %>
<%= REQUEST %> | [Row object](#row-object) or an array of Row objects, with the following attributes:<ul><li>**id** (required)</li><li>One or more [*location-specifier* attributes](#row-location) (optional)</li><li>**expanded** (optional)</li><li>**format** (optional)</li><li>**cells** (optional) -- if specified, must be an array of [Cell objects](#cell-object), where each object is limited to the following attributes:<ul><li>columnId (required)</li><li>value (required)</li><li>strict (optional)</li><li>format (optional)</li><li>[hyperlink](#hyperlink-object) (optional) with exactly one of the following attributes set:<ul><li>url</li><li>sheetId</li><li>reportId</li></ul></li><li>[linkInFromCell](#celllink-object) (optional) with all of the following attributes set:<ul><li>sheetId</li><li>rowId</li><li>columnId</li></ul></li></ul></li><li>**locked** (optional) - **true** to lock the row or **false** to unlock the row.</li></ul>See [Column Types](#column-types) for more information.<br/><br/>Please note the following:<ul><li>Column Ids must be valid for the sheet to which the row belongs, and must only be used once for each row in the operation.</li><li>Cells containing formulas cannot be updated.</li><li>Cells of a project sheet in the  "Predecessor" or "Finish Date" columns cannot be updated via API.</li><li>Cells of a project sheet in the  "Start Date" column cannot be updated via API for rows that contain a value in the "Predecessor" column.</li><li>Max length for a cell value is 4000 characters after which truncation will occur without warning. Empty string values are converted to null.</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing an array of the updated row(s). 
<%= ERRORS %>  | <u><b>When <code>allowPartialSuccess=false</code> (or not specified):</b></u><br/><br/>If an error occurs, the [Error object](#errors) returned will contain a **detail** attribute set to an object with the following attributes:<ul><li>**index**: the array index of the row that caused the error (0 if a single Row was passed in)</li><li>**rowId**: the id of the row that caused the error (omitted if the row was missing an id)</li></ul>If any error occurs, the entire request will fail (no rows will be updated), and the Error response returned will describe the first problem that was encountered. For example:<br/>{<br/>&#160;&#160;"errorCode": 1042,<br/>&#160;&#160;"message": "The cell value in column 5504245941200772 did not conform to the strict requirements for type CHECKBOX."<br/>&#160;&#160;"detail": {<br/>&#160;&#160;&#160;&#160;"index": 4<br/>&#160;&#160;&#160;&#160;"rowId": 6572427401553796<br/>&#160;&#160;}<br/>}<br/><br/><br/><u><b>When <code>allowPartialSuccess=true</code>:</b></u><br/><br/><%= PARTIAL_SUCCESS %>

## <%= RELATED %>

A Row is comprised of a collection of Cells, and may optionally contain Attachments and/or Discussions.

### Row Attachments

For details about working with a Row's attachments, see [Attachments](#attachments).

### Row Cells

For details about working with a Row's cells, see [Cells](#cells).

For details about working with images in cells, see [Cell Images](#cell-images).

### Row Discussions

For details about working with a Row's discussions, see [Discussions](#discussions).

### Row Include Flags

Endpoints which return rows (e.g. [get sheet](#get-sheet), [get row](#get-row)) support the optional **include** query string parameter. If specified, the value of the **include** parameter is 
a comma-delimited list of flags that indicate additional attributes to be included in each [Row object](#row-object) within the response.

Include Flag | Notes |
-------------|-------|
**discussions**	| Includes row **discussions** array.<br/>To include discussion attachments, both **attachments** and **discussions** must be present in the include list.
**attachments**	| Includes row **attachments** array.<br/>To include discussion attachments, both **attachments** and **discussions** must be present in the include list.
**format**		| Includes **format** attribute on the row and its cells.  See [Formatting](#formatting).
**filters**		| Includes **filteredOut** attribute indicating if the row should be displayed or hidden according to the sheet's filters.
**columnType**	| Includes **columnType** attribute in the row's [cells](#cell-object) indicating the type of the column the cell resides in.
**rowPermalink** | Includes **permalink** attribute that represents a direct link to the [row](#row-object) in the Smartsheet application.
**rowWriterInfo** | Includes **createdBy** and **modifiedBy** attributes on the row, indicating the row's creator, and last modifier.
**objectValue** | Includes **objectValue** attribute on cells containing values. For more information see [Cell Values](#cell-values).

### Row Location

When using the [Add Row(s)](#add-row(s)) operation to insert new rows into a sheet or the [Update Row(s)](#update-row(s)) to move rows in a sheet, 
the following "location-specifier" [Row](#row-object) attributes can be used to specify where the rows get added or moved to in the sheet:

* toTop
* toBotom
* above
* siblingId
* parentId
* indent (applicable when updating a row only)
* outdent (applicable when updating a row only)

The following table describes which *location-specifier* Row attribute(s) should be set to implement various actions.

Action | Row attribute(s)
-------|--------
Add or move the Row to the top of the Sheet. | **toTop** = `true`
Add or move the Row to the bottom of the Sheet. | **toBottom** = `true`
Add or move the Row directly above the specified sibling Row (at the same hierarchical level). | **above** = `true`<br/>**siblingId** = (ID of sibling row)
Add or move the Row directly below the specified sibling Row (at the same hierarchical level). | **siblingId** = (ID of sibling row)
Add or move the Row so that it is the first child row of the specified parent Row. | **parentId** = (ID of parent row)
Add or move the Row so that it is the last child row of the specified parent Row. | **parentId** = (ID of parent row)<br/>**toBottom** = `true`
Indent an existing Row. | **indent** = (number of level to indent, minimum of 1)
Outdent an existing Row. | **outdent** = (number of level to outdent, minimum of 1)

<aside class="notice"><b>Troubleshooting errors:</b>&#160;&#160;If you receive an Error response when attempting to (individually) move both a parent Row and its child Row(s) in a single request, try achieving the objective by using two separate requests: 1) Move parent Row. 2) Move child Row(s).</aside>

# Searching

Use the *Search* operations to search a specific Sheet or to search across all Sheets that a User can access.

## <%= OBJECTS %>

### SearchResult Object

     |     |     |
-----|-----|-----|
**totalCount** | number | Total number of search results
**results** | [SearchResultItem](#searchresultitem-object)[] | Array of SearchResultItem objects

### SearchResultItem Object

     |     |     |
-----|-----|-----|
**text** | string | Search result text excerpt
**objectId** | number | Search result object ID
**objectType** | string | Search result object type (row, sheet, report, template, discussion, attachment)
**parentObjectId** | number | Search result parent object ID
**parentObjectType** | string | Search result parent object type (workspace, folder, sheet, report, template)
**parentObjectName** | string | Search result parent object name
**contextData** | array | Additional info on search result context (row num...)

## Search Everything

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/search?query=stuff \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    query: "stuff"
};

// Search everything.
smartsheet.search.searchAll(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Set search criteria.
string query = "stuff";

// Search everything.
smartsheet.SearchResources.Search(query);
```

```java
// Set search criteria.
string query = "stuff";

// Search everything.
smartsheet.searchResources().search(query);
```

```python
# Set search criteria.
query = 'stuff'

# Search everything.
result = smartsheet.Search.search(query)
# result is a smartsheet.models.SearchResult object
```

> Example Response:

```json
{
    "results": [
        {
            "contextData": [
                "Discussion 1"
            ],
            "objectId": 1888207043356548,
            "objectType": "discussion",
            "parentObjectId": 7141187195824004,
            "parentObjectName": "Sheet 1",
            "parentObjectType": "sheet",
            "text": "discussion stuff goes here"
        },
        {
            "contextData": [
                "Row 1"
            ],
            "objectId": 2711817823774596,
            "objectType": "row",
            "parentObjectId": 2583735121012612,
            "parentObjectName": "Sheet 2",
            "parentObjectType": "sheet",
            "text": "row stuff goes here"
        }
    ],
    "totalCount": 2
}
```

`GET /search`

Searches all Sheets that the User can access, for the specified text.

<aside class="notice">Newly-created or recently-updated data may not be immediately discoverable via Search.</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **query** (required): Text with which to perform the search.
<%= RETURNS %> | [SearchResult object](#searchresult-object) that contains a maximum of 100 [SearchResultems](#searchresultitem-object)

## Search Sheet

<%= partial "snippets/searchSheet.md.erb" %>

# Sending via Email

Use the *Send* operations to send a Report, a Row, or a Sheet via email.

## <%= OBJECTS %>

### Email Object

     |     |     |
-----|-----|-----|
**sendTo**  | [Recipient](#recipient-object)[]  | Array of Recipient objects. Required.
**subject** | string | The subject of the email. Optional.
**message** | string | The message of the email. Optional.
**ccMe** | boolean | A flag to indicate whether or not to send a copy of the email to the sender. Optional, defaults to false.

### FormatDetails Object

     |     |     |
-----|-----|-----|
**paperSize**   | string | One of the following values: LETTER, LEGAL, WIDE, ARCHD, A4, A3, A2, A1, A0.

### Recipient Object

Specifies the recipient of an [Email](#email-object).  The recipient may be either an individual or a group.  To specify an individual, set the **email** attribute; to specify a group, set the **groupId** attribute.
Either **email** and **groupId** may be set, but not both.

     |     |     |
-----|-----|-----|
**email**   | string | The email address of an individual recipient. Optional.
**groupId** | number | The ID of a group recipient. Optional.

### RowEmail Object

Extends the [Email object](#email-object), adding the following:

     |     |     |
-----|-----|-----|
**columnIds** | number[] | IDs of the columns to be included.
**includeAttachments** | boolean | A flag to indicate whether or not to include Attachments in the email.
**includeDiscussions** | boolean | A flag to indicate whether or not to include Discussions in the email.
**layout**   | string | One of the following values: HORIZONTAL, VERTICAL.  Optional, defaults to HORIZONTAL when multiple rows are being sent, and to VERTICAL when a single row is being sent.  HORIZONTAL formats the rows being sent as a grid, whereas VERTICAL formats the rows being sent as separate cards.

### MultiRowEmail Object

Extends the [RowEmail object](#rowemail-object), adding the following:

     |     |     |
-----|-----|-----|
**rowIds** | number[] | IDs of rows to be included.

### SheetEmail Object

Extends the [Email object](#email-object), adding the following:

     |     |     |
-----|-----|-----|
**format** | string | One of the following values:<ul><li>PDF</li><li>PDF_GANTT</li><li>EXCEL</li></ul>
**formatDetails** | [FormatDetails](#formatdetails-object) | A FormatDetails object.

## Send Report

<%= partial "snippets/sendReport.md.erb" %>

## Send Row(s)

<%= partial "snippets/sendRows.md.erb" %>

## Send Sheet

<%= partial "snippets/sendSheet.md.erb" %>

## Send Update Request

<%= partial "snippets/createUpdateRequest.md.erb" %>

# Server Information

For developer convenience, the Smartsheet API provides access to application constants.

## <%= OBJECTS %>

### ServerInfo Object

     |     |     |
-----|-----|-----|
**supportedLocales** | array | Array of strings representing all Smartsheet-supported locales.
**formats** | [FormatTables](#formattables-object) | Definition of format tables that are used in Column, Row, and Cell **format** property.  For more information, see [Formatting](#formatting).

## Get Server Info

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/serverinfo
```

```javascript
// Get server info.
smartsheet.server.getInfo()
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get server info.
smartsheet.ServerInfoResources.GetServerInfo();
```

```java
// Get server info.
smartsheet.serverInfoResources().getServerInfo();
```

```python
# Get server info.
info = smartsheet.Server.server_info()
```

> Example Response: (*too long to list in its entirety*)

```json
{
        "supportedLocales": [  ],
        "formats": {  }
}
```

`GET /serverinfo`

Gets application constants.

     |     |
-----|-----|
<%= SCOPE %> | None required (may be called unauthenticated)
<%= HEADERS %> | None required (may be called unauthenticated)
<%= RETURNS %> | [ServerInfo object](#serverinfo-object)

# Sharing

Use the *Sharing* operations to control sharing of Reports, Sheets, Workspaces, and Sights.

## <%= OBJECTS %>

### Share Object

     |     |     |
-----|-----|-----|
**id**          | number | Share ID.<br/>**NOTE:** unlike other Smartsheet object ids, this id is an alphanumeric string.
**type**        | string | The type of this share. One of the following values: `USER` or `GROUP`.
**userId**      | number | User ID if the share is a user share, else null.
**groupId**     | number | Group ID if the share is a group share, else null.
**email**       | string | User's primary email address for user shares; null for group shares.
**name**        | string | If a user share and user is also a contact, the user's full name.  If a group share, the group's name.
**accessLevel** | string | User or group's [access level](#access-levels) on shared object.
**scope**       | string | The scope of this share. One of the following values: <ul><li>`ITEM`: an item-level share (i.e., the specific object to which the Share applies is shared with the user or group)</li><li>`WORKSPACE`: a workspace-level share (i.e., the workspace that contains the object to which the Share applies is shared with the user or group)</li></ul>
**createdAt**	| timestamp | Time that the share was created.
**modifiedAt**	| timestamp | Time that the share was modified.
**subject**		| string | The subject of the email that will optionally be sent to notify the recipient. <%= REQUEST_ONLY_ATTRIBUTE %>
**message**		| string | The message to be included in the body of the email that will optionally be sent to the recipient. <%= REQUEST_ONLY_ATTRIBUTE %>
**ccMe**		| boolean | Flag to indicate whether or not to send a copy of the email to the sharer of the sheet. <%= REQUEST_ONLY_ATTRIBUTE %>

## Sights Sharing

### Delete Sight Share

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /sights/{sightId}/shares/{shareId}`

Deletes the Share specified in the URL. 

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

### Get Sight Share

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" 
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /sights/{sightId}/shares/{shareId}`

Gets the Share specified in the URL. 

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Share object](#share-object)

### List Sight Shares

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/shares \
-H "Authorization: Bearer ACCESS_TOKEN" 
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /sights/{sightId}/shares`

Gets a list of all Users and Groups to whom the specified Sight is shared, and their access level. 

<aside class="notice"><%= LIST_SHARES_RESPONSE_DESC %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): when specified with a value of `workspaceShares`, response will contain both <i>item-level</i> shares ([<b>scope</b>](#share-object)='ITEM') and <i>workspace-level</i> shares ([<b>scope</b>](#share-object)='WORKSPACE').<br/><br/><%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Share objects](#share-object)<br/><br/>**NOTE:** If the response contains an *item-level* share (**scope**='ITEM') and a *workspace-level* share (**scope**='WORKSPACE') for the same user or group, the **id** of those two [Share](#share-object) objects will be identical, but the **scope** attribute value can be used to disambiguate the two.

### Share Sight

> Example Request: 

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/shares?sendEmail=true \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"email": "jane.doe@smartsheet.com", "accessLevel": "EDITOR"}]'
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /sights/{sightId}/shares`

Shares a Sight with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **sendEmail** (optional): Either `true` or `false` to indicate whether or not to notify the user by email. Default is **false**.
<%= REQUEST %> | [Share object](#share-object) or an array of Share objects, with the following attributes:<ul><li>email (optional): the individual share recipient's email address</li><li>groupId (optional): the group share recipient's group ID</li><li>accessLevel (required)</li><li>subject (optional): The subject of the email that will optionally be sent to notify the recipient.</li><li>message (optional): The message to be included in the body of the email that will optionally be sent to the recipient.</li><li>ccMe (optional): Boolean flag to indicate whether or not to CC the user sharing the sheet.</li></ul>**NOTE:** One of **email** or **groupId** must be specified, but not both.
<%= RETURNS %> | [Result object](#result-object) containing either a single [Share object](#share-object) or an array of Share objects, corresponding to what was specified in the request. All shares will have <b>[scope](#share-object)</b>="ITEM".
<%= ERRORS %>  | If an error occurs because the request specified one or more [*alternate* email addresses](#alternate-email-address(es)) (i.e., not the primary email address associated with the User account), the [Error object](#errors) returned will contain a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "u1+1@smartsheet.com is an alternate address of the user u1@smartsheet.com. Please retry sharing directly to u1@smartsheet.com."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

### Update Sight Share

> Example Request: 

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"accessLevel": "VIEWER"}'
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /sights/{sightId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Sight.

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Share object](#share-object) limited to the following attribute:<ul><li>accessLevel (string)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the modified [Share object](#share-object)

## Report Sharing

### Delete Report Share

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    reportId: 665829219035012,
    shareId: "AAAQSF82F1eE"
};

// Delete report share.
smartsheet.reports.deleteShare(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete report share.
smartsheet.ReportResources.ShareResources.DeleteShare(reportId, shareId);
```

```java
// Delete report share.
smartsheet.reportResources().shareResources().deleteShare(reportId, shareId);
```

```python
# Delete report share.
smartsheet.Reports.delete_share(reportId, shareId)
```

> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /reports/{reportId}/shares/{shareId}`

Deletes the Share specified in the URL. 

<%= partial "snippets/deleteShare_table.md.erb" %>

### Get Report Share

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" 
```

```javascript 
// Set options.
var options = {
    reportId: 6932724448552836,
    shareId: "AQAISF82FOeE"
};

// Get report share.
smartsheet.reports.getShare(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get report share.
smartsheet.ReportResources.ShareResources.GetShare(reportId, shareId);
```

```java
// Get report share.
smartsheet.reportResources().shareResources().getShare(reportId, shareId);
```

```python
# Get report share.
share = smartsheet.Reports.get_share(reportId, shareId)
```

> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /reports/{reportId}/shares/{shareId}`

Gets the Share specified in the URL. 

<%= partial "snippets/getShare_table.md.erb" %>

### List Report Shares

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/shares \
-H "Authorization: Bearer ACCESS_TOKEN" 
```

```javascript
// Set options.
var options = {
    reportId: 665829219035012
};

// List report shares.
smartsheet.reports.listShares(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List report shares (omit pagination parameters).
smartsheet.ReportResources.ShareResources.ListShares(reportId, null);

// List report shares (specify 'includeAll' parameter with value of "true").
smartsheet.ReportResources.ShareResources.ListShares(reportId, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List report shares (specify 'includeAll' parameter with value of "true").
smartsheet.reportResources().shareResources().listShares(reportId, parameters);

// List report shares (omit pagination parameters).
smartsheet.reportResources().shareResources().listShares(reportId, null);
```

```python
# Get all report shares.
action = smartsheet.Reports.list_shares(include_all=True)
shares = action.result

# Get paginated list of report shares.
action = smartsheet.Reports.list_shares(page_size=10, page=1)
pages = action.total_pages
shares = action.result
```

> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /reports/{reportId}/shares`

Gets a list of all Users and Groups to whom the specified Report is shared, and their access level. 

<aside class="notice"><%= LIST_SHARES_RESPONSE_DESC %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listShares_table.md.erb" %>

### Share Report

> Example Request: 

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/shares?sendEmail=true \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"email": "jane.doe@smartsheet.com", "accessLevel": "EDITOR"}]'
```

```javascript
// Specify share (to one user as Editor).
var share = [
	{
		"email": "jane.doe@smartsheet.com", 
		"accessLevel": "EDITOR"
	}
];

// Set options.
var options = {
    body: share,
    reportId: 665829219035012
};

// Share report.
smartsheet.reports.share(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify share (to one user as Editor).
Share[] shares = new Share[] { new Share.CreateShareBuilder("jane.doe@smartsheet.com", AccessLevel.EDITOR).Build() };

// Share report.
smartsheet.ReportResources.ShareResources.ShareTo(reportId, shares, true);
```

```java
// Specify share (to one user as Editor).
List<Share> shares = Arrays.asList(new Share.CreateUserShareBuilder().setEmailAddress("jane.doe@smartsheet.com").setAccessLevel(AccessLevel.EDITOR).build());

// Share report.
smartsheet.reportResources().shareResources().shareTo(reportId, shares, true);
```

```python
# Share report.
smartsheet.Reports.share_report(
    reportId,
    smartsheet.models.Share({
        'access_level': 'EDITOR',
        'email': 'jane.doe@smartsheet.com'
    })
)
```

> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /reports/{reportId}/shares`

Shares a Report with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

<%= partial "snippets/share_table.md.erb" %>

### Update Report Share

> Example Request: 

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"accessLevel": "VIEWER"}'
```

```javascript
// Set the access level to Viewer.
var share = {"accessLevel": "VIEWER"};

// Set options.
var options = {
    body: share,
    reportId: 665829219035012,
    shareId: "AAAFeF82FOeE"
};

// Update report share.
smartsheet.reports.updateShare(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Set the access level to Viewer.
Share share = new Share.UpdateShareBuilder(shareId, AccessLevel.VIEWER).Build();

// Update report share.
smartsheet.ReportResources.ShareResources.UpdateShare(reportId, share);
```

```java
// Set the access level to Viewer.
Share share = new Share.UpdateShareBuilder().setShareId(shareId).setAccessLevel(AccessLevel.VIEWER).build();

// Update report share.
smartsheet.reportResources().shareResources().updateShare(reportId, share);
```

```python
# Update report share.
smartsheet.Reports.update_share(
    reportId,
    shareId,
    smartsheet.models.Share({
        'access_level': 'VIEWER'
    })
)
```

> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /reports/{reportId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Report.

<%= partial "snippets/updateShare_table.md.erb" %>

## Sheet Sharing

### Delete Sheet Share

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    sheetId: 4583614634583940,
    shareId: "AAAASuWWFOeE"
};

// Delete sheet share.
smartsheet.sheets.deleteShare(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete sheet share.
smartsheet.SheetResources.ShareResources.DeleteShare(sheetId, shareId);
```

```java
// Delete sheet share.
smartsheet.sheetResources().shareResources().deleteShare(sheetId, shareId);
```

```python
# Delete sheet share.
smartsheet.Sheets.delete_share(sheetId, shareId)
```

> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /sheets/{sheetId}/shares/{shareId}`

Deletes the Share specified in the URL. 

<%= partial "snippets/deleteShare_table.md.erb" %>

### Get Sheet Share

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" 
```

```javascript
// Set options.
var options = {
    sheetId: 4583614634583940,
    shareId: "AQAISF82FOeE"
};

// Get sheet share.
smartsheet.sheets.getShare(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get sheet share.
smartsheet.SheetResources.ShareResources.GetShare(sheetId, shareId);
```

```java
// Get sheet share.
smartsheet.sheetResources().shareResources().getShare(sheetId, shareId);
```

```python
# Get sheet share.
share = smartsheet.Sheets.get_share(sheetId, shareId)
```

> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /sheets/{sheetId}/shares/{shareId}`

Gets the Share specified in the URL. 

<%= partial "snippets/getShare_table.md.erb" %>

### List Sheet Shares

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares \
-H "Authorization: Bearer ACCESS_TOKEN" 
```

```javascript
// Set options.
var options = {
    sheetId: 4583614634583940
};

// List sheet shares.
smartsheet.sheets.listShares(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List sheet shares (omit pagination parameters).
smartsheet.SheetResources.ShareResources.ListShares(sheetId, null);

// List sheet shares (specify 'includeAll' parameter with value of "true").
smartsheet.SheetResources.ShareResources.ListShares(sheetId, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List sheet shares (specify 'includeAll' parameter with value of "true").
smartsheet.sheetResources().shareResources().listShares(sheetId, parameters);

// List sheet shares (omit pagination parameters).
smartsheet.sheetResources().shareResources().listShares(sheetId, null);
```

```python
# Get all sheet shares.
action = smartsheet.Sheets.list_shares(sheetId, include_all=True)
shares = action.data

# Get paginated list of sheet shares.
action = smartsheet.Sheets.list_shares(sheetId, page_size=10, page=1)
pages = action.total_pages
shares = action.data
```

> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /sheets/{sheetId}/shares`

Gets a list of all Users and Groups to whom the specified Sheet is shared, and their access level. 

<aside class="notice"><%= LIST_SHARES_RESPONSE_DESC %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listShares_table.md.erb" %>

### Share Sheet

> Example Request: 

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares?sendEmail=true \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"email": "jane.doe@smartsheet.com", "accessLevel": "EDITOR"}]'
```

```javascript
// Specify share (to one user as Editor).
var share = [
	{
		"email": "jane.doe@smartsheet.com", 
		"accessLevel": "EDITOR"
	}
];

// Set options.
var options = {
    body: share,
    sheetId: 4583614634583940
};

// Share sheet.
smartsheet.sheets.share(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify share (to one user as Editor).
Share[] shares = new Share[] { new Share.CreateShareBuilder("jane.doe@smartsheet.com", AccessLevel.EDITOR).Build() };

// Share sheet.
smartsheet.SheetResources.ShareResources.ShareTo(sheetId, shares, true);
```

```java
// Specify share (to one user as Editor).
List<Share> shares = Arrays.asList(new Share.CreateUserShareBuilder().setEmailAddress("jane.doe@smartsheet.com").setAccessLevel(AccessLevel.EDITOR).build());

// Share sheet.
smartsheet.sheetResources().shareResources().shareTo(sheetId, shares, true);
```

```python
# Share sheet.
smartsheet.Sheets.share_sheet(
    sheetId,
    smartsheet.models.Share({
        'access_level': 'EDITOR',
        'email': 'jane.doe@smartsheet.com'
    }),
    True
)
```

> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /sheets/{sheetId}/shares`

Shares a Sheet with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

<%= partial "snippets/share_table.md.erb" %>

### Update Sheet Share

> Example Request: 

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"accessLevel": "VIEWER"}'
```

```javascript
// Set access level to Viewer.
var share = {"accessLevel": "VIEWER"};

// Set options.
var options = {
    body: share,
    sheetId: 4583614634583940,
    shareId: "AAAFeF82FOeE"
};

// Update sheet share.
smartsheet.sheets.updateShare(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Set access level to Viewer.
Share share = new Share.UpdateShareBuilder(shareId, AccessLevel.VIEWER).Build();

// Update sheet share.
smartsheet.SheetResources.ShareResources.UpdateShare(sheetId, share);
```

```java
// Set the access level to Viewer.
Share share = new Share.UpdateShareBuilder().setShareId(shareId).setAccessLevel(AccessLevel.VIEWER).build();

// Update report share.
smartsheet.sheetResources().shareResources().updateShare(sheetId, share);
```

```python
# Update sheet share.
smartsheet.Sheets.update_share(
    sheetId,
    shareId,
    smartsheet.models.Share({
        'access_level': 'VIEWER'
    })
)
```

> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /sheets/{sheetId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Sheet.

<%= partial "snippets/updateShare_table.md.erb" %>

## Workspace Sharing

### Delete Workspace Share

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    workspaceId: 1656220827314052,
    shareId: "AAAEQesWFOeE"
};

// Delete workspace share.
smartsheet.workspaces.deleteShare(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete workspace share.
smartsheet.WorkspaceResources.ShareResources.DeleteShare(workspaceId, shareId);
```

```java
// Delete workspace share.
smartsheet.workspaceResources().shareResources().deleteShare(workspaceId, shareId);
```

```python
# Delete workspace share.
smartsheet.Workspaces.delete_share(workspaceId, shareId)
```

> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /workspaces/{workspaceId}/shares/{shareId}`

Deletes the Share specified in the URL. 

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

### Get Workspace Share

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" 
```

```javascript
// Set options.
var options = {
    workspaceId: 1656220827314052,
    shareId: "AQAISF82FOeE"
};

// Get workspace share.
smartsheet.workspaces.getShare(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get workspace share.
smartsheet.WorkspaceResources.ShareResources.GetShare(workspaceId, shareId);
```

```java
// Get workspace share.
smartsheet.workspaceResources().shareResources().getShare(workspaceId, shareId);
```

```python
# Get workspace share.
share = smartsheet.Sheets.get_share(workspaceId, shareId)
```

> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /workspaces/{workspaceId}/shares/{shareId}`

Gets the Share specified in the URL. 

<%= partial "snippets/getShare_table.md.erb" %>

### List Workspace Shares

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares \
-H "Authorization: Bearer ACCESS_TOKEN" 
```

```javascript
// Set options.
var options = {
    workspaceId: 1656220827314052
};

// List workspace shares.
smartsheet.workspaces.listShares(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List workspace shares (omit pagination parameters).
smartsheet.WorkspaceResources.ShareResources.ListShares(workspaceId, null);

// List workspace shares (specify 'includeAll' parameter with value of "true").
smartsheet.WorkspaceResources.ShareResources.ListShares(workspaceId, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List workspace shares (specify 'includeAll' parameter with value of "true").
smartsheet.workspaceResources().shareResources().listShares(workspaceId, parameters);

// List workspace shares (omit pagination parameters).
smartsheet.workspaceResources().shareResources().listShares(workspaceId, null);
```

```python
# Get all workspace shares.
action = smartsheet.Workspaces.list_shares(workspaceId, include_all=True)
shares = action.data

# Get paginated list of workspace shares.
action = smartsheet.Workspaces.list_shares(workspaceId, page_size=10, page=1)
pages = action.total_pages
shares = action.data
```

> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /workspaces/{workspaceId}/shares`

Gets a list of all Users and Groups to whom the specified Workspace is shared, and their access level. 

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Share objects](#share-object)

### Share Workspace

> Example Request: 

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares?sendEmail=true \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"email": "jane.doe@smartsheet.com", "accessLevel": "EDITOR"}]'
```

```javascript
// Specify share (to one user as Editor).
var shares = [
	{
		"email": "john.doe@smartsheet.com",
		"accessLevel": "EDITOR"
	}
];

// Set options.
var options = {
	workspaceId: 7960873114331012,
	body: shares
};

// Share workspace.
smartsheet.workspaces.share(options)
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Specify share (to one user as Editor).
Share[] shares = new Share[] { new Share.CreateShareBuilder("jane.doe@smartsheet.com", AccessLevel.EDITOR).Build() };

// Share workspace.
smartsheet.WorkspaceResources.ShareResources.ShareTo(workspaceId, shares, true);
```

```java
// Specify share (to one user as Editor).
List<Share> shares = Arrays.asList(new Share.CreateUserShareBuilder().setEmailAddress("jane.doe@smartsheet.com").setAccessLevel(AccessLevel.EDITOR).build());

// Share workspace.
smartsheet.workspaceResources().shareResources().shareTo(workspaceId, shares, true);
```

```python
# Share workspace.
smartsheet.Workspaces.share_workspace(
    workspaceId,
    smartsheet.models.Share({
        'access_level': 'EDITOR',
        'email': 'jane.doe@smartsheet.com'
    })
)
```

> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /workspaces/{workspaceId}/shares`

Shares a Workspace with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **sendEmail** (optional): Either `true` or `false` to indicate whether or not to notify the user by email. Default is **false**.
<%= REQUEST %> | [Share object](#share-object) or an array of Share objects, with the following attributes:<ul><li>email (optional): the individual share recipient's email address</li><li>groupId (optional): the group share recipient's group ID</li><li>accessLevel (required)</li><li>subject (optional): The subject of the email that will optionally be sent to notify the recipient.</li><li>message (optional): The message to be included in the body of the email that will optionally be sent to the recipient.</li><li>ccMe (optional): Boolean flag to indicate whether or not to CC the user sharing the sheet.</li></ul>**NOTE:** One of **email** or **groupId** must be specified, but not both.
<%= RETURNS %> | [Result object](#result-object) containing either a single [Share object](#share-object) or an array of Share objects, corresponding to what was specified in the request.
<%= ERRORS %>  | If an error occurs because the request specified one or more [*alternate* email addresses](#alternate-email-address(es)) (i.e., not the primary email address associated with the User account), the [Error object](#errors) returned will contain a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "u1+1@smartsheet.com is an alternate address of the user u1@smartsheet.com. Please retry sharing directly to u1@smartsheet.com."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

### Update Workspace Share

> Example Request: 

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares/{shareId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"accessLevel": "VIEWER"}'
```

```javascript
// Set access level to Viewer.
var share = {"accessLevel": "VIEWER"};

// Set options.
var options = {
    body: share,
    workspaceId: 1656220827314052,
    shareId: "AAAFeF82FOeE"
};

// Update workspace share.
smartsheet.workspaces.updateShare(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Set access level to Viewer.
Share share = new Share.UpdateShareBuilder(shareId, AccessLevel.VIEWER).Build();

// Update workspace share.
smartsheet.WorkspaceResources.ShareResources.UpdateShare(workspaceId, share);
```

```java
// Set the access level to Viewer.
Share share = new Share.UpdateShareBuilder().setShareId(shareId).setAccessLevel(AccessLevel.VIEWER).build();

// Update workspace share.
smartsheet.workspaceResources().shareResources().updateShare(workspaceId, share);
```

```python
# Update workspace share.
smartsheet.Workspaces.update_share(
    workspaceId,
    shareId,
    smartsheet.models.Share({
        'access_level': 'VIEWER'
    })
)
```

> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /workspaces/{workspaceId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Workspace.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Share object](#share-object) limited to the following attribute:<ul><li>accessLevel (string)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the modified [Share object](#share-object)

# Sheets

A Sheet can exist in a user's **Sheets** folder ([Home](#home)), in a [Folder](#folders), or in a [Workspace](#workspaces). It is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

## <%= OBJECTS %>

### Sheet Object

     |     |     |
-----|-----|-----|
**id** | number | Sheet ID
**name** | string | Sheet name
**version** | number | A number that is incremented every time a Sheet is modified
**totalRowCount** | number | The total number of rows in the Sheet
**accessLevel** | string | User's permissions on the Sheet
**effectiveAttachmentOptions** | array | Array of enum strings (see [Attachment.attachmentType](#attachment-object)) indicating the allowable attachment options for the current User and Sheet
**readOnly** | boolean | Returned only if the Sheet belongs to an expired trial (value = "true")
**ganttEnabled** | boolean | Flag to indicate that Gantt is enabled
**dependenciesEnabled** | boolean | Flag to indicate that dependencies are enabled
**resourceManagementEnabled** | boolean | Flag to indicate that resource management is enabled
**favorite** | boolean | Returned only if the User has marked this sheet as a favorite in their Home tab (value = "true")
**showParentRowsForFilters** | boolean | Returned only if there are column filters on the Sheet.  Value = "true" if "show parent rows" is enabled for the filters.
**userSettings** | [SheetUserSettings](#sheetusersettings-object) | A SheetUserSettings object containing the current user's sheet-specific settings.
**owner** | string | Email address of the Sheet owner
**ownerId** | number | User ID of the Sheet owner
**permalink** | string | URL that represents a direct link to the Sheet in Smartsheet
**source** | [Source](#source-object) | A Source object indicating the Sheet or Template from which this sheet was created
**createdAt** | timestamp | Time that the Sheet was created
**modifiedAt** | timestamp | Time that the Sheet was modified
**columns** | [Column](#column-object)[] | Array of Column objects
**rows** | [Row](#row-object)[] | Array of Row objects
**discussions** | [Discussion](#discussion-object)[] | Array of Discussion objects<br/>Only returned if the [**include**](#get-sheet) query string parameter contains **discussions**.
**attachments** | [Attachment](#attachment-object)[] | Array of Attachment objects<br/>Only returned if the [**include**](#get-sheet) query string parameter contains **attachments**.
**fromId** | number | The ID of the Template from which to create the Sheet. This attribute can be specified in a request, but will never be present in a response.

### SheetPublish Object 

     |     |     |
-----|-----|-----|
**readOnlyLiteEnabled** | boolean | If `true`, a lightweight version of the sheet is published without row attachments or discussions.
**readOnlyFullEnabled** | boolean | If `true`, a rich version of the sheet is published with the ability to download row attachments and discussions.
**readWriteEnabled** | boolean | If `true`, a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions.
**icalEnabled** | boolean | If `true`, a webcal will be available for the calendar in the sheet.
**readOnlyFullAccessibleBy** | string | Flag to indicate who can access the 'Read-Only Full' view of the published sheet:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the sheet owner's Smartsheet organization.</li></ul>Only returned in a response if **readOnlyFullEnabled** = true.
**readWriteAccessibleBy** | string | Flag to indicate who can access the 'Edit by Anyone' view of the published sheet:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the sheet owner's Smartsheet organization.</li></ul>Only returned in a response if **readWriteEnabled** = true.
**readOnlyLiteUrl** | string | URL for 'Read-Only HTML' view of the published sheet<br/>Only returned in a response if **readOnlyLiteEnabled** = true.
**readOnlyFullUrl** | string | URL for 'Read-Only Full' view of the published sheet<br/>Only returned in a response if **readOnlyFullEnabled** = true.
**readWriteUrl** | string | URL for 'Edit by Anyone' view of the published sheet<br/>Only returned in a response if **readWriteEnabled** = true.
**icalUrl** | string | URL for 'iCal' view of the published sheet<br/>Only returned in a response if **icalEnabled** = true.

### SheetUserSettings Object

Represents individual user settings for a specific sheet.  User settings may be updated even on sheets where the current user only has read access (e.g. viewer permissions or a read-only sheet).

     |     |     |
-----|-----|-----|
**criticalPathEnabled** | boolean | Does this user have "Show Critical Path" turned on for this sheet?  Note this setting only has an effect on project sheets with dependencies enabled.
**displaySummaryTasks** | boolean | Does this user have "Display Summary Tasks" turned on for this sheet?  Applies only to sheets where Calendar View has been configured.

### Source Object

     |     |     |
-----|-----|-----|
**id** | number | ID of the Sheet or Template from which the enclosing sheet was created
**type** | string | "sheet" or "template"

## Copy Sheet

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/copy?include=all \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-d '{ \
    "destinationType": "folder", \
    "destinationId": 7960873114331012, \
    "newName": "newSheetName" \
}' \
-X POST
```

```csharp
// Specify destination.
ContainerDestination destination = new ContainerDestination
{
	DestinationId = destinationFolderId,
	DestinationType = DestinationType.FOLDER,
	NewName = "newSheetName"
};

// Copy sheet (omit 'include' parameter).
smartsheet.SheetResources.CopySheet(sheetId, destination, null);

// Copy sheet (specify 'include' parameter with value of "all").
smartsheet.SheetResources.CopySheet(sheetId, destination, new SheetCopyInclusion[] { SheetCopyInclusion.ALL });
```

```java
// Specify destination.
ContainerDestination destination = new ContainerDestination.AddContainerDestinationBuilder()
		.setDestinationType(DestinationType.FOLDER)
		.setDestinationId(destinationFolderId)
		.setNewName("newSheetName")
		.build();

// Copy sheet (omit 'include' parameter).
smartsheet.sheetResources().copySheet(sheetId, destination, null);

// Copy sheet (specify 'include' parameter with value of "all").
smartsheet.sheetResources().copySheet(sheetId, destination, EnumSet.of(SheetCopyInclusion.ALL));
```

```python
# Copy sheet.
smartsheet.Sheets.copy_sheet(
    sheetId,
    smartsheet.models.ContainerDestination({
        'destination_type': 'folder', # folder or workspace or home
        'destination_id': folderId,
        'new_name': 'newSheetName'
    })
)
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": {
        "id": 4583173393803140,
        "name": "newSheetName",
        "accessLevel": "OWNER",
        "permalink": "https://{base_url}?lx=lB0JaOh6AX1wGwqxsQIMaA"
    },
    "message": "SUCCESS"
}
```

`POST /sheets/{sheetId}/copy`

Creates a copy of the specified Sheet.

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of elements to copy:<ul><li>data</li><li>attachments</li><li>discussions</li><li>cellLinks</li><li>forms</li><li>**all** - specify a value of "all" to include everything (data, attachments, discussions, cellLinks, and forms)</li></ul><i>Note</i>: Cell history will not be copied, regardless of which **include** parameter values are specified.
<%= REQUEST %> | [ContainerDestination object](#containerdestination-object)
<%= RETURNS %> | [Result object](#result-object) containing a [Sheet object](#sheet-object) for the newly created Sheet, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Create Sheet

To create a Sheet from scratch, use one of the following operations (according to where you want to create the Sheet):
<ul>
<li>[Create Sheet](#create-sheet-in-"sheets"-folder)</li>
<li>[Create Sheet in Folder](#create-sheet-in-folder)</li>
<li>[Create Sheet in Workspace](#create-sheet-in-workspace)</li>
</ul>
<p>To create a Sheet from a Template, see [Create Sheet from Template](#create-sheet-from-template).</p>

### Create Sheet in "Sheets" folder

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet","columns":[{"title":"Favorite","type":"CHECKBOX","symbol":"STAR"}, {"title":"Primary Column", "primary":true,"type":"TEXT_NUMBER"}, {"title":"Status", "type":"PICKLIST", "options":["Not Started","Started","Completed"]}]}'
```

```javascript
// Specify sheet properties.
var sheet = {
    "name": "newsheet",
    "columns": [
        {
            "title": "Favorite",
            "type": "CHECKBOX",
            "symbol": "STAR"
        },
        {
            "title": "Primary Column",
            "primary": true,
            "type": "TEXT_NUMBER"
        },
        {
            "title": "Status",
            "type": "PICKLIST",
            "options": [
                "Not Started",
                "Started",
                "Completed"
            ]
        }
    ]
};

// Set options.
var options = {
	body: sheet
};

// Create sheet in "Sheets" folder.
smartsheet.sheets.createSheet(options)
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Specify properties of the first column.
Column columnA = new Column.CreateSheetColumnBuilder("Favorite", null, ColumnType.CHECKBOX).SetSymbol(Symbol.STAR).Build(), 

// Specify properties of the second column.
Column columnB = new Column.CreateSheetColumnBuilder("Primary Column", true, ColumnType.TEXT_NUMBER).Build(), 

// Specify properties of the third column.
Column columnC = new Column.CreateSheetColumnBuilder("col 3", false, ColumnType.PICKLIST).SetOptions(new string[] { "Not Started", "Started", "Completed" }).Build() };
	
// Create sheet in "Sheets" folder (specifying the 3 columns to include in the sheet).
smartsheet.SheetResources.CreateSheet(new Sheet.CreateSheetBuilder("newsheet", new Column[] { columnA, columnB, columnC }).Build());
```

```java
// Specify properties of the first column.
Column columnA = new Column.AddColumnToSheetBuilder().setTitle("Favorite").setType(ColumnType.CHECKBOX).setSymbol(Symbol.STAR).build();

// Specify properties of the second column.
Column columnB = new Column.AddColumnToSheetBuilder().setTitle("Primary Column").setType(ColumnType.TEXT_NUMBER).setPrimary(true).build();

// Specify properties of the third column.
Column columnC = new Column.AddColumnToSheetBuilder().setTitle("col 3").setType(ColumnType.PICKLIST).setOptions(Arrays.asList("Not Started", "Started", "Completed")).setPrimary(false).build();

// Create sheet in "Sheets" folder (specifying the 3 columns to include in the sheet).
Sheet sheet = new Sheet.CreateSheetBuilder().setName("newsheet").setColumns(Arrays.asList(columnA, columnB, columnC)).build();
smartsheet.sheetResources().createSheet(sheet);
```

```python
# Create sheet in "Sheets" folder.
sheet = smartsheet.models.Sheet({
    'name': 'newsheet',
    'columns': [{
            'title': 'Favorite',
            'type': 'CHECKBOX',
            'symbol': 'STAR'
        }, {
            'title': 'Primary Column',
            'primary': True,
            'type': 'TEXT_NUMBER'
        }, {
            'title': 'Status',
            'type': 'PICKLIST',
            'options': [
                'Not Started',
                'Started',
                'Completed'
            ]
        }
    ]
})
action = smartsheet.Home.create_sheet(sheet)
sheet = action.result
```

> Example Response:

<%= partial "snippets/createSheet_response.md.erb" %>

`POST /sheets`

Creates a Sheet from scratch in the user's **Sheets** folder ([Home](#home)). To create a Sheet from scratch in a subfolder of the **Sheets** folder, use [Create Sheet in Folder](#create-sheet-in-folder). 

<%= partial "snippets/createSheet_table.md.erb" %>

### Create Sheet in Folder

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId}/sheets \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet","columns":[{"title":"Favorite","type":"CHECKBOX","symbol":"STAR"}, {"title":"Primary Column", "primary":true,"type":"TEXT_NUMBER"}, {"title":"Status", "type":"PICKLIST", "options":["Not Started","Started","Completed"]}]}'
```

```javascript
// Specify sheet properties.
var sheet = {
    "name": "newsheet",
    "columns": [
        {
            "title": "Favorite",
            "type": "CHECKBOX",
            "symbol": "STAR"
        },
        {
            "title": "Primary Column",
            "primary": true,
            "type": "TEXT_NUMBER"
        },
        {
            "title": "Status",
            "type": "PICKLIST",
            "options": [
                "Not Started",
                "Started",
                "Completed"
            ]
        }
    ]
};

// Set options.
var options = {
    body: sheet,
    folderId: 3734419270854532
};

// Create sheet in folder.
smartsheet.sheets.createSheetInFolder(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify properties of the first column.
Column columnA = new Column.CreateSheetColumnBuilder("Favorite", null, ColumnType.CHECKBOX).SetSymbol(Symbol.STAR).Build(), 

// Specify properties of the second column.
Column columnB = new Column.CreateSheetColumnBuilder("Primary Column", true, ColumnType.TEXT_NUMBER).Build(), 

// Specify properties of the third column.
Column columnC = new Column.CreateSheetColumnBuilder("col 3", false, ColumnType.PICKLIST).SetOptions(new string[] { "Not Started", "Started", "Completed" }).Build() };
	
// Create sheet in folder (specifying the 3 columns to include in the sheet).
smartsheet.FolderResources.SheetResources.CreateSheet(folderId, new Sheet.CreateSheetBuilder("newsheet", new Column[] { columnA, columnB, columnC }).Build());
```

```java
// Specify properties of the first column.
Column columnA = new Column.AddColumnToSheetBuilder().setTitle("Favorite").setType(ColumnType.CHECKBOX).setSymbol(Symbol.STAR).build();

// Specify properties of the second column.
Column columnB = new Column.AddColumnToSheetBuilder().setTitle("Primary Column").setType(ColumnType.TEXT_NUMBER).setPrimary(true).build();

// Specify properties of the third column.
Column columnC = new Column.AddColumnToSheetBuilder().setTitle("col 3").setType(ColumnType.PICKLIST).setOptions(Arrays.asList("Not Started", "Started", "Completed")).setPrimary(false).build();

// Create sheet in folder (specifying the 3 columns to include in the sheet).
Sheet sheet = new Sheet.CreateSheetBuilder().setName("newsheet").setColumns(Arrays.asList(columnA, columnB, columnC)).build();

smartsheet.sheetResources().createSheetInFolder(folderId, sheet);
```

```python
# Create sheet in folder.
sheet = smartsheet.models.Sheet({
    'name': 'newsheet',
    'columns': [{
            'title': 'Favorite',
            'type': 'CHECKBOX',
            'symbol': 'STAR'
        }, {
            'title': 'Primary Column',
            'primary': True,
            'type': 'TEXT_NUMBER'
        }, {
            'title': 'Status',
            'type': 'PICKLIST',
            'options': [
                'Not Started',
                'Started',
                'Completed'
            ]
        }
    ]
})
action = smartsheet.Folders.create_sheet_in_folder(folderId, sheet)
sheet = action.result
```

> Example Response:

<%= partial "snippets/createSheet_response.md.erb" %>

`POST /folders/{folderId}/sheets`

Creates a Sheet from scratch in the specified Folder.

<%= partial "snippets/createSheet_table.md.erb" %>

### Create Sheet in Workspace 

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/sheets \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet","columns":[{"title":"Favorite","type":"CHECKBOX","symbol":"STAR"}, {"title":"Primary Column", "primary":true,"type":"TEXT_NUMBER"}, {"title":"Status", "type":"PICKLIST", "options":["Not Started","Started","Completed"]}]}'
```

```javascript
// Specify sheet properties.
var sheet = {
    "name": "newsheet",
    "columns": [
        {
            "title": "Favorite",
            "type": "CHECKBOX",
            "symbol": "STAR"
        },
        {
            "title": "Primary Column",
            "primary": true,
            "type": "TEXT_NUMBER"
        },
        {
            "title": "Status",
            "type": "PICKLIST",
            "options": [
                "Not Started",
                "Started",
                "Completed"
            ]
        }
    ]
};

// Set options.
var options = {
	body: sheet,
	workspaceId: 1656220827314052
};

// Create sheet in workspace.
smartsheet.sheets.createSheetInWorkspace(options)
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Specify properties of the first column.
Column columnA = new Column.CreateSheetColumnBuilder("Favorite", null, ColumnType.CHECKBOX).SetSymbol(Symbol.STAR).Build(), 

// Specify properties of the second column.
Column columnB = new Column.CreateSheetColumnBuilder("Primary Column", true, ColumnType.TEXT_NUMBER).Build(), 

// Specify properties of the third column.
Column columnC = new Column.CreateSheetColumnBuilder("col 3", false, ColumnType.PICKLIST).SetOptions(new string[] { "Not Started", "Started", "Completed" }).Build() };
	
// Create sheet in workspace (specifying the 3 columns to include in the sheet).
smartsheet.WorkspaceResources.SheetResources.CreateSheet(workspaceId, new Sheet.CreateSheetBuilder("newsheet", new Column[] { columnA, columnB, columnC }).Build());
```

```java
// Specify properties of the first column.
Column columnA = new Column.AddColumnToSheetBuilder().setTitle("Favorite").setType(ColumnType.CHECKBOX).setSymbol(Symbol.STAR).build();

// Specify properties of the second column.
Column columnB = new Column.AddColumnToSheetBuilder().setTitle("Primary Column").setType(ColumnType.TEXT_NUMBER).setPrimary(true).build();

// Specify properties of the third column.
Column columnC = new Column.AddColumnToSheetBuilder().setTitle("col 3").setType(ColumnType.PICKLIST).setOptions(Arrays.asList("Not Started", "Started", "Completed")).setPrimary(false).build();

// Create sheet in workspace (specifying the 3 columns to include in the sheet).
Sheet sheet = new Sheet.CreateSheetBuilder().setName("newsheet").setColumns(Arrays.asList(columnA, columnB, columnC)).build();

smartsheet.sheetResources().createSheetInWorkspace(workspaceId, sheet);
```

```python
# Create sheet in workspace.
sheet = smartsheet.models.Sheet({
    'name': 'newsheet',
    'columns': [{
            'title': 'Favorite',
            'type': 'CHECKBOX',
            'symbol': 'STAR'
        }, {
            'title': 'Primary Column',
            'primary': True,
            'type': 'TEXT_NUMBER'
        }, {
            'title': 'Status',
            'type': 'PICKLIST',
            'options': [
                'Not Started',
                'Started',
                'Completed'
            ]
        }
    ]
})

action = smartsheet.Workspaces.create_sheet_in_workspace(workspaceId, sheet)
sheet = action.result
```

> Example Response:

<%= partial "snippets/createSheet_response.md.erb" %>

`POST /workspaces/{workspaceId}/sheets`

Creates a Sheet from scratch at the top-level of the specified Workspace. To create a Sheet from scratch in a Folder within a Workspace, use [Create Sheet in Folder](#create-sheet-in-folder).

<%= partial "snippets/createSheet_table.md.erb" %>

## Create Sheet from Template

To create a Sheet from a Template, use one of the following operations (according to where you want to create the Sheet):
<ul>
<li>[Create Sheet in "Sheets" folder from Template](#create-sheet-in-"sheets"-folder-from-template)</li>
<li>[Create Sheet in Folder from Template](#create-sheet-in-folder-from-template)</li>
<li>[Create Sheet in Workspace from Template](#create-sheet-in-workspace-from-template)</li>
</ul>
<p>To create a Sheet from scratch, see [Create Sheet](#create-sheet).</p>

### Create Sheet in "Sheets" folder from Template

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets?include=data,attachments,discussions \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet", "fromId": templateId}'
```

```javascript
// Specify the directive.
var sheet = {
    "name": "newsheet",
    "fromId": 7679398137620356
};

// Set options.
var options = {
    body: sheet
};

// Create sheet from template.
smartsheet.sheets.createSheetFromExisting(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify name for the sheet and ID of the template.
Sheet sheet = new Sheet.CreateSheetFromTemplateBuilder("newsheet", templateId).Build();

// Create sheet from template (omit 'include' parameter).
smartsheet.SheetResources.CreateSheetFromTemplate(sheet, null);

// Create sheet from template (including data, attachments, and discussions).
smartsheet.SheetResources.CreateSheetFromTemplate(sheet, new TemplateInclusion[] { TemplateInclusion.DATA, TemplateInclusion.ATTACHMENTS, TemplateInclusion.DISCUSSIONS });
```

```java
// Specify name for the sheet and ID of the template.
Sheet sheet = new Sheet.CreateFromTemplateOrSheetBuilder().setFromId(templateId).setName("newsheet").build();

// Create sheet from template (omit 'include' parameter).
smartsheet.sheetResources().createSheetFromTemplate(sheet, null);

// Create sheet from template (including data, attachments, and discussions).
smartsheet.sheetResources().createSheetFromTemplate(sheet, EnumSet.of(SheetTemplateInclusion.ATTACHMENTS, SheetTemplateInclusion.DATA, SheetTemplateInclusion.DISCUSSIONS));
```

```python
# Create sheet in "Sheets" folder, from specified template.
action = smartsheet.Home.create_sheet_from_template(
    smartsheet.models.Sheet({
        'name': 'newsheet',
        'from_id': templateId
    })
)
sheet = action.result
```

> Example Response:

<%= partial "snippets/createSheetFromExisting_response.md.erb" %>

`POST /sheets`

Creates a Sheet in the user's **Sheets** folder ([Home](#home)), from the specified Template. To create a Sheet in a subfolder of the **Sheets** folder, use [Create Sheet in Folder from Template](#create-sheet-in-folder-from-template).

<%= partial "snippets/createSheetFromExisting_table.md.erb" %>

### Create Sheet in Folder from Template

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId}/sheets?include=data,attachments,discussions \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet", "fromId": 7679398137620356}'
```

``` javascript
// Specify the directive.
var sheet = {
    "name": "newsheet",
    "fromId": 7679398137620356
};

// Set options.
var options = {
    body: sheet,
    folderId: 3734419270854532
};

// Create sheet from template in the specified folder.
smartsheet.sheets.createSheetFromExisting(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify name for the sheet and ID of the template.
Sheet sheet = new Sheet.CreateSheetFromTemplateBuilder("newsheet", templateId).Build();

// Create sheet from template in the specified folder (omit 'include' parameter).
smartsheet.FolderResources.SheetResources.CreateSheetFromTemplate(folderId, sheet, null);

// Create sheet from template in the specified folder (including data, attachments, and discussions).
smartsheet.FolderResources.SheetResources.CreateSheetFromTemplate(folderId, sheet, new TemplateInclusion[] { TemplateInclusion.DATA, TemplateInclusion.ATTACHMENTS, TemplateInclusion.DISCUSSIONS });
```

```java
// Specify name for the sheet and ID of the template.
Sheet sheet = new Sheet.CreateFromTemplateOrSheetBuilder().setFromId(templateId).setName("newsheet").build();

// Create sheet from template in the specified folder (omit 'include' parameter).
smartsheet.sheetResources().createSheetInFolderFromTemplate(folderId, sheet, null);

// Create sheet from template (including data, attachments, and discussions).
smartsheet.sheetResources().createSheetInFolderFromTemplate(folderId, sheet, EnumSet.of(SheetTemplateInclusion.ATTACHMENTS, SheetTemplateInclusion.DATA, SheetTemplateInclusion.DISCUSSIONS));	
```

```python
# Create sheet in folder, from specified template.
action = smartsheet.Folders.create_sheet_in_folder_from_template(
    folderId,
    smartsheet.models.Sheet({
        'name': 'newsheet',
        'from_id': 7679398137620356
    })
)
```

> Example Response:

<%= partial "snippets/createSheetFromExisting_response.md.erb" %>

`POST /folders/{folderId}/sheets`

Creates a Sheet in the specified Folder, from the specified Template.

<%= partial "snippets/createSheetFromExisting_table.md.erb" %>

### Create Sheet in Workspace from Template

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/sheets?include=data,attachments,discussions \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet", "fromId": 7679398137620356}'
```

```javascript
// Specify the directive.
var sheet = {
    "name": "newsheet",
    "fromId": 7679398137620356
};

// Set options.
var options = {
    body: sheet,
    workspaceId: 1656220827314052
};

// Create sheet from template in the specified workspace.
smartsheet.sheets.createSheetFromExisting(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify name for the sheet and ID of the template.
Sheet sheet = new Sheet.CreateSheetFromTemplateBuilder("newsheet", templateId).Build();

// Create sheet from template in the specified workspace (omit 'include' parameter).
smartsheet.WorkspaceResources.SheetResources.CreateSheetFromTemplate(workspaceId, sheet, null);

// Create sheet from template in the specified workspace (including data, attachments, and discussions).
smartsheet.WorkspaceResources.SheetResources.CreateSheetFromTemplate(workspaceId, sheet, new TemplateInclusion[] { TemplateInclusion.DATA, TemplateInclusion.ATTACHMENTS, TemplateInclusion.DISCUSSIONS });
```

```java
// Specify name for the sheet and ID of the template.
Sheet sheet = new Sheet.CreateFromTemplateOrSheetBuilder().setFromId(templateId).setName("newsheet").build();

// Create sheet from template in the specified folder (omit 'include' parameter).
smartsheet.sheetResources().createSheetInFolderFromTemplate(folderId, sheet, null);

// Create sheet from template in the specified workspace (including data, attachments, and discussions).
smartsheet.sheetResources().createSheetInWorkspaceFromTemplate(folderId, sheet, EnumSet.of(SheetTemplateInclusion.ATTACHMENTS, SheetTemplateInclusion.DATA, SheetTemplateInclusion.DISCUSSIONS));	
```

```python
# Create sheet in workspace, from specified template.
action = smartsheet.Workspaces.create_sheet_in_workspace_from_template(
    workspaceId,
    smartsheet.models.Sheet({
        'name': 'newsheet',
        'from_id': 7679398137620356
    })
)
```

> Example Response:

<%= partial "snippets/createSheetFromExisting_response.md.erb" %>

`POST /workspaces/{workspaceId}/sheets`

Creates a Sheet at the top-level of the specified Workspace, from the specified Template. To create a Sheet in a Folder within a Workspace, use [Create Sheet in Folder from Template](#create-sheet-in-folder-from-template).

<%= partial "snippets/createSheetFromExisting_table.md.erb" %>

## Delete Sheet

> Example Request:

```shell
...curl https://api.smartsheet.com/2.0/sheets/{sheetId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    id: 1531988831168388 // ID of Sheet
};

// Delete sheet.
smartsheet.sheets.deleteSheet(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete sheet.
smartsheet.SheetResources.DeleteSheet(sheetId);
```

```java
// Delete sheet.
smartsheet.sheetResources().deleteSheet(sheetId);
```

```python
# Delete sheet.
smartsheet.Sheets.delete_sheet(sheetId)
```

> Example Response:

```json
{
    "resultCode": 0,
    "message": "SUCCESS"
}
```

`DELETE /sheets/{sheetId}`

Deletes the Sheet specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | DELETE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

## Get Sheet Version

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/version \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    sheetId: 1531988831168388
};

// Get sheet version.
smartsheet.sheets.getSheetVersion(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get sheet version.
smartsheet.SheetResources.GetSheetVersion(sheetId);
```

```java
// Get sheet version.
smartsheet.sheetResources().getSheetVersion(sheetId);
```

```python
# Get sheet version.
smartsheet.Sheets.get_sheet_version(sheetId)
```

> Example Response:

```json
{
    "version": "23"
}
```

`GET /sheets/{sheetId}/version`

Gets the Sheet version without loading the entire Sheet.

The following actions increment Sheet version:
<ul>
<li>add/modify cell value</li>
<li>add/modify row</li>
<li>add/modify Discussion/Comment</li>
<li>change formatting</li>
<li>add/remove/update version attachment</li>
<li>cell updated via cell link</li>
</ul>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | A simple object with only a **version** attribute

## Get Sheet

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
	id: 4583173393803140 // ID of Sheet
};

// Get sheet.
smartsheet.sheets.getSheet(options)
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Get sheet (omit all parameters).
smartsheet.SheetResources.GetSheet(sheetId, null, null, null, null, null, null, null);
```

```java
// Get sheet (omit all parameters).
smartsheet.sheetResources().getSheet(sheetId, null, null, null, null, null, null, null);
```

```python
# Get sheet.
sheet = smartsheet.Sheets.get_sheet(sheetId)
```

> Example Response:

```json
{
    "accessLevel": "OWNER",
    "columns": [
        {
            "id": 4583173393803140,
            "index": 0,
            "primary": true,
            "title": "Primary Column",
            "type": "TEXT_NUMBER"
        },
        {
            "id": 2331373580117892,
            "index": 1,
            "options": [
                "new",
                "in progress",
                "completed"
            ],
            "title": "status",
            "type": "PICKLIST"
        }
    ],
    "createdAt": "2012-07-24T18:22:29-07:00",
    "id": 4583173393803140,
    "modifiedAt": "2012-07-24T18:30:52-07:00",
    "name": "sheet 1",
    "permalink": "https://app.smartsheet.com/b/home?lx=pWNSDH9itjBXxBzFmyf-5w",
    "rows": []
}
```

`GET /sheets/{sheetId}`

Gets the Sheet specified in the URL. Returns the Sheet, including Rows, and optionally populated with Discussion and Attachment objects.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response.<br/>Supports all [Row Include Flags](#row-include-flags) with the following differences:<ul><li>**discussions**: includes sheet-level and row-level discussions</li><li>**attachments**: includes sheet-level and row-level attachments</li><li>**format**: includes column, row, and cell formatting</li><li>**filters**: includes [column filters](#filter-object), and [row.filteredOut](#row-object) attribute</li><li>**ownerInfo**: includes owner's email address and user ID</li></ul>Also supports the **source** include flag, which adds the [source object](#source-object) indicating which sheet or template the sheet was created from, if any.
  | **exclude** (optional): when specified with a value of "nonexistentCells", response will <i>not include</i> cells that have never contained any data
  | **rowIds** (optional): a comma-separated list of Row IDs on which to filter the rows included in the result
  | **rowNumbers** (optional): a comma-separated list of Row numbers  on which to filter the rows included in the result.  Non-existent row numbers are ignored.
  | **columnIds** (optional): a comma-separated list of Column IDs. The response will contain only the specified columns in the "columns" array, and individual rows' "cells" array will only contain cells in the specified columns.
  | **pageSize** (optional): number of rows per page to include with the sheet.  If neither **pageSize** or **page** are specified, returns all rows in the sheet.  If only page is specified, defaults to a page size of 100.
  | **page** (optional): which page number (1-based) to return.  If not specified, the default value is 1.  If a page number is specified that is greater than the number of total pages, the last page will be returned.
<%= RETURNS %> | [Sheet object](#sheet-object), populated according to the **include** parameter

## Get Sheet as Excel / PDF / CSV

> Example Request (Excel):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Accept: application/vnd.ms-excel" \
-o output.xlsx
```

```javascript
// Set options.
var options = {
  id: 4583173393803140 // ID of Sheet
};

// Get sheet as Excel.
smartsheet.sheets.getSheetAsExcel(options)
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Get sheet as Excel.
smartsheet.SheetResources.GetSheetAsExcel(sheetId, outputStream);
```

```java
// Get sheet as Excel.
smartsheet.sheetResources().getSheetAsExcel(sheetId, outputStream);
```

```python
# Get sheet as Excel.
smartsheet.Sheets.get_sheet_as_excel(sheetId, download_directory_path)
```

> Example Response:

```shell
# See local file named "output.xlsx"
```

```javascript
// [todo]
```

```csharp
// Contents of Excel file will be written to "outputStream"
```

```java
// Contents of Excel file will be written to "outputStream"
```

```python
# download directory will contain the downloaded Excel file
```

> Example Request (PDF):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}?paperSize=A1 \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Accept: application/pdf" 
-o  output.pdf
```

```javascript
// Set options.
var options = {
  id: 4583173393803140 // ID of Sheet
};

// Get sheet as PDF.
smartsheet.sheets.getSheetAsPDF(options)
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Get sheet as PDF.
smartsheet.SheetResources.GetSheetAsPDF(sheetId, outputStream, PaperSize.A1);
```

```java
// Get sheet as PDF.
smartsheet.sheetResources().getSheetAsPDF(sheetId, outputStream, PaperSize.A1);
```

```python
# Get sheet as PDF.
smartsheet.Sheets.get_sheet_as_pdf(sheetId, download_directory_path, 'A1')
```

> Example Response:

```shell
# See local file named "output.pdf"
```

```javascript
// [todo]
```

```csharp
// Contents of PDF file will be written to "outputStream"
```

```java
// Contents of PDF file will be written to "outputStream"
```

```python
# download directory will contain the downloaded PDF file
```

> Example Request (CSV):

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Accept: text/csv" \
-o output.csv
```

```javascript
// Set options.
var options = {
  id: 4583173393803140 // ID of Sheet
};

// Get sheet as CSV.
smartsheet.sheets.getSheetAsCSV(options)
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Get sheet as CSV.
smartsheet.SheetResources.GetSheetAsCSV(sheetId, outputStream);
```

```java
// Get sheet as CSV.
smartsheet.sheetResources().getSheetAsCSV(sheetId, outputStream);
```

```python
# Get sheet as CSV.
smartsheet.Sheets.get_sheet_as_csv(sheetId, download_directory_path)
```

> Example Response:

```shell
# See local file named "output.csv"
```

```javascript
// [todo]
```

```csharp
// Contents of CSV file will be written to "outputStream"
```

```java
// Contents of CSV file will be written to "outputStream"
```

```python
# download directory will contain the downloaded CSV file
```

`GET /sheets/{sheetId}`

Gets the Sheet in the format specified, based on the Sheet ID.  

<aside class="notice">Note:<ul><li>For Excel format, only .xlsx output format is supported at this time.</li><li>Gantt chart is not generated at this time.</li></ul></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
 | **Accept** -- must be set to one of the following values:<ul><li>application/pdf</li><li>application/vnd.ms-excel</li><li>text/csv</li></ul>
<%= PARAMETERS %> | **paperSize** (optional) -- applies to PDF only, must be one of:<ul><li>LETTER (default)</li><li>LEGAL</li><li>WIDE (same as 11x17)</li><li>ARCHD</li><li>A4</li><li>A3</li><li>A2</li><li>A1</li><li>A0</li></ul>
<%= RETURNS %> | The file in either Excel, PDF, or CSV format.

## List All Org Sheets

<%= partial "snippets/listAllOrgSheets.md.erb" %>

## List Sheets

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// List sheets.
smartsheet.sheets.listSheets()
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// List sheets (omit 'include' parameter and pagination parameters).
smartsheet.SheetResources.ListSheets(null, null);

// List sheets (specify 'include' parameter with value of "source", and 'includeAll' parameter with value of "true").
smartsheet.SheetResources.ListSheets(new SheetInclusion[] { SheetInclusion.SOURCE }, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List sheets (specify 'include' parameter with value of "source", and 'includeAll' parameter with value of "true").
smartsheet.sheetResources().listSheets(EnumSet.of(SourceInclusion.SOURCE), parameters);

// List sheets (omit 'include' parameter and pagination parameters).
smartsheet.sheetResources().listSheets(null, null);
```

```python
# List sheets.
action = smartsheet.Sheets.list_sheets(include_all=True)
sheets = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 2,
	"data": [
		{
			"accessLevel": "OWNER",
			"id": 4583173393803140,
			"name": "sheet 1",
			"permalink": "https://app.smartsheet.com/b/home?lx=xUefSOIYmn07iJJesvSHCQ",
            "createdAt": "2015-06-05T20:05:29Z",
            "modifiedAt": "2015-06-05T20:05:43Z"
		},
		{
			"accessLevel": "OWNER",
			"id": 2331373580117892,
			"name": "sheet 2",
			"permalink": "https://app.smartsheet.com/b/home?lx=xUefSOIYmn07iJJrthEFTG",
            "createdAt": "2015-06-05T20:05:29Z",
            "modifiedAt": "2015-06-05T20:05:43Z"
		}
	]
}
```

`GET /sheets`

Gets the list of all Sheets that the User has access to, in alphabetical order, by name.

<aside class="notice"><%= SUPPORTS_NUMERICDATES %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user ID for each sheet</li><li>source - the [source](#source-object) for any sheet that was created from another sheet or template</li></ul>
 | <%= PARAMETER_MODIFIEDSINCE %>
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Sheet objects](#sheet-object) limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li><li>source (included only if "source" is specified with the **include** parameter)</li><li>owner (included only if "ownerInfo" is specified with the **include** parameter)</li><li>ownerId (included only if "ownerInfo" is specified with the **include** parameter)</li><li>createdAt</li><li>modifiedAt</li></ul>

## Move Sheet

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/move \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-d '{ \
    "destinationType": "folder", \
    "destinationId": 7960873114331012, \
}' \
-X POST
```

```csharp
// Specify destination.
ContainerDestination destination = new ContainerDestination
{
	DestinationId = destinationFolderId,
	DestinationType = DestinationType.FOLDER,
};

// Move sheet.
smartsheet.SheetResources.MoveSheet(sheetId, destination);
```

```java
// Specify destination.
ContainerDestination destination = new ContainerDestination.AddContainerDestinationBuilder()
		.setDestinationType(DestinationType.FOLDER)
		.setDestinationId(destinationFolderId)
		.build();

// Move sheet.
smartsheet.sheetResources().moveSheet(sheetId, destination);
```

```python
# Move sheet.
smartsheet.Sheets.move_sheet(
    sheetId,
    smartsheet.models.ContainerDestination({
        'destination_type': 'folder', # folder or workspace or home
        'destination_id': folderId
    })
)
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": {
        "id": 4583173393803140,
        "name": "moved_sheet_name",
        "accessLevel": "OWNER",
        "permalink": "https://{base_url}?lx=lB0JaOh6AX1wGwqxsQIMaA"
    },
    "message": "SUCCESS"
}
```

`POST /sheets/{sheetId}/move`

Moves the specified Sheet to a new location.

<aside class="notice">When a Sheet that is shared to one or more user(s) and/or group(s) is moved into or out of a workspace, those <i>sheet-level</i> shares will be preserved.</aside>

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [ContainerDestination object](#containerdestination-object), limited to the following required attributes:<ul><li>destinationType</li><li>destinationId</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Sheet object](#sheet-object) for the moved Sheet, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Publish Sheet

### Get Sheet Publish Status

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/publish \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
  sheetId: 4583614634583940
};

// Get sheet publish status.
smartsheet.sheets.getPublishStatus(options)
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Get sheet publish status.
smartsheet.SheetResources.GetPublishStatus(sheetId);
```

```java
// Get sheet publish status.
smartsheet.sheetResources().getPublishStatus(sheetId);
```

```python
# Get sheet publish status.
action = smartsheet.Sheets.get_publish_status(sheetId)
status = action.result
# status is a smartsheet.models.SheetPublish object
```

> Example Response:

```json
{
	"readOnlyLiteEnabled": false,
	"readOnlyFullEnabled": true,
	"readWriteEnabled": false,
	"icalEnabled": false,
	"readOnlyFullAccessibleBy": "ALL",
	"readOnlyFullUrl": "https://publish.smartsheet.com/6d35fa6c99334d4892f9591cf6065"
}
```

`GET /sheets/{sheetId}/publish`

Gets the Sheet's 'Publish' settings.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [SheetPublish object](#sheetpublish-object)

### Set Sheet Publish Status

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/publish \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"readOnlyLiteEnabled": true,"readOnlyFullEnabled": false,"readWriteEnabled": false,"icalEnabled": false}'
```

```javascript
// Specify publish status.
var publishStatus = {
  "readOnlyLiteEnabled": true,
  "readOnlyFullEnabled": false,
  "readWriteEnabled": false,
  "icalEnabled": false
};

// Set options.
var options = {
  body: publishStatus,
  sheetId: 4583614634583940
};

// Set publish status.
smartsheet.sheets.setPublishStatus(options)
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Specify sheet publish status properties.
SheetPublish sheetPublish = new SheetPublish.PublishStatusBuilder(true, false, false, false).Build();

// Set sheet publish status.
smartsheet.SheetResources.UpdatePublishStatus(sheetId, sheetPublish);
```

```java
// Specify sheet publish status properties.
SheetPublish sheetPublish = new SheetPublish.PublishStatusBuilder().setIcalEnabled(false).setReadOnlyFullEnabled(false).setReadWriteEnabled(false).setReadOnlyLiteEnabled(true).build();

// Set sheet publish status.
smartsheet.sheetResources().updatePublishStatus(sheetId, sheetPublish);
```

```python
# Set sheet publish status.
# With the Python SDK, if fewer than all four flags are set, current status will be retrieved and merged with the flags that _are_ set with this method call.

smartsheet.Sheets.set_publish_status(
    sheetId,
    smartsheet.models.SheetPublish({
        'read_only_lite_enabled': True
    })
)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "icalEnabled": false,
        "readOnlyFullEnabled": false,
        "readOnlyLiteEnabled": true,
        "readOnlyLiteUrl": "http://publish.smartsheet.com/9862638d9c444014b5d7a114d436e99d",
        "readWriteEnabled": false
    },
    "resultCode": 0
}
```

`PUT /sheets/{sheetId}/publish`

Sets the publish status of the Sheet and returns the new status, including the URLs of any enabled publishings.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [SheetPublish object](#sheetpublish-object) limited to the following attributes:<ul><li>readOnlyLiteEnabled (required)</li><li>readOnlyFullEnabled (required)</li><li>readOnlyFullAccessibleBy (optional) - set to either "ALL" or "ORG", when <b>readOnlyFullEnabled</b>=true</li><li>readWriteEnabled (required)</li><li>readWriteAccessibleBy (optional) - set to either "ALL" or "ORG", when <b>readWriteEnabled</b>=true</li><li>icalEnabled (required)</li></ul>To enable one or more of the Publish Options for the Sheet (i.e., to publish the Sheet), set the corresponding "Enabled" attribute(s) to `true`. To disable one or more of the Publish Options for the Sheet (i.e., to unpublish the Sheet), set the corresponding "Enabled" attribute(s) to `false`.
<%= RETURNS %> | [Result object](#result-object) containing a [SheetPublish object](#sheetpublish-object)

<aside class="notice">If <b>readOnlyFullEnabled</b> is set to <code>true</code> in the request, but <b>readOnlyFullAccessibleBy</b> is not specified, then the value of <b>readOnlyFullAccessibleBy</b> will be defaulted to the organization-level 'Sheet Publishing' setting (if the Sheet owner belongs to an organization) or to "ALL" (if the Sheet owner does not belong to an organization).</aside>

<aside class="notice">If <b>readWriteEnabled</b> is set to <code>true</code> in the request but <b>readWriteAccessibleBy</b> is not specified, then the value of <b>readWriteAccessibleBy</b> will be defaulted to the organization-level 'Sheet Publishing' setting (if the Sheet owner belongs to an organization) or to "ALL" (if the Sheet owner does not belong to an organization).</aside>

## Search Sheet 

<%= partial "snippets/searchSheet.md.erb" %>

## Send Sheet via Email

<%= partial "snippets/sendSheet.md.erb" %>

## Send Update Request

<%= partial "snippets/createUpdateRequest.md.erb" %>

## Share Sheet

For details about Sheet sharing, see [Sheet Sharing](#sheet-sharing).


## Update Sheet

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"name":"New Sheet Name", "userSettings": {"criticalPathEnabled": true}}'
```

```javascript
// Specify updated sheet properties.
var sheet = {
    "name": "New Sheet Name",
    "userSettings": {
    	"criticalPathEnabled": true,
	}
};

// Set options.
var options = {
    body: sheet,
    id: 7960873114331012 // ID of Sheet
};

// Update sheet.
smartsheet.sheets.updateSheet(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify updated sheet properties.
Sheet sheet = new Sheet.UpdateSheetBuilder(sheetId).SetName("New Sheet Name").SetUserSettings(new SheetUserSettings { CriticalPathEnabled = true }).Build();

// Update sheet.
smartsheet.SheetResources.UpdateSheet(sheet);
```

```java
// Specify updated sheet properties.
Sheet sheet = new Sheet.UpdateSheetBuilder().setSheetId(sheetId).setName("New Sheet Name").setUserSettings(new SheetUserSettings.AddUserSettingsBuilder().setCriticalPathEnabled(true).build()).build();

// Update sheet.
smartsheet.sheetResources().updateSheet(sheet);
```

```python
# Update sheet.
smartsheet.Sheets.update_sheet(
    sheetId,
    smartsheet.models.Sheet({
        'name': 'New Sheet Name',
        'user_settings': smartsheet.models.SheetUserSettings({
            'critical_path_enabled': True
        })
    })
)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "id": 7960873114331012,
        "name": "New Sheet Name",
        "accessLevel": "OWNER",
		"userSettings": {
			"criticalPathEnabled": true
		},
        "permalink": "https://app.smartsheet.com/b/home?lx=RE8LkzA48kPRWTzcgEYOga"
    },
    "resultCode": 0
}
```

`PUT /sheets/{sheetId}`

Updates the Sheet specified in the URL.

To modify Sheet contents, see [Add Row(s)](#add-row(s)), [Update Row(s)](#update-row(s)), [Add Column(s)](#add-column(s)), and [Update Column](#update-column).

This operation can be used to update an individual user's sheet settings.  If the request body contains only the **userSettings** attribute, this operation may be performed even if the user
only has read-only access to the sheet (i.e. the user has viewer permissions, or the sheet is read-only).
 
     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Sheet object](#sheet-object) limited to the following attributes:<ul><li>name (optional)</li><li>userSettings (optional): [SheetUserSettings object](#sheetusersettings-object) for updating this user's settings for the sheet</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Sheet object](#sheet-object) for the updated Sheet

## <%= RELATED %>

A Sheet is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

### Sheet Attachments

For details about working with a Sheet's attachments, see [Attachments](#attachments).

### Sheet Cells

For details about working with a Sheet's cells, see [Cells](#cells).

For details about working with images in cells, see [Cell Images](#cell-images).

### Sheet Columns

For details about working with a Sheet's columns, see [Columns](#columns).

### Sheet Discussions

There are two ways to get discussion-related information for a Sheet:

Operation | Returns
----------|----------|-----------
[Get Sheet](#get-sheet)<br/>(with **include** parameter value "discussions") | Response does *not* contain the Comments that comprise each Discussion.
[Get All Discussions](#get-all-discussions)<br/>(with **include** parameter value "comments") |  Response *does* contain the Comments that comprise each Discussion.

For more information about working with a Sheet's discussions, see [Discussions](#discussions).

### Sheet Rows 

For details about working with a Sheet's rows, see [Rows](#rows).


# Sights

A Sight is a collection of widgets that can contain data from a variety of different data sources (i.e., Sheets, Reports, custom data).

## <%= OBJECTS %>

### Sight Object

     |     |     |
-----|-----|-----|
**id** | number | Sight ID
**name** | string | Sight Name 
**columnCount** | number | Number of Columns that the Sight contains
**widgets** | [widget](#widget-object)[] | Array of Widget objects
**favorite** | boolean | Indicates whether the User has marked the Sight as a favorite
**accessLevel** | string | User's permissions on the Sight. Valid values: <ul><li>OWNER</li> <li>ADMIN</li> <li>VIEWER</li></ul>
**permalink** | string | URL that represents a direct link to the Sight in Smartsheet
**createdAt** | timestamp | Time of creation
**modifiedAt** | timestamp | Time of last modification
**workspace** | [Workspace](#workspace-object) | A Workspace object, limited to only 2 attributes: <ul><li>id</li> <li>name</li></ul> _Note: this attribute is only present if the Sight resides within a Workspace._

### Widget Object

     |     |     |
-----|-----|-----|
**id** | number | Widget ID
**type** | string | Type of widget
**title** | string | _(Optional)_ Title of the widget
**showTitle** | boolean | **True** indicates that the client should display the widget title.  Note that this is independent of the "title" string which may be null or empty.
**showTitleIcon** | boolean | **True** indicates that the client should display the Sheet icon in the widget title
**titleFormat** | string | [FormatDescriptor](#formatting)
**xPosition** | number | X-coordinate of widget's position on the Sight
**yPosition** | number | Y-coordinate of widget's position on the Sight
**height** | number | Number of Rows that the widget occupies on the Sight
**width** | number | Number of Columns that the widget occupies on the Sight
**version** | int | Widget version number
**contents** | [WidgetContent](#widgetcontent-object) | Data that specifies the contents of the widget. _Note: the type of *WidgetContent* object (and attributes within) will depend on the value of *Widget.type*: <ul><li>CELLLINK - [CellLinkWidgetContent](#celllinkwidgetcontent-object)</li> <li>SHEETSUMMARY - [CellLinkWidgetContent](#celllinkwidgetcontent-object)</li> <li>RICHTEXT - [RichTextWidgetContent](#richtextwidgetcontent-object)</li> <li>SHORTCUTICON - [ShortcutWidgetContent](#shortcutwidgetcontent-object)</li> <li>SHORTCUTLIST - [ShortcutWidgetContent](#shortcutwidgetcontent-object) </li> <li>GRIDGANTT - [ReportWidgetContent](#reportwidgetcontent-object)</li> <li>IMAGE - [ImageWidgetContent](#imagewidgetcontent-object)</li>

### CellLinkWidgetContent object

     |     |     |
-----|-----|-----|
hyperlink | [hyperlink](#hyperlink-object) | The widget has **when clicked** attribute set to that hyperlink (if present and non-null)
cellData | [cellData](#celldataitem-object)[] | Array of cellDataItem objects
column | [column](#column-object)[] | Array of Column objects

### RichTextWidgetContent object

     |     |     |
-----|-----|-----|
html | string | The widget content as HTML </br> </br> The Rich Text widget supports the following subset of HTML tags and CSS Styles: </br></br> <b>HTML</b><ul><li>a</li> <li>br</li> <li>li</li> <li>ol</li> <li>p</li> <li>ul</li> <li>span</li></ul> <b>CSS</b><ul><li>color</li> <li>font-family</li> <li>font-size</li> <li>font-style</li> <li>font-weight</li> <li>text-align</li> <li>text-decoration</li></ul>

### ShortcutWidgetContent object

     |     |     |
-----|-----|-----|
shortcutData | [shortcutData](#shortcutdataitem-object)[] | An array of ShortcutDataItem objects


### ReportWidgetContent object

     |     |     |
-----|-----|-----|
htmlContent | string | HTML snippet to render Report


### ImageWidgetContent object

     |     |     |
-----|-----|-----|
**privateId** | string | The image private ID
**height** | integer | Original height of the image in pixels
**width** | integer | Original width of the image in pixels
**fileName** | string | Name of the image file
**format** | string | [formatDescriptor](#formatting)


### CellDataItem object

     |     |     |
-----|-----|-----|
**label** | string | Label for the data point. This will be either the column name or a user-provided string
**labelFormat** | string | [formatDescriptor](#formatting)
**objectValue** | A **string**, **number**, or a **boolean** value | The type of data returned will depend on the cell type and the data in the cell
**cell** | [cell](#cell-object) | Cell Object
**valueFormat** | string | [formatDescriptor](#formatting)
**order** | integer | The display order for the CellDataItem
**columnId** | number | Column ID for the cell

### ShortcutDataItem object

     |     |     |
-----|-----|-----|
**label** | string | Label for the data point
**labelFormat** | string | [formatDescriptor](#formatting)
**mimeType** | string | Attachment type (one of FILE, GOOGLE_DRIVE, LINK, BOX_COM, DROPBOX, EVERNOTE, or EGNYTE)
**hyperlink** | [hyperlink](#hyperlink-object) | Hyperlink object
**order** | integer | The display order for the ShortcutWidgetItem


## Copy Sight

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/copy \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json"
-d '{ \
    "destinationType": "workspace", \
    "destinationId": 7960873114331012, \
    "newName": "newSightName" \
}' \
-X POST
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": {
        "id": 4583173393803140,
        "name": "newSightName",
        "accessLevel": "OWNER",
        "permalink": "https://app.smartsheet.com/b/home?lx=lB0JaOh6AX1wGwqxsQIMaA"
    },
    "message": "SUCCESS"
}
```

`POST /sights/{sightId}/copy`

Creates a copy of the specified Sight.

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [ContainerDestination object](#containerdestination-object)
<%= RETURNS %> | [Result object](#result-object) containing a [Sight](#sight-object) for the newly created Sight, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>


## Delete Sight

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
```
```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
    "resultCode": 0,
    "message": "SUCCESS"
}
```

`DELETE /sights/{sightId}`

Deletes the Sight specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | DELETE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

## Get Sight

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
  "id": 2591554075418573,
  "name": "Test",
  "accessLevel": "OWNER",
  "columnCount": 6,
  "widgets": [
    {
      "id": 3056651398234562,
      "type": "RICHTEXT",
      "contents": {
        "htmlContent": "<p>This is a test</p>"
      },
      "xPosition": 2,
      "yPosition": 0,
      "width": 2,
      "height": 4,
      "showTitleIcon": false,
      "titleFormat": ",,1,,,,,,,3,,,,,,",
      "version": 1
    },
    {
      "id": 48092647672583496,
      "type": "SHORTCUTLIST",
      "contents": {
        "shortcutData": [
          {
            "label": "Sight Data",
            "labelFormat": ",2,,,,,1,,1,,,,,,,",
            "hyperlink": {
              "url": "https://app.smartsheet.com/b/home?lx=m1O5qo7tpM1h23KFxYavIw",
              "sheetId": 692061146243972
            },
            "attachmentType": "SMARTSHEET",
            "order": 0
          }
        ]
      },
      "xPosition": 1,
      "yPosition": 0,
      "width": 1,
      "height": 1,
      "showTitleIcon": false,
      "titleFormat": ",,1,,,,,,,3,,,,,,",
      "version": 1
    }
  ]
}
```

`GET /sights/{sightId}`

Gets the specified Sight.


     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Sight object](#sight-object)

## List Sights

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sights \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 2,
	"data": [
        {
            "id": 2331373580117892,
            "name": "Sales Sight",
            "accessLevel": "OWNER",
			"permalink": "https://app.smartsheet.com/b/home?lx=xUefSOIYmn07iJJesvSHCQ",
            "createdAt": "2016-01-28T00:24:41Z",
            "modifiedAt": "2016-01-28T20:32:33Z"
        },
        {
            "id": 7397923160909700,
            "name": "Sight #2",
            "accessLevel": "OWNER",
			"permalink": "https://app.smartsheet.com/b/home?lx=xUefSOIYmn07iJJrthEFTG",
            "createdAt": "2016-01-28T01:17:51Z",
            "modifiedAt": "2016-01-28T20:32:27Z"
        }
	]
}
```

`GET /sights`

Gets the list of all Sights that the User has access to.

<aside class="notice"><%= SUPPORTS_NUMERICDATES %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PARAMETER_MODIFIEDSINCE %>
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Sight objects](#sight-object) limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li><li>createdAt</li><li>modifiedAt</li></ul>

## Move Sight

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/move \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json"
-d '{ \
    "destinationType": "folder", \
    "destinationId": workspace_or_folder_id \
}' \
-X POST
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": {
        "id": 4583173393803140,
        "name": "moved_Sight_name",
        "accessLevel": "OWNER",
        "permalink": "https://app.smartsheet.com/b/home?lx=lB0JaOh6AX1wGwqxsQIMaA"
    },
    "message": "SUCCESS"
}
```

`POST /sights/{sightId}/move`

Moves the specified Sight to a new location.

<aside class="notice">When a Sight that is shared to one or more user(s) and/or group(s) is moved into or out of a workspace, those <i>Sight-level</i> shares will be preserved.</aside>

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [ContainerDestination object](#containerdestination-object), limited to the following required attributes:<ul><li>destinationType</li><li>destinationId</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Sight object](#sight-object) for the moved Sight, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Share Sight

For details about Sight sharing, see [Sights Sharing](#sights-sharing).

## Update Sight

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"name": "New Sight name"}'
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "accessLevel": "OWNER",
        "id": 7960873114331012,
        "name": "New Sight name",
        "permalink": "https://app.smartsheet.com/b/home?lx=rBU8QqUVPCJ3geRgl7L8yQ"
    },
    "resultCode": 0
}
```

`PUT /sights/{sightId}`

Updates (renames) the specified Sight. 

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Sight object](#sight-object) limited to the following attribute:<ul><li>name (string)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the updated [Sight object](#sight-object)



# Templates

A Template can be used to create a Sheet, as described in [Create Sheet from Template](#create-sheet-from-template).

## <%= OBJECTS %>

### Template Object

     |     |     |
-----|-----|-----|
**id** | number | Template ID
**name** | string | Template name
**description** | string | Template description
**accessLevel** | string | User's permissions on the Template
**image** | string | URL to the small preview image for this template<br/>*Only applicable to non-blank public templates*
**largeImage** | string | URL to the large preview image for this template<br/>*Only applicable to non-blank public templates*
**locale** | string | Locale of the template<br/>*Only applicable to public templates*
**type** | string | Type of the template. One of "sheet" or "report"<br/>*Only applicable to public templates*
**tags** | string[] | List of search tags for this template<br/>*Only applicable to non-blank public templates*
**categories** | string[] | List of categories this template belongs to<br/>*Only applicable to public templates*
**blank** | boolean | Flag indicating whether the template is blank<br/>*Only applicable to public templates*
**globalTemplate** | string | Type of global template. One of: "BLANK_SHEET", "TASK_LIST", or "PROJECT_SHEET"<br/>*Only applicable to blank public templates*

## List Public Templates

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/templates/public \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// List public templates.
smartsheet.templates.listPublicTemplates()
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List public templates (omit pagination parameters).
smartsheet.TemplateResources.ListPublicTemplates(null);

// List public templates (specify 'includeAll' parameter with value of "true").
smartsheet.TemplateResources.ListPublicTemplates(new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll'
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List public templates (specify 'includeAll' parameter with value of "true").
smartsheet.templateResources().listPublicTemplates(parameters);

// List public templates (omit pagination parameters).
smartsheet.templateResources().listPublicTemplates(null);
```

```python
# List public templates.
action = smartsheet.Templates.list_public_templates()
pages = action.total_pages
templates = action.data
```

> Example Response:

<%= partial "snippets/listTemplates_response.md.erb" %>

`GET /templates/public`

Gets the list of public Templates to which the user has access.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listTemplates_table.md.erb" %>

## List User-created Templates

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/templates \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// List user-created templates.
smartsheet.templates.listUserCreatedTemplates()
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// List user-created templates (omit pagination parameters).
smartsheet.TemplateResources.ListUserCreatedTemplates(null);

// List user-created templates (specify 'includeAll' parameter with value of "true").
smartsheet.TemplateResources.ListUserCreatedTemplates(new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List user-created templates (specify 'includeAll' parameter with value of "true").
smartsheet.templateResources().listUserCreatedTemplates(parameters);

// List user-created templates (omit pagination parameters).
smartsheet.templateResources().listUserCreatedTemplates(null);
```

```python
# List user-created templates.
action = smartsheet.Templates.list_user_created_templates()
pages = action.total_pages
templates = action.data
```

> Example Response:

<%= partial "snippets/listTemplates_response.md.erb" %>

`GET /templates`

Gets the list of user-created Templates to which the user has access.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listTemplates_table.md.erb" %>

# Token

The Smartsheet API utilizes OAuth 2.0 for Authentication and Authorization. An **Authorization** HTTP header containing an Access Token is required to authenticate requests.  For more information, see [Authentication](#authentication).

## Get Access Token

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/token \
-d 'grant_type=authorization_code&code={your_code}&client_id={your_client_id}&redirect_uri={redirect_uri}&hash={SHA_256(app_secret|code)}' \
-X POST
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
   "access_token": "Access Token Value",
   "token_type": "bearer",
   "refresh_token": "Refresh Token Value",
   "expires_in": "#_of_seconds_before_token_expires"
}
```

`POST /token`

Gets an access token, as part of the OAuth process. For more information, see [OAuth Flow](#oauth-flow).

     |     |
-----|-----|
<%= PARAMETERS %> | **grant_type** (required) -- must be set to "authorization_code"
 | **client_id** (required) -- client id for your app
 | **code** (required) -- authorization code returned in the previous step
 | **redirect_uri** (optional) -- redirect URL registered for your app, including the protocol (e.g., "http://"); if not provided, the redirect URL set during registration is used.
 | **hash** (required) -- SHA-256 hash of your App secret concatenated with a pipe and the authorization code.  The app_secret is never sent with the request.

## Refresh Access Token

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/token \
-d 'grant_type=refresh_token&refresh_token={your_refresh_token}
&client_id={your_client_id}&redirect_uri={redirect_uri}
&hash={SHA_256(app_secret|refresh_token)}' \
-X POST
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
   "access_token": "Newly refreshed Access Token",
   "expires_in": "#_of_seconds_before_token_expires",
   "token_type": "bearer",
   "refresh_token": "New refresh token"
}
```

`POST /token`

Refreshes an access token, as part of the OAuth process. For more information, see [OAuth Flow](#oauth-flow).

     |     |
-----|-----|
<%= PARAMETERS %> | **grant_type** (required) -- must be set to "refresh_token"
 | **client_id** (required) -- client id for your app
 | **refresh_token** (required) -- refresh_token value that came with the access token
 | **redirect_uri** (optional) -- redirect URL registered for your app, including the protocol (e.g., "http://")
 | **hash** (required) -- SHA-256 hash of your App secret concatenated with a pipe and the refresh token value

## Revoke Access Token

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/token \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /token`

Revokes the access token used to make this request.  The access token will no longer be valid, and subsequent API calls made using the token will fail.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

# Update Requests

## <%= OBJECTS %>

<%= partial "snippets/updateRequest_object.md.erb" %>

<%= partial "snippets/sentUpdateRequest_object.md.erb" %>

<%= partial "snippets/schedule_object.md.erb" %>

## Create Update Request

<%= partial "snippets/createUpdateRequest.md.erb" %>

## Delete Update Request

<%= partial "snippets/deleteUpdateRequest.md.erb" %>

## Get Update Request

<%= partial "snippets/getUpdateRequest.md.erb" %>

## List Update Requests

<%= partial "snippets/listUpdateRequests.md.erb" %>

## Change Update Request

<%= partial "snippets/changeUpdateRequest.md.erb" %>

## Delete Sent Update Request

<%= partial "snippets/deleteSentUpdateRequest.md.erb" %>

## Get Sent Update Request

<%= partial "snippets/getSentUpdateRequest.md.erb" %>

## List Sent Update Requests

<%= partial "snippets/listSentUpdateRequests.md.erb" %>

# Users

## <%= OBJECTS %>

### User Object

     |     |     |
-----|-----|-----|
**id** | number | User ID
**email** | string | User's primary email address
**name** | string | User's full name (read-only)
**firstName** | string | User's first name
**lastName** | string | User's last name
**admin** | boolean | Flag indicating whether the user is a system admin (can manage users and account)
**licensedSheetCreator** | boolean | Flag indicating whether the user is a licensed user (can create and own sheets)
**groupAdmin** | boolean | Flag indicating whether the user is a group admin (can create and edit groups)
**resourceViewer** | boolean | Flag indicating whether the user is a resource viewer (can access resource views)
**status** | string |  User status, set to one of the following values:<ul><li>ACTIVE</li><li>PENDING</li><li>DECLINED</li></ul>
**alternateEmails** | [AlternateEmail](#alternateemail-object)[] | An array of [AlternateEmail objects](#alternateemail-object) representing the alternate email address(es) associated with the User account

### UserProfile Object

     |     |     |
-----|-----|-----|
**id** | number | Current user's ID
**email** | string | Current user's primary email address
**firstName** | string | Current user's first name
**lastName** | string | Current user's last name
**timeZone** | string | Current user's time zone ID
**locale** | string | Current user's locale (see [Server Information](#server-information))
**account** | [Account](#account-object) | Account object representing the current user's customer account
**admin** | boolean | Flag indicating whether the user is a system admin (can manage users and account)
**licensedSheetCreator** | boolean | Flag indicating whether the user is a licensed user (can create and own sheets)
**groupAdmin** | boolean | Flag indicating whether the user is a group admin (can create and edit groups)
**resourceViewer** | boolean | Flag indicating whether the user is a resource viewer (can access resource views)
**status** | string | User status, set to one of the following values: <ul><li>ACTIVE</li><li>PENDING</li><li>DECLINED</li></ul>
**alternateEmails** | [AlternateEmail](#alternateemail-object)[] | An array of [AlternateEmail objects](#alternateemail-object) representing the alternate email address(es) associated with the User account

### Account Object

     |     |     |
-----|-----|-----|
**name** | string | Account name
**id** | number | Account ID

### AlternateEmail Object

     |     |     |
-----|-----|-----|
**id** | number | AlternateEmail ID
**email** | string | User's alternate email address
**confirmed** | boolean | Flag indicating whether the alternate email address has been confirmed

## Add User

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users?sendEmail=true \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"firstName": "John", "lastName": "Doe", "email": "john.doe@smartsheet.com", "admin": false, "licensedSheetCreator": true}'
```

```javascript
// Specify user properties.
var user = {
	"firstName": "John",
	"lastName": "Doe",
	"email": "john.doe@smartsheet.com",
	"admin": false,
	"licensedSheetCreator": true
};

// Set options.
var options = {
	body: user
};

// Add user.
smartsheet.users.createUser(options)
	.then(function(data) {
		console.log(data)
	}).catch(function(error) {
		console.log(error);
	});
```

```csharp
// Set user properties.
User user = new User.AddUserBuilder("john.doe@smartsheet.com", false, true).SetFirstName("John").SetLastName("Doe").Build();

// Add user.
smartsheet.UserResources.AddUser(user, true);
```

```java
// Set user properties.
User user = new User.AddUserBuilder().setAdmin(false).setEmail("john.doe@smartsheet.com").setFirstName("John").setLastName("Doe").setLicensedSheetCreator(true).build();

// Add user.
smartsheet.userResources().addUser(user);
```

```python
# Add user.
smartsheet.Users.add_user(
    smartsheet.models.User({
        'first_name': 'John',
        'last_name': 'Doe',
        'email': 'john.doe@smartsheet.com',
        'admin': False,
        'licensed_sheet_creator': True
    })
)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "admin": false,
        "email": "john.doe@smartsheet.com",
        "name": "John Doe",
        "id": 1768423626696580,
        "licensedSheetCreator": true
    },
    "resultCode": 0
}
```

`POST /users`

Adds a User to the organization.

<aside class="notice">This operation is only available to system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **sendEmail** (optional): A boolean flag indicating whether or not to send a welcome email. Defaults to **false**.
<%= REQUEST %> | [User object](#user-object) with the following attributes:<ul><li>email (required)</li><li>admin (required)</li><li>licensedSheetCreator (required)</li><li>firstName (optional)</li><li>lastName (optional)</li><li>resourceViewer (optional)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the newly created [User object](#user-object).
<%= ERRORS %>  | If an error occurs because the request specified the [*alternate* email address](#alternate-email-address(es)) (i.e., not the primary email address) of an existing Smartsheet User (to invite the user into the Org), the [Error object](#errors) returned will contain a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "The specified email address (u1+1@smartsheet.com) is an alternate address for a user with the primary email address of u1@smartsheet.com. Please retry using their primary address."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

<aside class="notice">If successful, and user auto provisioning (UAP) is on, and user matches the auto provisioning rules, user will be added to the org.  If UAP is off, or user does not match UAP rules, user will be invited to the org and must explicitly accept the invitation to join.</aside>

<aside class="notice">In some specific scenarios, supplied attributes such as <b>firstName</b> and <b>lastName</b> may be ignored.  For example, if you are inviting an existing Smartsheet user to join your organization, and the invited user has not yet accepted your invitation, any supplied <b>firstName</b> and <b>lastName</b> will be ignored.</aside>

## Alternate Email Address(es)

A [User](#user-object) in Smartsheet must have a *primary* email address associated with their account (**User.email**) and may optionally have one or more *alternate* email addresses associated with their account (**User.alternateEmails**). 

<aside class="notice">The following operations must be performed using an User's <i>primary</i> email address:<ul><li><a href="#add-group-member(s)">Add Group Member(s)</a></li><li><a href="#add-user">Add User</a></li><li><a href="#create-update-request">Create Update Request</a></li><li><a href="#share-report">Share Report</a></li><li><a href="#share-sheet">Share Sheet</a></li><li><a href="#share-workspace">Share Workspace</a></li></ul>Attempting to specify a User's <i>alternate</i> email address for any of the above operations will result in an error.</aside>

### Add Alternate Email(s)

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"email": "altEmail1@smartsheet.com"},{"email": "altEmail2@smartsheet.com"}]'
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# Add alternate emails.
smartsheet.Users.add_alternate_email(
    userId,
    [
        smartsheet.models.AlternateEmail({
            'email': 'altEmail1@smartsheet.com'
        }),
        smartsheet.models.AlternateEmail({
            'email': 'altEmail2@smartsheet.com'
        })
    ]
)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": [
		{
			"id": 12345,
			"email": "altEmail1@smartsheet.com",
			"confirmed": false
		},
		{
			"id": 67890,
			"email": "altEmail2@smartsheet.com",
			"confirmed": false
		}
    ],
    "resultCode": 0
}
```

`POST /users/{userId}/alternateemails`

Adds one or more alternate email addresses for the specified User.

<aside class="notice">If this operation is done within the context of an Enterprise account and the alternate email's <a href="http://help.smartsheet.com/articles/2072731-user-auto-provisioning-enterprise-only-">domain is verified</a>, the added email will be automatically confirmed and will not send a confirmation to the specified user.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Array of [AlternateEmail objects](#alternateemail-object), each limited to only the **email** attribute
<%= RETURNS %> | [Result object](#result-object) containing an array of the newly created [AlternateEmail objects](#alternateemail-object).
<%= ERRORS %>  | If a single email address is specified in the request and an error occurs, the response will contain the typical [Error object](#errors).<br/><br/>If multiple email addresses are specified in the request and an error occurs, the [Error object](#errors) returned will contain a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**email**: Problematic email address specified in the request</li><li>**errorCode**: Smartsheet [error code](#error-handling)</li><li>**message**: Message that describes the problem with the specified email address</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 1160,<br/>&#160;&#160;"message": "Invalid bulk request. See detail for more information."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"email": "altEmail1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"errorCode": 1157,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"message": "This address is already associated with another Smartsheet account, so it cannot be added as an alternate address for this account."<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}


### Make Alternate Email Primary

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails/{alternatEmailId}/makeprimary \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

> Example Response:

```json
{
"message": "SUCCESS",
"resultCode": 0,
"result":
  {
    "id": 12345,
    "email": "altEmail1@smartsheet.com",
    "confirmed": false
  }
}
```

`POST /users/{userId}/alternateemails/{alternateEmailId}/makeprimary`

Makes the specified alternate email address the primary email address for the specified user.

<aside class="notice">The alternate address can only be made primary if both conditions are met: <br/> 1) The current primary email domain is validated <br/> 2) The alternate addres is confirmed <b>OR</b> the alternate address domain is validated</aside>


     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= RETURNS %> | [Result object](#result-object) containing an object of the now primary [AlternateEmail object](#alternateemail-object)
<%= ERRORS %> | If an error occurs because the account type is not Enterprise, we restrict this API endpoint to only Enterprise accounts. [Learn more](https://www.smartsheet.com/enterprise/scale) about the Enterprise platform.<br/>If an error occurs because either the primary or alternate email domains are not validated, that specific domain needs to be [validated](http://help.smartsheet.com/articles/2072731-user-auto-provisioning-enterprise-only-).<br/>If an error occurs because a user has a perosnal email address as their current primary address, the specified user needs to manually change their primary address in their Personal Settings.


### Delete Alternate Email

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails/{alternatEmailId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# Delete alternate email.
smartsheet.Users.delete_alternate_email(userId, alternateEmailId)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /users/{userId}/alternateemails/{alternateEmailId}`

Deletes the specified alternate email address for the specified user.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

### Get Alternate Email

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails/{alternateEmailId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# Get alternate email.
alt_email = smartsheet.Users.get_alternate_email(userId, alternateEmailId)
```

> Example Response:

```json
{
	"id": 12345,
	"email": "altEmail1@smartsheet.com",
	"confirmed": true
}
```

`GET /users/{userId}/alternateemails/{alternateEmailId}`

Gets the specified Alternate Email. 

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [AlternateEmail object](#alternateemail-object)<br/><br/>

### List Alternate Emails

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// [todo]
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# Get all alternate emails.
action = smartsheet.Users.list_alternate_emails(userId)
emails = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 1,
	"data": [
		{
			"id": 12345,
			"email": "altEmail1@smartsheet.com",
			"confirmed": true
		},
		{
			"id": 67890,
			"email": "altEmail2@smartsheet.com",
			"confirmed": false
		}
	]
}
```

`GET /users/{userId}/alternateemails`

Gets a list of the Alternate Emails for the specified User. 

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [AlternateEmail objects](#alternateemail-object)<br/><br/>

## Get Current User

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/me \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Get current user.
smartsheet.users.getCurrentUser()
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
    	console.log(error);
  	});
```

```csharp
// Get current user.
smartsheet.UserResources.GetCurrentUser();
```

```java
// Get current user.
smartsheet.userResources().getCurrentUser();
```

```python
# Get current user.
me = smartsheet.Users.get_current_user()
```

> Example Response:

```json
{
    "email": "john.doe@smartsheet.com",
    "firstName": "John",
    "lastName": "Doe",
    "id": 48569348493401200, 
    "admin": true,
    "licensedSheetCreator": true,
    "groupAdmin": true,
    "resourceViewer": true,	
	"alternateEmails": [
		{
			"id": 12345,
			"email": "altEmail1@smartsheet.com",
			"confirmed": true                
		}
	]
}
```

`GET /users/me`

Gets the current User.

     |     |
-----|-----|
<%= SCOPE %> | all scopes
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [UserProfile object](#userprofile-object)

## Get User

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/{userId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
	id: 48569348493401200	// ID of user
};

// Get user.
smartsheet.users.getUser(options)
  	.then(function(data) {
    	console.log(data)
  	})
  	.catch(function(error) {
    	console.log(error);
  	});
```

```csharp
// Get user.
smartsheet.UserResources.GetUser(userId);
```

```java
// Get user.
smartsheet.userResources().getUser(userId);
```

```python
# Get user.
user = smartsheet.Users.get_user(userId)
```

> Example Response:

```json
{
    "email": "john.doe@smartsheet.com",
    "firstName": "John",
    "lastName": "Doe",
    "id": 48569348493401200,
    "status": "ACTIVE",
    "admin": true,
    "licensedSheetCreator": true,
    "groupAdmin": true,
    "resourceViewer": true,	
	"alternateEmails": [
		{
			"id": 12345,
			"email": "altEmail1@smartsheet.com",
			"confirmed": true                
		}
	]
}
```

`GET /users/{userId}`

Gets the User specified in the URL. 

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [UserProfile object](#userprofile-object)<br/><br/><b>Note</b>: If the API request is submitted by a system administrator, the following UserProfile attributes will be included in the response (else, they will be omitted from the response):<ul><li>status</li><li>admin</li><li>licensedSheetCreator</li><li>groupAdmin</li><li>resourceViewer</li></ul>

## List All Org Sheets

<%= partial "snippets/listAllOrgSheets.md.erb" %>

## List Users

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users?email=john.doe@smartsheet.com \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript 
// List users.
smartsheet.users.listAllUsers()
	.then(function(data) {
		console.log(data)
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// List users (omit 'email' parameter and pagination parameters).
smartsheet.UserResources.ListUsers(null, null);

// List users (specify 'email' parameter with value of "john.doe@smartsheet.com" and 'includeAll' parameter with value of "true").
smartsheet.UserResources.ListUsers(new string[] { "john.doe@smartsheet.com" }, new PaginationParameters(true, null, null));
```

```java
// Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List users (specify 'email' parameter with value of "john.doe@smartsheet.com" and 'includeAll' parameter with value of "true").
smartsheet.userResources().listUsers(new HashSet(Arrays.asList("john.doe@smartsheet.com")), parameters);

// List users (omit 'email' parameter and pagination parameters).
smartsheet.userResources().listUsers(null, null);
```

```python
# Get all users.
action = smartsheet.Users.list_users(include_all=True)
users = action.data

# Get paginated list of users.
action = smartsheet.Users.list_users()
pages = action.total_pages
users = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 1,
	"data": [
		{
			"id": 94094820842,
			"admin": true,
			"email": "john.doe@smartsheet.com",
			"name": "John Doe",
            "status": "ACTIVE",
            "admin": true,
            "licensedSheetCreator": true,
            "groupAdmin": true,
            "resourceViewer": true
		}
	]
}
```

`GET /users`

Gets the list of Users in the organization. To filter by email, use the optional **email** query string parameter to specify a list of users' email addresses. 

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **email** (optional): Comma-separated list of email addresses on which to filter the results<br/><br/><%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [User objects](#user-object)<br/><br/><b>Note</b>: If the API request is submitted by a system administrator, the following User attributes will be included in the response (else, they will be omitted from the response):<ul><li>status</li><li>admin</li><li>licensedSheetCreator</li><li>groupAdmin</li><li>resourceViewer</li></ul>

## Remove User

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/{userId}?transferTo=USER_ID&removeFromSharing=true \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
	id: 94094820842 // ID of User
};

// Remove user.
smartsheet.users.removeUser(options)
	.then(function(data) {
		console.log(data)
	})	
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Remove user (transferring ownership of groups and sheets to another user, and removing the user from sharing).
smartsheet.UserResources.RemoveUser(userId, transferToUserId, true, true);
```

```java
// Remove user (transferring ownership of groups and sheets to another user, and removing the user from sharing).
DeleteUserParameters parameters = new DeleteUserParameters(transferToUserId, true, true);
smartsheet.userResources().deleteUser(userId, parameters);
```

```python
# Remove user.
smartsheet.Users.remove_user(userId, transfer_to=userId, remove_from_sharing=True)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /users/{userId}`

Removes a User from an organization. User is transitioned to a free collaborator with read-only access to owned sheets (unless those are optionally transferred to another user). 

<aside class="notice">This operation is only available to system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **transferTo** (required if user owns groups): The ID of the user to transfer ownership to.  If the user being removed owns groups, they will be transferred to this user.  If the user owns sheets, *and* **transferSheets** is true, then the removed user's sheets will be transferred to this user.
  | **transferSheets** (optional): If `true`, and **transferTo** is specified, the removed user's sheets will be transferred.  Else, sheets will not be transferred.  Defaults to `false`.
  | **removeFromSharing** (optional): Set to `true` to remove the user from sharing for all sheets/workspaces in the organization. If not specified, User will not be removed from sharing.
<%= RETURNS %> | [Result object](#result-object)

<aside class="notice">If the <b>transferTo</b> parameter is specified and the removed user owns Groups, the user specified via the <b>transferTo</b> parameter must have Group Admin rights.</aside>

<aside class="notice">The <b>transferTo</b> and <b>transferSheets</b> parameters cannot be specified for a user who has not yet accepted an invitation to join the organization (i.e., if user <b>status</b> = "PENDING").</aside>

## Update User

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/users/{userId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"admin": true, "licensedSheetCreator": true}'
```

```javascript
// Specify updated user properties.
var user = {
	"admin": true,
	"licensedSheetCreator": true
};

// Set options.
var options = {
	body: user,
	id: 82349925918590 // ID of User
};

// Update user.
smartsheet.users.updateUser(options)
	.then(function(data) {
		console.log(data)
	}).catch(function(error) {
		console.log(error);
	});
```

```csharp
// Specify updated user properties.
User user = new User.UpdateUserBuilder(true, true).Build()

// Update user.
smartsheet.UserResources.UpdateUser(userId, user);
```

```java
// Specify updated user properties.
User user = new User.UpdateUserBuilder().setUserId(userId).setAdmin(true).setLicensedSheetCreator(true).build();

// Update user.
smartsheet.userResources().updateUser(user);
```

```python
# Update user.
smartsheet.Users.update_user(
    userId,
    smartsheet.models.User({
        'licensed_sheet_creator': True,
        'admin': True
    })
)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "admin": true,
        "licensedSheetCreator": true
    },
    "resultCode": 0
}
```

`PUT /users/{userId}`

Updates the User specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [User object](#user-object) containing at least one of the following attributes:<ul><li>admin (required)</li><li>licensedSheetCreator (required)</li><li>firstName (optional)</li><li>lastName (optional)</li><li>resourceViewer (optional)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the [User object](#user-object) for the updated User

# Workspaces

## <%= OBJECTS %>

### Workspace Object

     |     |     |
-----|-----|-----|
**id** | number | Workspace ID
**name** | string | Workspace name
**favorite** | boolean | Returned only if the user has marked the Workspace as a Favorite in their Home tab (value = "true")
**accessLevel** | string | User's permissions on the Workspace
**permalink** | string | URL that represents a direct link to the Workspace in Smartsheet
**sheets** | [Sheet](#sheet-object)[] | Array of Sheet objects
**folders** | [Folder](#folder-object)[] | Array of Folder objects
**reports** | [Report](#report-object)[] | Array of Report objects
**templates** | [Template](#template-object)[] | Array of Template objects

## Copy Workspace

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/copy?include=all \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-d '{"newName": "newWorkspaceName"}' \
-X POST
```

```csharp
// Specify name for the new workspace.
ContainerDestination destination = new ContainerDestination
{
	NewName = "newWorkspaceName"
};

// Copy workspace (omit 'include' and 'skipRemap' parameters).
smartsheet.WorkspaceResources.CopyWorkspace(workspaceId, destination, null, null);

// Copy workspace (specify 'include' parameter with value of "all", and 'skipRemap' parameter with value of "cellLinks").
smartsheet.WorkspaceResources.CopyWorkspace(workspaceId, destination, new WorkspaceCopyInclusion[] { WorkspaceCopyInclusion.ALL }, new WorkspaceRemapExclusion[] { WorkspaceRemapExclusion.CELL_LINKS });
```

```java
// Specify name for the new workspace.
ContainerDestination destination = new ContainerDestination.AddContainerDestinationBuilder().setNewName("newWorkspaceName").build();

// Copy workspace (omit 'include' and 'skipRemap' parameters).
smartsheet.workspaceResources().copyWorkspace(workspaceId, destination, null, null);

// Copy workspace (specify 'include' parameter with value of "all", and 'skipRemap' parameter with value of "cellLinks").
smartsheet.workspaceResources().copyWorkspace(workspaceId, destination, EnumSet.of(WorkspaceCopyInclusion.ALL), EnumSet.of(WorkspaceRemapExclusion.CELLLINKS));
```

```python
# Copy workspace.
smartsheet.Workspaces.copy_workspace(
    workspaceId,
    smartsheet.models.ContainerDestination({
        'new_name': 'newWorkspaceName'
    })
)
```

> Example Response:

```json
{
    "resultCode": 0,
    "result": {
        "id": 7116448184199044,
        "name": "newWorkspaceName",
        "accessLevel": "OWNER",
        "permalink": "https://{url}?lx=VL4YlIUnyYgASeX02grbLQ"
    },
    "message": "SUCCESS"
}
```

`POST /workspaces/{workspaceId}/copy`

Creates a copy of the specified Workspace.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to copy:<ul><li>data</li><li>attachments</li><li>discussions</li><li>cellLinks</li><li>forms</li><li>brand</li><li>shares</li><li>**all** - specify a value of "all" to include everything (data, attachments, discussions, cellLinks, forms, brand, and shares)</li></ul><i>Note</i>: Cell history will not be copied, regardless of which **include** parameter values are specified. 
 | **skipRemap** (optional) --  -- comma-separated list of references to NOT re-map for the newly created workspace:<ul><li>cellLinks</li><li>reports</li><li>sheetHyperlinks</li><li>Sights</li></ul>By default, all cell links, reports, sheet hyperlinks, and sights that reference objects in the source workspace will be re-mapped to reference corresponding objects in the newly created workspace. The **skipRemap** parameter can be specified to change that default behavior:<ul><li>If "cellLinks" is specified in the <b>skipRemap</b> parameter value, the cell links within the newly created workspace will continue to point to the original source sheets.</li><li>If "reports" is specified in the <b>skipRemap</b> parameter value, the reports within the newly created workspace will continue to point to the original source sheets.</li><li>If "sheetHyperlinks" is specified in the <b>skipRemap</b> parameter value, the sheet hyperlinks within the newly created workspace will continue to point to the original source sheets.</li><li>If "sights" is specified in the <b>skipRemap</b> parameter value, the widgets within sights in the newly created workspace will continue to point to the original source sheets / reports.</li></ul>
<%= REQUEST %> | [ContainerDestination object](#containerdestination-object), limited to the following attribute:<ul><li>newName (string) - required</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Workspace object](#workspace-object) for the newly created Workspace

## Create Workspace

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name": "New workspace"}'
```

```javascript
// Specify workspace name.
var workspace = {"name": "New workspace"};

// Set options.
var options = {
    body: workspace
};

// Create workspace.
smartsheet.workspaces.createWorkspace(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify workspace name.
Workspace workspace = new Workspace.CreateWorkspaceBuilder("New workspace").Build();

// Create workspace.
smartsheet.WorkspaceResources.CreateWorkspace(workspace);
```

```java
// Specify workspace name.
Workspace workspace = new Workspace.UpdateWorkspaceBuilder().setName("New workspace").build();

// Create workspace.
smartsheet.workspaceResources().createWorkspace(workspace);
```

```python
# Create workspace.
smartsheet.Workspaces.create_workspace(
    smartsheet.models.Workspace({
        'name': 'New workspace'
    })
)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "accessLevel": "OWNER",
        "id": 7960873114331012,
        "name": "New workspace",
        "permalink": "https://app.smartsheet.com/b/home?lx=rBU8QqUVPCJ3geRgl7L8yQ"
    },
    "resultCode": 0
}
```

`POST /workspaces`

Creates a Workspace.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Workspace object](#workspace-object), limited to the following attribute:<ul><li>name (string) - required</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Workspace object](#workspace-object) for the newly created Workspace


## Delete Workspace

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/7960873114331012 \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```javascript
// Set options.
var options = {
    workspaceId: 6621332407379844
};

// Delete workspace.
smartsheet.workspaces.deleteWorkspace(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Delete workspace.
smartsheet.WorkspaceResources.DeleteWorkspace(workspaceId);
```

```java
// Delete workspace.
smartsheet.workspaceResources().deleteWorkspace(workspaceId);
```

```python
# Delete workspace.
smartsheet.Workspaces.delete_workspace(workspaceId)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /workspaces/{id}`

Deletes the specified Workspace (and its contents).

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)

## Get Workspace

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceid} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// Set options.
var options = {
    workspaceId: 7116448184199044
};

// Get workspace.
smartsheet.workspaces.getWorkspace(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Get workspace (omit 'loadAll' and 'include' parameters).
smartsheet.WorkspaceResources.GetWorkspace(workspaceId, null, null);

// Get workspace (specify 'loadAll' parameter with value of "false", and 'include' parameter with value of "source").
smartsheet.WorkspaceResources.GetWorkspace(workspaceId, false, new WorkspaceInclusion[] { WorkspaceInclusion.SOURCE });
```

```java
// Get workspace (omit 'loadAll' and 'include' parameters).
smartsheet.workspaceResources().getWorkspace(workspaceId, null, null);

// Get workspace (specify 'loadAll' parameter with value of "false", and 'include' parameter with value of "source").
smartsheet.workspaceResources().getWorkspace(workspaceId, false, EnumSet.of(SourceInclusion.SOURCE));
```

```python
# Get workspace.
workspace = smartsheet.Workspaces.get_workspace(workspaceId)
```

> Example Response:

```json
{
    "sheets": [
       {
            "id": 4583173393803140,
            "name": "sheet 1",
            "accessLevel": "OWNER",
			"permalink": "https://app.smartsheet.com/b/home?lx=8Z0XuFUEAkxmHCSsMw4Zg1",
            "createdAt": "2015-06-05T20:05:29Z",
            "modifiedAt": "2015-06-05T20:05:43Z"
       }
	],
    "accessLevel": "OWNER",
    "id": 7116448184199044,
    "name": "New workspace",
    "permalink": "https://app.smartsheet.com/b/home?lx=8Z0XuFUEAkxmHCSsMw4Zgg"
}
```

`GET /workspaces/{workspaceid}`

Gets the specified Workspace (and lists its contents).

<aside class="notice">By default, this operation only returns the top-level items in the Workspace. To load all of the contents, including nested Folders, include the <b>loadAll</b> query string parameter with a value of <b>true</b>.</aside>

<aside class="notice">If no Folders, Sheets, Reports, Templates, or Sights are present in the Workspace, the corresponding attribute (e.g., "folders", "sheets", etc.) will not be present in the response.</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **loadAll** (optional) -- **true** or **false** (defaults to **false**)
	| **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user ID for each sheet</li><li>source - the [source](#source-object) for any sheet that was created from another sheet or template</li></ul>
<%= RETURNS %> | [Workspace object](#workspace-object), populated according to the **include** parameter

## List Workspaces

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```javascript
// List workspaces.
smartsheet.workspaces.listWorkspaces()
	.then(function(data) {
		console.log(data);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// List workspaces (omit pagination parameters).
smartsheet.WorkspaceResources.ListWorkspaces(null);

// List workspaces (specify 'includeAll' parameter with value of "true").
smartsheet.WorkspaceResources.ListWorkspaces(new PaginationParameters(true, null, null)););
```

```java
// Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters.PaginationParametersBuilder().setIncludeAll(true).build();

// List workspaces (specify 'includeAll' parameter with value of "true").
smartsheet.workspaceResources().listWorkspaces(parameters);

// List workspaces (omit pagination parameters).
smartsheet.workspaceResources().listWorkspaces(null);
```

```python
# Get all workspaces.
action = smartsheet.Workspaces.list_workspaces(include_all=True)
workspaces = action.data

# Get paginated list of workspaces.
action = smartsheet.Workspaces.list_workspaces(page_size=20, page=1)
pages = action.total_pages
workspaces = action.data
```

> Example Response:

```json
{
    "pageNumber": 1,
    "pageSize": 100,
    "totalPages": 1,
    "totalCount": 2,
	"data": [
		{
			"accessLevel": "OWNER",
			"id": 3457273486960516,
			"name": "workspace 1",
			"permalink": "https://app.smartsheet.com/b/home?lx=JNL0bgXtXc0pzni9tzAc4g"
		},
		{
			"accessLevel": "OWNER",
			"id": 7960873114331012,
			"name": "workspace 2",
			"permalink": "https://app.smartsheet.com/b/home?lx=JLiJbgXtXc0pzni9tzAKiR"
		}
	]
}
```

`GET /workspaces`

Gets the list of Workspaces to which the user has access.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Workspace objects](#workspace-object)

## Share Workspace

For details about Workspace sharing, see [Workspace Sharing](#workspace-sharing).

## Update Workspace

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/workspaces/7960873114331012 \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"name": "Updated workspace"}'
```

```javascript
// Specify updated workspace properties.
var workspace = {"name": "Updated workspace"};

// Set options.
var options = {
    body: workspace,
    workspaceId: 7960873114331012
};

// Update workspace.
smartsheet.workspaces.updateWorkspace(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```

```csharp
// Specify updated workspace name.
Workspace workspace = new Workspace.UpdateWorkspaceBuilder(workspaceId, "Updated workspace").Build();

// Update workspace.
smartsheet.WorkspaceResources.UpdateWorkspace(workspace);
```

```java
// Specify updated workspace properties.
Workspace workspace = new Workspace.UpdateWorkspaceBuilder().setName("Updated workspace").setId(workspaceId).build();

// Update workspace.
smartsheet.workspaceResources().updateWorkspace(workspace);
```

```python
# Update workspace.
smartsheet.Workspaces.update_workspace(
    workspaceId,
    smartsheet.models.Workspace({
        'name': 'Updated workspace'
    })
)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "result": {
        "accessLevel": "OWNER",
        "id": 7960873114331012,
        "name": "Updated workspace",
        "permalink": "https://app.smartsheet.com/b/home?lx=rBU8QqUVPCJ3geRgl7L8yQ"
    },
    "resultCode": 0
}
```

`PUT /workspaces/{id}`

Updates the Workspace specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Workspace object](#workspace-object) limited to the following attribute:<ul><li>name (string)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the updated [Workspace object](#workspace-object)

## <%= RELATED %>

### Workspace Folders

For details about working with folders in a Workspace, see [Folders](#folders).

### Workspace Sheets

For details about working with sheets in a Workspace, see [Sheets](#sheets).</br>

# <span class="customTOCSectionHeading">Additional Reference</span>

# Other Objects

## AutoNumberFormat Object

Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated.

     |     |     |
-----|-----|-----|
**prefix** | string | The prefix. Can include the date tokens:<ul><li>{YY}</li><li>{YYYY}</li><li>{MM}</li><li>{DD}</li></ul>
**suffix** | string | The suffix. Can include the date tokens:<ul><li>{YY}</li><li>{YYYY}</li><li>{MM}</li><li>{DD}</li></ul>
**fill** | string | Indicates zero-padding. Must be between 0 and 10 "0" (zero) characters.
**startingNumber** | number | The starting number for the auto-id

## ContainerDestination Object

Object that describes the destination container when a Sheet or Folder is moved, or when a Sheet, Folder, or Workspace is copied.

     |     |     |
-----|-----|-----|
**destinationType** | string | Type of the destination container (when copying or moving a Sheet or a Folder). One of the following values:<ul><li>home</li><li>workspace</li><li>folder</li></ul>
**destinationId** | number | ID of the destination container (when copying or moving a Sheet or a Folder). Required if **destinationType** is "folder" or "workspace" If **destinationType** is "home", this value must be null.
**newName** | string | Name of the newly created object (when creating a copy of a Sheet, Folder, Sight, or Workspace). This attribute is not supported for "move" operations (i.e., a moved Sheet, Folder, Sight, or Workspace retains its original name).
 
## IndexResult Object

Object returned for all `GET` operations against index endpoints.  This object provides metadata which can be used to perform paging on potentially large data sets.  See the [Paging](#paging) section for more information.

<%= partial "snippets/indexResult_object.md.erb" %>

## Result Object

Object returned for all `PUT` operations and `POST` operations (and for some other operations). 

     |     |     |
-----|-----|-----|
**resultCode** | number | 0 (zero) if successful, 3 for partial success of a bulk operation.
**message** | string | Message that indicates the outcome of the request. (One of SUCCESS or PARTIAL_SUCCESS)
**result** | Object | Object that was created or updated (if applicable)
**version** | number | New version of the Sheet.<br/>*Applicable only for operations which update sheet data* 
**failedItems** | [BulkItemFailure](#bulkitemfailure-object)[] | Array of BulkItemFailure objects which represents the items that failed to be added or updated. See [Partial Success](#partial-success) for more information.<br/>*Applicable only for bulk operations that support partial success*

## BulkItemFailure Object

Object that contains information about an item that failed to be added or updated as specified by a bulk request.

     |     |     |
-----|-----|-----|
**index** | number | The index of the failed item in the bulk request array
**error** | [Error object](#errors) | The error caused by the failed item
**rowId** | number | The id of the [Row](#row-object) that failed.<br/>*Applicable only to bulk row operations* 

# Formatting

Formatting data can optionally be included for columns, rows, and cells by adding the "include=format" query string parameter to any API operation that returns any of those objects (for example, `GET /sheets/{sheetId}`, `GET sheets/{sheetId}/rows/{rowId}`, etc.).  When this parameter is included, objects that contain non-default formatting will include a **format** property.  Objects which do not have any non-default format settings applied will exclude this property.
 
Because the amount of format data in a large sheet can potentially be very large in itself, for bandwidth reasons, format data is represented by a compact format descriptor string.  The format descriptor takes the form of a comma-separated list of numeric values.  These values represent indexes into pre-defined format lookup tables which can be retrieved using the `GET /serverinfo` operation.

## Row & Column Format

Setting the format of a row or column through the API simply sets the baseline format for new cells in that row or column.  It does not affect existing cells.
 
The equivalent API action for what happens when you highlight a column or row in the Smartsheet web app and set a format (e.g. bold) would be to update the format of a column or row (via `PUT /sheets/{sheetId}/rows/{rowId}` or `PUT /sheets/{sheetId}/columns/{columnId}`), and update the format for every cell in that row or column.  All of the cells in a row can be updated in one operation (`PUT /sheets/{sheetId}/rows/{rowId}`), but there is currently no way to update all of the cells in a column in one operation.  This will be addressed in a future version of the API.

## Format Descriptor

The format descriptor contains 16 comma-separated numeric indexes.  Each index represents a format style whose value can be found in one of the lookup tables in the [FormatTables object](#formattables-object).

**Format Descriptor Element #** | **Format Style** | **FormatTables Lookup Table Property** |
-----|-----|-----|
0 | Font Family | fontFamily
1 | Font size | fontSize
2 | Bold | bold
3 | Italic | italic
4 | Underline | underline
5 | Strikethrough | strikethrough
6 | Horizontal alignment | horizontalAlign
7 | Vertical alignment | verticalAlign
8 | Text color | color
9 | Background color | color
10 | Taskbar color | color
11 | Currency | currency
12 | Decimal count | decimalCount
13 | Thousands separator | thousandsSeparator
14 | Number format | numberFormat
15 | Text wrap | textWrap

<aside class="notice">Formats which have not been explicitly set are omitted in the descriptor string.  For example, a cell which has been set to bold and italic, but has no other formats applied to it, would have a format descriptor of ",,1,1,,,,,,,,,,,,".</aside>

<aside class="notice">As a convenience, the FormatTables object contains a <b>defaults</b> property which is a format descriptor that describes which formats the Smartsheet web application displays for unset formats.  Your application can use these values to display unformatted cells identically to the Smartsheet web application.</aside>

## FormatTables Object

The FormatTables object is retrieved via the `GET /serverinfo` operation and contains all of the lookup tables that the [Format Descriptor](#format-descriptor) indexes refer to, as well as a property called **defaults**, which is a Format Descriptor that describes which formats the Smartsheet web application displays for unset formats.
 
<aside class="notice">Indexes and their values are guaranteed never to change or be removed for a given major API version.  However, new values could potentially be added to the ends of lookup tables.<br/><br/>Because of this possibility, your code should handle the case where a cell might contain a format index value greater than the size of a lookup table your app has loaded.  Your application should check for that case and reload the format tables if necessary.</aside>

     |     |     |
-----|-----|-----|
**defaults** | string | A format descriptor where each element describes the formats the Smartsheet web application displays for format values that have not been set.
**fontFamily** | array of [FontFamily objects](#fontfamily-object) | Font families with additional font information
**fontSize** | array of strings | Font sizes in points
**bold** | array of strings | Possible values:<ul><li>none</li><li>on</li></ul>
**italic** | array of strings | Possible values:<ul><li>none</li><li>on</li></ul>
**underline** | array of strings | Possible values:<ul><li>none</li><li>on</li></ul>
**strikethrough** | array of strings | Possible values:<ul><li>none</li><li>on</li></ul>
**horizontalAlign** | array of strings | Horizontal alignment, possible values:<ul><li>default</li><li>left</li><li>center</li><li>right</li></ul>Note: "default" is the default value, which is equivalent to "left".
**verticalAlign** | array of strings | Vertical alignment, possible values:<ul><li>default</li><li>top</li><li>middle</li><li>bottom</li></ul>Note: "default" is the default value, which is equivalent to "top".
**color** | array of strings | Color hex values. <br/><br/>Note: "none" is the default value for all colors.  Applications will need to handle this value and use app-defined colors (typically this is Black for text color and White for background color)
**currency** | array of [Currency objects](#currency-object) | Currency codes and symbols
**decimalCount** | array of strings | All allowed decimal count values
**thousandsSeparator** | array of strings | Possible values:<ul><li>none</li><li>on</li></ul>
**numberFormat** | array of strings | Possible values:<ul><li>none</li><li>NUMBER</li><li>CURRENCY</li><li>PERCENT</li></ul>
**textWrap** | array of strings | Possible values:<ul><li>none</li><li>on</li></ul>

## FontFamily Object

     |     |     |
-----|-----|-----|
**name** | string | Name of the font family (e.g. "Arial")
**traits** | array | Platform-independent traits of the font family. One of the following values:<ul><li>serif</li><li>sans-serif</li>

## Currency Object

     |     |     |
-----|-----|-----|
**code** | string | The ISO 4217 currency code (e.g. "EUR")
**symbol** | string | The currency symbol (e.g. "€")

# <span class="customTOCSectionHeading">Deprecations</span>

Smartsheet occasionally deprecates APIs to indicate that those APIs should no longer be used in active development. 
Deprecated APIs typically remain present and usable for a reasonable period of time following the release in which they were deprecated, but may be removed entirely from a future version of the API. 
You should never use deprecated APIs in new development, and if you have existing code that uses deprecated APIs, we recommend that you update that code as soon as possible. 

# Endpoints

This section specifies the endpoints and parameters that have been deprecated in version 2.0 of the Smartsheet API.

## Deprecated Endpoints

The following endpoints have been deprecated in version 2.0 of the Smartsheet API.

Operation | Deprecated Endpoint | Replaced by 
-------- | -------- | ----- | -----------------
 Delete Row (singular) | DELETE /sheets/{sheetId}/rows/{rowId} | new endpoint for [Delete Row(s)](#delete-row(s))
 Send Row (singular) | POST /sheets/{sheetId}/rows/{rowId}/emails | new endpoint for [Send Row(s)](#send-row(s))
 
## Deprecated Parameters

Operation | Deprecated Parameter | Replaced by
-------- | -------- | --------
[Create Child Folder](#create-child-folder) | include | new endpoint for [Copy Folder](#copy-folder)
[Create Sheet](#create-sheet) | include | new endpoint for [Copy Sheet](#copy-sheet)
[Create Workspace](#create-workspace) | include | new endpoint for [Copy Workspace](#copy-workspace)

# Objects

This section specifies the objects and attributes that have been deprecated in version 2.0 of the Smartsheet API.

## Deprecated Objects

No objects have been deprecated in version 2.0 of the Smartsheet API.

## Deprecated Attributes

The following attributes have been deprecated in version 2.0 of the Smartsheet API.

Object | Deprecated Attribute | Replaced by
-------- | -------- | --------
[Folder object](#folder-object) | fromId | new endpoint for [Copy Folder](#copy-folder)
[Sheet object](#sheet-object) | fromId | new endpoint for [Copy Sheet](#copy-sheet)
[Workspace object](#workspace-object) | fromId | new endpoint for [Copy Workspace](#copy-workspace)


# <span class="customTOCSectionHeading">Webhooks</span>

# Intro to Webhooks

<%= WEBHOOKS_INTRO %> 

At a high-level, it works like this:

<ol>
	<li><span class="customInstructionsHeading">Your application subscribes to <a href="#event-callbacks">callbacks</a>.</span><br/>First, you need to subscribe to event notifications (callbacks) by creating one or more webhooks.  You can create a webhook manually via the API or have your application create a webhook dynamically.  Each webhook must specify:
		<ul>
			<li>Which Smartsheet object to monitor for events</li>
			<li>Which events in that object should trigger a callback</li>
			<li>The HTTPS URL (i.e., "<b>callback URL</b>") where Smartsheet should send callbacks when any of the specified events occur within the scope of the specified Smartsheet object. (Note: Smartsheet webhooks do not support callbacks to servers using self-signed certificates)</li>
		</ul> 
		<br/>
		
		<b>Webhook examples in plain English:</b> 
		<ul>
			<li><i>"When any changes occur in Sheet_A, send a callback to https://www.myapp.com/abc"</i></li>
			<li><i>"When a new row is added to Sheet_B, send a callback to https://www.myapp.com/def"</i></li>
			<li><i>"When a cell value is changed in Sheet_C, send a callback to https://www.myapp.com/ghi"</i></li>
		</ul>
		<br/>
	</li>
	<li><span class="customInstructionsHeading">When any of the specified events occur within an object that is being monitored by a webhook, Smartsheet sends an <code>HTTP POST</code> (i.e., "callback") to the <b>callback URL</b> that is associated with the Webhook.</span><br/>
		<ul>
			<li><i>Note:</i> The callback payload is a "skinny" payload -- it indicates which objects changed and the type of events that occurred, but does not contain any data from the objects themselves.</li>
		</ul> 
		<br/>
	</li>
	<li><span class="customInstructionsHeading">Your application receives, acknowledges, and processes callbacks.</span><br/>Your application receives the <code>HTTP POST</code>, acknowledges the callback by responding with HTTP status 200, and processes the callback. 
	Because the callbacks are "skinny", you may need to make one or more requests to the Smartsheet API to retrieve the actual data associated with the change.
	</li>
</ol>

## Webhook Management

Webhooks are created and managed by using the Smartsheet API. See [Webhooks API Reference](#webhooks) for details about the related API operations. 

## Webhook Ownership & Access

Webhooks can be created and managed via [Direct API Access](http://smartsheet-platform.github.io/api-docs/#direct-api-access) or by a [third-party app](http://smartsheet-platform.github.io/api-docs/#third-party-app-development). 

A webhook that is created via Direct API Access:

* is owned by the User who created it
* can be managed only by the User who created it
* will not be affected if the access token that was used to create it is revoked, as long as the User remains active

A webhook that is created by a [third-party app](http://smartsheet-platform.github.io/api-docs/#third-party-app-development):

* is owned by the User who authorized the third-party app (and is associated with the third-party app)
* can be managed by the third-party-app (as long as it maintains authorization) OR by the User who owns it
* will be permanently disabled if the third-party app's permissions are revoked

## Webhook Scope & Events

A webhook monitors the specified **scope** for the specified **events**. 

A [Webhook's](#webhook-object) **scope** attribute indicates the scope of the subscription. It is specified when [creating a webhook](#create-webhook), and cannot subsequently be changed. 

* Currently, "sheet" is the only supported value for the **scope** atribute. 
* Future releases of webhooks will support additional scopes such as "org", "folder", "workspace", etc.

A [Webhook's](#webhook-object) **event** attribute indicates the set of events that a webhook is subscribed to (i.e. which events will trigger a callback).

* Events are represented as a dot-separated string in the format "*object*.*event*", where an asterisk (&#42;) can be used to represent "all objects" or "all events".
* Currently, "&#42;.&#42;" is the only supported value for the **events** attribute. This indicates a subscription to all objects in the scope, and all events for those objects.
* Future releases of webhooks will support more specific events such as "sheet.updated", "row.deleted", "column.created", etc.

<span class="customSubHeading">Example</span>

Consider a [Webhook](#webhook-object) with the following attribute values:

* **scopeObjectId** = 12345678901234
* **scope** = "sheet" 
* **events** = "&#42;.&#42;" 

This webhook monitors the specified Sheet (id: 12345678901234) for all types of events. For example, if a row is added to the sheet, cell values are updated in the sheet, a column is deleted from the sheet, etc., a callback would be sent to the webhook's **callbackUrl**.

# Creating a Webhook

An API client can create a webhook by using the [Create Webhook](#create-webhook) operation. A newly created webhook is disabled by default.
After successfully creating a webhook, the API client must subsequently initiate and complete the [verification process](#webhook-verification) before the webhook will become enabled. 
The following diagram illustrates the process of creating and enabling a Webhook. 

<img src="images/v4-CreateAndEnableWebhook.png" />

<span class="customSubHeading">Step-by-Step:</span>

The process occurs synchronously:

1. API Client submits a [Create Webhook](#create-webhook) request.

2. Smartsheet creates the webhook, but does not initially enable the webhook (`enabled: false` and `status: "NEW_NOT_VERIFIED"`).

3. To initiate the verification process, the API Client submits an [Update Webhook](#update-webhook) request to specify `enabled: true`. (*Note*: The API Client will not receive a response to this request until the Verification process (steps 4 and 5) has completed.)

4. When Smartsheet receives the request to enable the webhook, it sends a [Verification Request](#webhook-verification) to the Subscriber (i.e., to the `callbackUrl` that the API Client specified in the **Create Webhook** request). 
The request specifies a unique random value in the **Smartsheet-Hook-Challenge** header and contains only `webhookId` in the request body.

5. The Subscriber responds to the Verification Request by echoing back the same unique random value in the **Smartsheet-Hook-Response** header of the response.

6. Once the Subscriber has successfully acknowledged the Verification Request, Smartsheet enables the webhook and responds to the API Client's **Update Webhook** request to confirm that the webhook has been enabled (`enabled: true` and `status: "ENABLED"`). 

## Webhook Verification

> Verification Request (from Smartsheet):

```test
POST [callbackUrl]
Smartsheet-Hook-Challenge: d78dd1d3-01ce-4481-81de-92b4f3aa5ab1 
{ 
    "webhookId": 2674017481058180
}
```

> Verification Response (by Subscriber):

```test
HTTP status: 200 OK
Smartsheet-Hook-Response: d78dd1d3-01ce-4481-81de-92b4f3aa5ab1 
```

When an API Client attempts to enable a webhook, Smartsheet will send a verification request to the webhook's **callbackUrl** to verify that the Subscriber expects and is able to successfully receive callbacks. 
The request specifies a unique random value in the **Smartsheet-Hook-Challenge** header and contains a JSON object in the request body with only a `webhookId` attribute.

* To verify the webhook, the Subscriber's response to the Verification Request must return a 200 HTTP status code and must echo back the same unique random value in the **Smartsheet-Hook-Response** header of the response. Once Smartsheet receives this verification response, the webhook will be enabled (`enabled: true` and `status: "ENABLED"`).

* If the Subscriber does not successfully respond to the verification request, the webhook will remain disabled (`enabled: false` and `status: "DISABLED_VERIFICATION_FAILED"`).

When a webhook is initially [created through the API](#create-webhook), the response will contain the webhook's ID.  If you wish to guarantee that your server only receives callbacks for webhooks that you created,
you can check the verification request's `webhookId` attribute against your list of created webhook IDs.  If the ID is not in the list, return a response with a non-200 status code (for example, 403 Forbidden),
and the webhook that initiated the verification request will be disabled as described above.

<aside class="notice"><b>IMPORTANT</b>: ONGOING VERIFICATION. Once a webhook has been enabled, Smartsheet will send Smartsheet will send a verification request to the webhook's <b>callbackUrl</b> once every 100 callbacks. The Subscriber should respond to the verification request as described above -- failure to do so will result in the webhook being disabled (<code>enabled: false</code> and <code>status: "DISABLED_VERIFICATION_FAILED"</code>).</aside>

# Webhook Status

A [Webhook](#webhook-object) object's **enabled** attribute indicates whether a webhook is enabled or disabled, while the **status** attribute describes the *reason* that the webhook is enabled or disabled.

<aside class="notice"><b>Note:</b><ul><li>When a Webhook's <b>enabled</b> attribute is set to <code>true</code>, Smartsheet is monitoring for the specified events and will send a <a href="#event-callbacks">callback</a> to the <b>callbackUrl</b> when the events occur.</li><li>When a Webhook's <b>enabled</b> attribute is set to <code>false</code>, Smartsheet is NOT monitoring for the specified events and will NOT send a callback to the <b>callbackUrl</b> when the events occur. Depending on the value of the <b>status</b> attribute, it may be possible to (re-)enable the Webhook. (See below for details).</li></ul></aside>

The following table lists all possible combinations of **enabled** and **status** attribute values.

Webhook.enabled | Webhook.status | Meaning | Notes
----- | ----- | ------ | -----
true  | ENABLED | Webhook is active. | 
false | NEW_NOT_VERIFIED | Webhook has been created but is not enabled because it has not yet been verified. |  Owner can re-enable the webhook by using the [Update Webhook](#update-webhook) operation to set **enabled** to `true`. Once the subscriber successfully acknowledges the [verification request](#webhook-verification), the webhook will become enabled.
false  | DISABLED_BY_OWNER | Webhook has been disabled by the owner. | Owner can re-enable the webhook by using the [Update Webhook](#update-webhook) operation to set **enabled** to `true`. Once the subscriber successfully acknowledges the [verification request](#webhook-verification), the webhook will become enabled.
false  | DISABLED_VERIFICATION_FAILED | Webhook verification has failed. |  Owner can re-enable the webhook by using the [Update Webhook](#update-webhook) operation to set **enabled** to `true`. Once the subscriber successfully acknowledges the [verification request](#webhook-verification), the webhook will become enabled.
false  | DISABLED_CALLBACK_FAILED | Webhook has been disabled because callback was not successfully delivered to the Callback URL. |  Owner can re-enable the webhook by using the [Update Webhook](#update-webhook) operation to set **enabled** to `true`. Once the subscriber successfully acknowledges the [verification request](#webhook-verification), the webhook will become enabled.
false  | DISABLED_APP_REVOKED | Webhook has been disabled because the third-party app associated with the webhook has had its access revoked. | This is a terminal state (i.e., webhook in this state cannot be re-enabled, and attempts to do so will result in error code 1153). If the third party app's access is subsequently restored, it will need to create new webhooks.
false  | DISABLED_SCOPE_INACCESSIBLE | Webhook has been disabled because its owner lost access to the corresponding data in Smartsheet (either because the object was deleted or sharing permissions were revoked). | Webhook will automatically be re-enabled if access to data is restored (i.e., if deleted object is restored or sharing permissions are restored).
false  | DISABLED_ADMINISTRATIVE | Webhook has been disabled by Smartsheet support. | A webhook in this state can only be re-enabled by Smartsheet (contact <a href="mailto:api@smartsheet.com">api@smartsheet.com</a>).  Attempting to re-enable a webhook in this state will result in error code 1154.

# Webhook Callbacks

A "callback" is the notification that Smartsheet sends to a webhook's **callbackUrl**. There are two types of callbacks:

* [**Event** callback](#event-callbacks): Alerts the subscriber when the specified event(s) have occurred in Smartsheet. This is the most common type of callback.

* [**Status Change** callback](#status-change-callbacks): Alerts the subscriber that a webhook has been automatically disabled due to loss of access or automatically re-enabled due to restoration of access.

A Subscriber has the ability to verify the integrity of a callback payload (i.e. ensure that the message was not tampered with en route) and authenticate the identity of its sender (i.e. ensure that the callback did indeed originate from Smartsheet). 
For more information, see [Authenticating Callbacks](#authenticating-callbacks-(optional)).

## Event Callbacks

> Example - Event callback (row created):

```json
{
    "nonce": "4b2ed20d-6f00-4b0c-8fac-082182aa9aac",
    "timestamp": "2015-10-27T17:04:23.795+0000",
    "webhookId": 4503604829677444,
    "scope": "sheet",
    "scopeObjectId": 4509506114742148,
    "events": [
        {
            "objectType": "sheet",
            "eventType": "updated",
            "id": 4509506114742148,
			"userId": 9007194052434043,
			"timestamp": "2015-10-27T17:03:15.000+0000"
        },
        {
            "objectType": "row",
            "eventType": "created",
            "id": 7129509179746180,
			"userId": 9007194052434043,
			"timestamp": "2015-10-27T17:03:15.000+0000"
        }
    ]
}
```

Smartsheet sends an Event callback to notify the Subscriber when the specified event(s) occur in Smartsheet.

<aside class="warning">Any events that occur while a webhook is disabled will NOT be communicated via callback if/when webhook is enabled.</aside>

<span class="customSubHeading">Callback Acknowledgement</span>

The Subscriber must respond to an event callback with a 200 [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success) to acknowledge that the callback was received. 

<span class="customSubHeading">Retry Logic</span>

If the Subscriber fails to respond with a 200 status, depending on the response, Smartsheet may retry delivery up to 14 times. (The first 7 retry attempts occur with a frequency that's determined using exponential backoff; thereafter, retry attempts will occur once every three hours until all retries have been exhausted.)

Subscriber response | Will be retried?
----- | -----
HTTP 201 through 299 | No
HTTP 309 through 399 | No
HTTP 400 through 499 (except 410) | Yes
HTTP 410 | No
HTTP 500 through 599 | Yes
Any other HTTP status | No
Request timeout | Yes

If the response is not retriable or retry attempts have been exhausted, the webhook will be disabled (`enabled: false` and `status: "DISABLED_CALLBACK_FAILED"`).
A webhook in this state can be re-enabled if the subscriber completes the verification process. (See [Webhook Status](#webhook-status) for details.)

## Status Change Callbacks

> Status Change callback (access lost):

```json
{
    "nonce" : "20d4d741-6224-446f-b9c4-bf7802326192",
    "timestamp" : "2015-10-27T14:48:40.214+0000",
    "webhookId": 2674017481058180,
    "scope" : "sheet",
    "scopeObjectId" : 3407658024757124,
    "newWebhookStatus" : "DISABLED_SCOPE_INACCESSIBLE"
}
```

> Status Change callback (access restored):

```json
{
    "nonce" : "20d4d741-6224-446f-b9c4-bf7802326192",
    "timestamp" : "2015-10-27T14:48:40.214+0000",
    "webhookId": 2674017481058180,
    "scope" : "sheet",
    "scopeObjectId" : 3407658024757124,
    "newWebhookStatus" : "ENABLED"
}
```

If a webhook's owner loses access to the object that a webhook is monitoring (either because the object was deleted or the webhook owner's access to the object was revoked in Smartsheet), 
Smartsheet will automatically disable the webhook and send a Status Change callback to alert the Subscriber of this change in status. 
The **newWebhookStatus** attribute will indicate that the webhook is now disabled (because the scope is inaccessible).

If the webhook owner's access to the object is subsequently restored, 
Smartsheet will automatically re-enable the webhook and send a Status Change callback to alert the Subscriber of this change in status. 
The **newWebhookStatus** attribute will indicate that the webhook is now enabled.

## Authenticating Callbacks (optional)

> Calculating an HMAC

```shell
# See programming language tabs for language-specific examples.
```

```java
private static final String HMAC_SHA256_ALGORITHM = "HmacSHA256";
private static final int HMAC_RADIX = 16;

private String calculateHmac(String sharedSecret, String callbackBody) throws GeneralSecurityException {
	Mac mac = Mac.getInstance(HMAC_SHA256_ALGORITHM));
	mac.init(new SecretKeySpec(sharedSecret.getBytes(), HMAC_SHA256_ALGORITHM));

	byte[] rawHmac = mac.doFinal(callbackBody.getBytes());
	return new BigInteger(1, rawHmac).toString(HMAC_RADIX);
}
```

A Subscriber has the ability to verify the integrity of a callback payload (i.e. ensure that the message was not tampered with en route) and authenticate the identity of its sender (i.e. ensure that the callback did indeed originate from Smartsheet).

When you create a new [webhook](#webhook-object), it is assigned a randomly generated **sharedSecret** value.  The shared secret is used by Smartsheet to sign callback payloads, and should not be shared with any third parties.

To authenticate a callback request:

1. Calculate the [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) of the webhook's **sharedSecret** and the request body.  This must be done using the SHA-256 cryptographic hash algorithm.

2. Format the calculated value as a string in base 16.

3. Compare your result with the value of the **Smartsheet-Hmac-SHA256** header of the request.

If the values match, you can be sure the request originated from Smartsheet and that the data has not been tampered with.

<aside class="notice">For maximum security, you may also choose to <a href="#reset-shared-secret">reset your webhook's shared secret</a> at periodic intervals.</aside>

# Preventing Infinite Loops

It's possible that an application which subscribes to callbacks (using webhooks) might react to those callbacks by using the API to make additional changes in Smartsheet. 
But, consider the following scenario:

1. **App1** creates a Webhook to monitor **Sheet-A** for changes, specifying an **App-1** URL as the **callbackUrl** for the Webhook.

2. **App-1** updates **Sheet-A** using the API.

3. Smartsheet detects that **Sheet-A** has changed and sends a callback to **App-1** (as the webhook specified).

4. **App-1** processes the callback, and in the course of doing so, updates **Sheet-A** again using the API.

5. Return to Step 3.

To protect against infinite loops like the one outlined above, we've introduced support for a new header that an API client can include with any API request that adds, updates, or deletes data in Smartsheet. 
Here's how it works:

<ul>
<li>An API client includes the <b>Smartsheet-Change-Agent</b> header in any API request that adds, updates, or deletes data in Smartsheet.<br/><br/>
	<ul>
		<li>The header value should be set to a string that the API client will be able to recognize as identifying itself.<br/><br/></li>
	</ul>
</li>
<li>If any <a href="#event-callbacks">Event callbacks</a> fire as a result of an API request that contains the <b>Smartsheet-Change-Agent</b> header, the value of the <b>Smartsheet-Change-Agent</b> header will be included in the <a href="#callbackevent-object">callback</a> in the value of the <b>changeAgent</b> attribute.<br/><br/></li>
<li>If a webhook Subscriber receives a <a href="#callbackevent-object">callback</a> that contains the <b>changeAgent</b> attribute, it should evaluate the attribute value:<br/><br/> 
	<ul>
		<li>If the attribute value's comma-delimited list contains the Subscriber API client's change agent value, this indicates that the change which triggered the callback <b>WAS</b> caused by the Subscriber itself, and the Subscriber can choose to ignore the callback, thus preventing an infinite loop.<br/><br/></li>
		<li>Else, the change which triggered the callback was <b>NOT</b> caused by the Subscriber itself, and if the Subscriber is going to subsequently react to the callback by making a change in Smartsheet (via API request), the API client should append a comma and its own identifier to the original attribute value, and pass that value through using the <b>Smartsheet-Change-Agent</b> header of the API request. Doing so will protect against cross-system infinite loops.<br/><br/></li>
	</ul>
</li>
</ul>

<aside class="notice">The <b>Smartsheet-Change-Agent</b> header value has a maximum length of 512 characters. If its length exceeds 512 characters, the excess will be trimmed from the front of the string, so that the most recent agent information will remain.</aside>

# Webhook Errors
 
The following table specifies the recommended action for each Smartsheet-specific error code. 
Use this information to implement error handling logic according to the following guidelines:

* If the error code indicates a permanent error condition, do not retry the request.
* If the error code indicates a problem that can be fixed, do not retry the request until the problem has been fixed.
* If the error code indicates a problem that could be overcome by retrying the request after a period of time, retry the request using exponential backoff.

HTTP status code | Smartsheet errorCode | Smartsheet message | Recommended Action |
-----|-----|-----|-----|
400 | 1151 | Scope '{0}', object id {1} was not found. | Do not retry without fixing the problem.
400 | 1152 | Only URLs with a protocol of 'https' are supported for attribute '{0}'. | Do not retry without fixing the problem.
403 | 1153 | This webhook cannot be enabled because access was revoked for the application that created it. | <span class="doNotRetry">Do not retry.</span>
403 | 1154 | Please contact api@smartsheet.com in order to enable this Webhook. | <span class="doNotRetry">Do not retry.</span>

# <span class="customTOCSectionHeading">Webhooks Reference</span>

<%= WEBHOOKS_INTRO %>

For more information, see [Webhooks Overview](#webhooks-overview).

# <%= OBJECTS %>

## Callback Object

     |     |     |
-----|-----|-----|
**nonce** | string | Random value that will be distinct for each Callback
**timestamp** | timestamp | Time that the callback was generated
**webhookId** | number | ID of the corresponding Webhook
**scope** | string | Scope of the Webhook. Currently, the only supported value is "sheet".
**scopeObjectId** | number | ID of the object that corresponds to **scope**
**events** | [CallbackEvent](#callbackevent-object)[] | Array of CallbackEvent objects
**newWebhookStatus** | string | New status of the corresponding Webhook <br/>Only returned for "Webhook Status Change" [callbacks](#webhook-callbacks) (null for "Event" Callbacks).

## CallbackEvent Object

     |     |     |
-----|-----|-----|
**objectType** | string | Type of object for which event occurred. One of the following values:<ul><li>sheet</li><li>column</li><li>row</li><li>cell</li><li>attachment</li><li>discussion</li><li>comment</li></ul>
**eventType** | string | Type of event that occurred. One of the following values:<ul><li>created</li><li>updated</li><li>deleted</li></ul>
**id** | number | ID of the object that corresponds to **objectType**. Omitted if **objectType** is "cell". 
**rowId** | number | Only present if **objectType** is "cell". The ID of the row where the cell is located.
**columnId** | number | Only present if **objectType** is "cell". The ID of the column where the cell is located.
**userId** | number | The user ID of the person who caused this event.
**timestamp** | timestamp | Time that this event occurred. A callback may contain events with different timestamps, as multiple separate events may be aggregated into a single callback request.
**changeAgent** | string | A comma-delimited list of values that uniquely identify the agent(s) responsible for making the change(s) that caused the callback to occur. Only present if the change agent included the **Smartsheet-Change-Agent** header in the API request that changed data in Smartsheet. For more information, see [Preventing Infinite Loops](#preventing-infinite-loops). 

## SharedSecret Object

     |     |     |
-----|-----|-----|
**sharedSecret** | string | New value for the shared secret

## Webhook Object

     |     |     |
-----|-----|-----|
**id** | number | Webhook ID
**name** | string | Webhook name
**apiClientId** | string | API Client Id corresponding to third-party app that created the Webhook. Read-only. Only present if webhook was created by third-party app.
**apiClientName** | string | API Client Name corresponding to third-party app that created the Webhook. Read-only. Only present if webhook was created by third-party app.
**scope** | string | Scope of the subscription. Currently, the only supported value is "sheet". Specified when a webhook is created and cannot be changed.
**scopeObjectId** | number | ID of the object that is subscribed to. Specified when a webhook is created and cannot be changed.
**events** | string[] | Array of the events that are subscribed to. Currently, must be an array of size 1 that contains the string value "&#42;.&#42;", which means "all objects" and "all events".
**callbackUrl** | string | HTTPS URL where callbacks will be sent.<br/><br/>**Note:** Smartsheet webhooks do not support callbacks to servers using self-signed certificates. The callback server must be using a signed certificate from a certificate authority.
**sharedSecret** | string | Shared secret for this webhook, randomly generated by Smartsheet. Read-only. See [Authenticating Callbacks](#authenticating-callbacks-(optional)) for details about how this value can be used.
**enabled** | boolean | Flag indicating whether the Webhook is on (`true`) or off (`false`)
**status** | string | Webhook status. Read-only. See [Webhook Status](#webhook-status) for list of possible values.
**disabledDetails** | string | Details about the reason the Webhook was disabled. Read-only. Only present when **enabled**=`false`.
**version** | number | Webhook version. Currently, the only supported value is 1. This attribute is intended to ensure backward compatibility as new webhook functionality is released. For example, a webhook with a version of 1 is guaranteed to always be sent callback objects that are compatible with the version 1 release of webhooks.
**stats** | [WebhookStats](#webhookstats-object) | Useful statistics for this webhook.  Will only be returned once this webhook has performed a callback attempt.  Read-only.
**createdAt** | timestamp | Time of creation. Read-only.
**modifiedAt** | timestamp | Time of last modification. Read-only.

## WebhookStats Object

     |     |     |
-----|-----|-----|
**lastCallbackAttemptRetryCount** | number | The number of retries the webhook had performed as of the last callback attempt.
**lastCallbackAttempt** | timestamp | When this webhook last made a callback attempt.
**lastSuccessfulCallback** | timestamp | When this webhook last made a successful callback.

# Create Webhook

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/webhooks \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST \
-d '{ "name": "Webhook #4", "callbackUrl": "http://www.myApp.com/webhooks", "scope": "sheet", "scopeObjectId": 2258256056870788, "version": 1, "events": [ "*.*" ]}'
```

```java

```

> Example Response:

```json
{
	"resultCode": 0,
	"result": {
		"id": 8444254503626628,
		"name": "Webhook #4",
		"scope": "sheet",
		"scopeObjectId": 2258256056870788,
		"events": [
			"*.*"
		],
		"callbackUrl": "http://www.myApp.com/webhooks",
		"sharedSecret": "3qo29mvjou6xt5fujukjtwzhj0",
		"enabled": false,
		"status": "NEW_NOT_VERIFIED",
		"version": 1,
		"createdAt": "2015-11-03T22:25:51Z",
		"modifiedAt": "2015-11-03T22:25:51Z"
	},
	"message": "SUCCESS"
}
```

`POST /webhooks`

Creates a new Webhook. 

<aside class="notice">A Webhook is not enabled by default when it is created. Once you've created a Webhook, you can enable it by using the <a href="#update-webhook">Update Webhook</a> operation to set <b>enabled</b> to <code>true</code>.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Webhook object](#webhook-object), limited to the following attributes:<ul><li>name (required)</li><li>callbackUrl (required)</li><li>scope (required)</li><li>scopeObjectId (required)</li><li>events (required)</li><li>version (required)</li></ul>
<%= RETURNS %> | [Result object](http://smartsheet-platform.github.io/api-docs/#result-object), containing a [Webhook object](#webhook-object) for the newly created Webhook

# Delete Webhook

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/webhooks/{webhookId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-X DELETE
```

```java

```

> Example Response:

```json
{
	"resultCode": 0,
	"message": "SUCCESS"
}
```

`DELETE /webhooks/{webhookId}`

Deletes the Webhook specified in the URL.

<aside class="notice">Using this operation will permanently delete the specified Webhook. To temporarily disable a webhook, use the <a href="#update-webhook">Update Webhook</a> operation to set <b>enabled</b> to <code>false</code>.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](http://smartsheet-platform.github.io/api-docs/#result-object)

# Get Webhook

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/webhooks/{webhookId} \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```java

```

> Example Response:

```json
{
	"id": 4503604829677444,
	"name": "Webhook #5",
	"scope": "sheet",
	"scopeObjectId": 6761855684241284,
	"events": [
		"*.*"
	],
	"callbackUrl": "http://www.myApp.com/webhooks",
	"sharedSecret": "216ejjzdnq17mq1q8xs7d4hu8b",
	"enabled": false,
	"status": "DISABLED_CALLBACK_FAILED",
	"disabledDetails": "Request returned HTTP status code 500",
	"version": 1,
	"createdAt": "2015-11-03T22:25:51Z",
	"modifiedAt": "2015-11-04T20:12:42Z" 
}
```

`GET /webhooks/{webhookId}`

Gets the Webhook specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Webhook object](#webhook-object)

# List Webhooks

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/webhooks \
-H "Authorization: Bearer ACCESS_TOKEN"
```

```java

```

> Example Response:

```json
{
	"pageNumber": 1,
	"pageSize": 100,
	"totalPages": 1,
	"totalCount": 1,
	"data": [
		{
			"id": 4503604829677444,
			"name": "Webhook #5",
			"scope": "sheet",
			"scopeObjectId": 6761855684241284,
			"events": [
				"*.*"
			],
			"callbackUrl": "http://www.myApp.com/webhooks",
			"sharedSecret": "216ejjzdnq17mq1q8xs7d4hu8b",
			"enabled": true,
			"status": "ENABLED",
			"version": 1,
			"createdAt": "2015-11-03T14:52:21Z",
			"modifiedAt": "2015-11-04T19:05:40Z"
		}
	]
}
```

`GET /webhooks`

Gets the list of all Webhooks that the user owns (if a [user generated token](http://smartsheet-platform.github.io/api-docs/#generating-access-token) was used to make the request) 
or the list of all Webhooks associated with the third-party app (if a [third-party app](http://smartsheet-platform.github.io/api-docs/#third-party-app-development) made the request). 
Items in the response are ordered by API Client name, then Webhook name, then creation date.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [IndexResult object](http://smartsheet-platform.github.io/api-docs/#indexresult-object) containing an array of [Webhook objects](#webhook-object)

# Reset Shared Secret

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/webhooks/{webhookId}/resetsharedsecret \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X POST
```

```java

```

> Example Response:

```json
{
	"resultCode": 0,
	"result": { "sharedSecret": "5nua69a56es57qdr97g9bcg8f3" },
	"message": "SUCCESS"
}
```

`POST /webhooks/{webhookId}/resetsharedsecret`

Resets the shared secret for the specified Webhook. For more information about how a shared secret is used, see [Authenticating Callbacks](#authenticating-callbacks-(optional)).

This operation can be used to rotate an API client's webhooks' shared secrets at periodic intervals to provide additional security.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>  
<%= REQUEST %> | The request body should be empty.
<%= RETURNS %> | [Result object](http://smartsheet-platform.github.io/api-docs/#result-object) containing the [SharedSecret object](#sharedsecret-object)

# Update Webhook

> Example Request:

```shell
curl https://api.smartsheet.com/2.0/webhooks/{webhookId} \
-H "Authorization: Bearer ACCESS_TOKEN" \
-H "Content-Type: application/json" \
-X PUT \
-d '{ "enabled": true }'
```

```java

```

> Example Response:

```json
{
	"resultCode": 0,
	"result": {
		"id": 8444254503626628,
		"name": "Webhook #4",
		"scope": "sheet",
		"scopeObjectId": 2258256056870788,
		"events": [
			"*.*"
		],
		"callbackUrl": "http://www.myApp.com/webhooks",
		"sharedSecret": "3qo29mvjou6xt5fujukjtwzhj0",
		"enabled": true,
		"status": "ENABLED",
		"version": 1,
		"createdAt": "2015-11-03T14:52:21Z",
		"modifiedAt": "2015-11-04T19:05:40Z"
	},
	"message": "SUCCESS"
}
```

`PUT /webhooks/{webhookId}`

Updates the Webhook specified in the URL.

<aside class="notice"><b>Enabling a Webhook</b><br/><br/>When setting a webhook's <b>enabled</b> to <code>true</code> using this operation, the behavior and result depend on the webhook's <b>status</b> and may result in a webhook <a href="#webhook-verification">verification</a> being triggered, or in some cases, an error being returned.  See <a href="#webhook-status">Webhook Status</a> for more details.</aside>

<!--aside class="notice"><b>Enabling a Webhook</b><ul><li>If <b>Webhook.enabled</b>=<code>false</code> and <a href="#webhook-status"><b>Webhook.status</b></a> is any value other than "DISABLED_APP_REVOKED", "DISABLED_SCOPE_INACCESSIBLE", or "DISABLED_ADMINISTRATIVE", using this operation to set <b>Webhook.enabled</b>=<code>true</code> will trigger the <a href="#webhook-verification">verification</a> process.</li><li>Verification must be successfully completed in order for the Webhook to become enabled.</li></ul></aside-->

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Webhook object](#webhook-object), limited to the following attributes:<ul><li>name (optional)</li><li>events (optional)</li><li>callbackUrl (optional)</li><li>enabled (optional)</li><li>version (optional)</li></ul>
<%= RETURNS %> | [Result object](http://smartsheet-platform.github.io/api-docs/#result-object) containing the [Webhook object](#webhook-object) for the updated webhook
